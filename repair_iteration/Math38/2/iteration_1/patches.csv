bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  /  n  -  n;  jpt  =  nfm  -  tmp1  /  n  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt    =    nfm    -    tmp1    /    n    -    n;    jpt  =  nfm  -  tmp1  /  n  -  n;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	15	1	add
2	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  /  n  -  n;  jpt  =  nfm  -  tmp1  /  n  -  n;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  /  n  -  n;  jpt  =  nfm  -  tmp1  /  n  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    /    n    -    n;    jpt  =  nfm  -  tmp1  /  n  -  n;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	15	1	add
3	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  /  n  -  n;  jpt  =  nfm  -  tmp1  /  n  -  n);  [CE]  ';'  expected  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  /  n  -  n;  jpt  =  nfm  -  tmp1  /  n  -  n);  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    /    n    -    n;    jpt  =  nfm  -  tmp1  /  n  -  n);	  	non-compiled	[CE]  ';'  expected	15	None	add
4	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  /  n  -  n;  Jpt  =  nfm  -  tmp1  /  n  -  n;  [CE]  cannot  find  symbol  Jpt  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  /  n  -  n;  Jpt  =  nfm  -  tmp1  /  n  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    /    n    -    n;    Jpt  =  nfm  -  tmp1  /  n  -  n;	  	non-compiled	[CE]  cannot  find  symbol  Jpt	15	None	add
5	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  /  n  -  n;  jpt  =  nfm  -  tmp1  /  n  -  n.;  [CE]  <identifier>  expected  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  /  n  -  n;  jpt  =  nfm  -  tmp1  /  n  -  n.;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    /    n    -    n;    jpt  =  nfm  -  tmp1  /  n  -  n.;	  	non-compiled	[CE]  <identifier>  expected	15	None	add
6	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  n;  jpt  =  jpt  -  tmp1  *  n  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt    =    jpt    -    tmp1    *    n    -    n;    jpt  =  jpt  -  tmp1  *  n  -  n;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	3	1	add
7	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  n;  jpt  =  jpt  -  tmp1  *  n  -  n;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  n;  jpt  =  jpt  -  tmp1  *  n  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    jpt    -    tmp1    *    n    -    n;    jpt  =  jpt  -  tmp1  *  n  -  n;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	3	1	add
8	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  n;  jpt  =  jpt  -  tmp1  *  n  -  n);  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  n;  jpt  =  jpt  -  tmp1  *  n  -  n);  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    jpt    -    tmp1    *    n    -    n;    jpt  =  jpt  -  tmp1  *  n  -  n);	  	non-compiled	[CE]  ';'  expected	3	None	add
9	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  n;  jpt  =  jpt  -  tmp1,  *  n  -  n;  [CE]  ';'  expected  [FE]        OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  n;  jpt  =  jpt  -  tmp1,  *  n  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    jpt    -    tmp1    *    n    -    n;    jpt  =  jpt  -  tmp1,  *  n  -  n;	  	non-compiled	[CE]  ';'  expected	3	None	add
10	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  n;  jpt  =  jpt  -  tmp1  *  n  -  n.;  [CE]  <identifier>  expected  [FE]          OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  n;  jpt  =  jpt  -  tmp1  *  n  -  n.;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    jpt    -    tmp1    *    n    -    n;    jpt  =  jpt  -  tmp1  *  n  -  n.;	  	non-compiled	[CE]  <identifier>  expected	3	None	add
11	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  n;  jpt  =  nfm  -  tmp1  *  np  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt    =    nfm    -    tmp1    *    np    -    n;    jpt  =  nfm  -  tmp1  *  np  -  n;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	1	1	add
12	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  n;  jpt  =  nfm  -  tmp1  *  np  -  n;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  n;  jpt  =  nfm  -  tmp1  *  np  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    *    np    -    n;    jpt  =  nfm  -  tmp1  *  np  -  n;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	1	1	add
13	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  n;  jpt  =  nfm  -  tmp1  *  np  -  n);  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  n;  jpt  =  nfm  -  tmp1  *  np  -  n);  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    *    np    -    n;    jpt  =  nfm  -  tmp1  *  np  -  n);	  	non-compiled	[CE]  ';'  expected	1	None	add
14	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  n;  jpt  =  nfm  -  tmp1  *  np  -  nel;  [CE]  cannot  find  symbol  nel  [FE]        OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  n;  jpt  =  nfm  -  tmp1  *  np  -  nel;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    *    np    -    n;    jpt  =  nfm  -  tmp1  *  np  -  nel;	  	non-compiled	[CE]  cannot  find  symbol  nel	1	None	add
15	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  n;  jpt  =  nfm  -  tmp1  *  np  -  ne;  [CE]  cannot  find  symbol  ne  [FE]          OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  n;  jpt  =  nfm  -  tmp1  *  np  -  ne;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    *    np    -    n;    jpt  =  nfm  -  tmp1  *  np  -  ne;	  	non-compiled	[CE]  cannot  find  symbol  ne	1	None	add
16	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  np  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  jpt  -  tmp1  *  np  -  n;	  jpt    =    jpt    -    tmp1    *    n    -    n;    	compilable	  [FE]  OutOfRangeException  	4	1	replace
17	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  np  -  n;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  np  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  jpt  -  tmp1  *  np  -  n;	  jpt    =    jpt    -    tmp1    *    n    -    n;    	compilable	  [FE]  OutOfRangeException  	4	1	replace
18	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  tmp2  -  n;  [CE]  cannot  find  symbol  tmp2  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  tmp2  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  jpt  -  tmp1  *  tmp2  -  n;	  jpt    =    jpt    -    tmp1    *    n    -    n;    	non-compiled	[CE]  cannot  find  symbol  tmp2	4	None	replace
19	[BUG]  [BUGGY]  n  =  Math.max(-TWO  *  tmp1,  np);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  n  =  Math.max(-TWO  *  tmp1,  np);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	n  =  Math.max(-TWO  *  tmp1,  np);	      n    =    Math.max(-TWO    *    tmp1,    lowerBound);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	25	None	replace
20	[BUG]  [BUGGY]  n  =  Math.max(-TWO  *  upperBound,  lowerBound);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  n  =  Math.max(-TWO  *  upperBound,  lowerBound);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	n  =  Math.max(-TWO  *  upperBound,  lowerBound);	      n    =    Math.max(-TWO    *    tmp1,    lowerBound);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	25	None	replace
21	[BUG]  [BUGGY]      final  int  jpt  =(initialTrustRegionRadius  <  <  1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]      final  int  jpt  =(initialTrustRegionRadius  <  <  1)?  1  :  0;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	        final  int  jpt  =(initialTrustRegionRadius  <  <  1)?  1  :  0;	  	non-compiled	[CE]  illegal  start  of  type	6	None	add
22	[BUG]  [BUGGY]      final  int  jpt  =(initialTrustRegionRadius  <  <  1)?  1  :  n;  [CE]  illegal  start  of  type  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]      final  int  jpt  =(initialTrustRegionRadius  <  <  1)?  1  :  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	        final  int  jpt  =(initialTrustRegionRadius  <  <  1)?  1  :  n;	  	non-compiled	[CE]  illegal  start  of  type	6	None	add
23	[BUG]  [BUGGY]      final  int  jpt  =(initialTrustRegionRadius  <  <  2)?  1  :  0;  [CE]  illegal  start  of  type  [FE]        OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]      final  int  jpt  =(initialTrustRegionRadius  <  <  2)?  1  :  0;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	        final  int  jpt  =(initialTrustRegionRadius  <  <  2)?  1  :  0;	  	non-compiled	[CE]  illegal  start  of  type	6	None	add
24	[BUG]  [BUGGY]      final  int  jpt  =(initialTrustRegionRadius  <  <  2)?  1  :  n;  [CE]  illegal  start  of  type  [FE]          OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]      final  int  jpt  =(initialTrustRegionRadius  <  <  2)?  1  :  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	        final  int  jpt  =(initialTrustRegionRadius  <  <  2)?  1  :  n;	  	non-compiled	[CE]  illegal  start  of  type	6	None	add
25	[BUG]  [BUGGY]      final  int  jpt  =(initialTrustRegionRadius  {  0)?  1  :  0;  [CE]  ')'  expected  [FE]            OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]      final  int  jpt  =(initialTrustRegionRadius  {  0)?  1  :  0;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	        final  int  jpt  =(initialTrustRegionRadius  {  0)?  1  :  0;	  	non-compiled	[CE]  ')'  expected	6	None	add
26	[BUG]  [BUGGY]  n  =  Math.max(-TWO  *  tmp1,  n);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  n  =  Math.max(-TWO  *  tmp1,  n);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	n  =  Math.max(-TWO  *  tmp1,  n);	      n    =    Math.max(-TWO    *    tmp1,    upperBound);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	24	None	replace
27	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  /  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  nfm  -  tmp1  *  np  /  n;	  jpt    =    nfm    -    tmp1    *    np    -    n;    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	2	1	replace
28	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  np  /  n;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  /  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  nfm  -  tmp1  *  np  /  n;	  jpt    =    nfm    -    tmp1    *    np    -    n;    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	2	1	replace
29	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  /  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  nfm  -  tmp1  *  np  /  1;	  jpt    =    nfm    -    tmp1    *    np    -    1;    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	14	1	replace
30	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  np  /  1;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  /  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  nfm  -  tmp1  *  np  /  1;	  jpt    =    nfm    -    tmp1    *    np    -    1;    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	14	1	replace
31	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  tmp2  -  1;  [CE]  cannot  find  symbol  tmp2  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  tmp2  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  nfm  -  tmp1  *  tmp2  -  1;	  jpt    =    nfm    -    tmp1    *    np    -    1;    	non-compiled	[CE]  cannot  find  symbol  tmp2	14	None	replace
32	[BUG]  [BUGGY]  final  int  nfm  =  upperDifference.getEntry(tmp1);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  nfm  =  upperDifference.getEntry(tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  nfm  =  upperDifference.getEntry(tmp1);	      final    int    nfm    =    lowerDifference.getEntry(tmp1);    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	21	None	replace
33	[BUG]  [BUGGY]  final  int  nfm  =  topDifference.getEntry(tmp1);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  nfm  =  topDifference.getEntry(tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  nfm  =  topDifference.getEntry(tmp1);	      final    int    nfm    =    lowerDifference.getEntry(tmp1);    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	21	None	replace
34	[BUG]  [BUGGY]  final  int  nfm  =  upperDifference.getEntry(nfxm,  tmp1);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  nfm  =  upperDifference.getEntry(nfxm,  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  nfm  =  upperDifference.getEntry(nfxm,  tmp1);	      final    int    nfm    =    upperDifference.getEntry(nfxm);    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	17	None	replace
35	[BUG]  [BUGGY]  final  int  nfm  =  upperDifference.getEntry(nfxm,  stepb);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  nfm  =  upperDifference.getEntry(nfxm,  stepb);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  nfm  =  upperDifference.getEntry(nfxm,  stepb);	      final    int    nfm    =    upperDifference.getEntry(nfxm);    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	17	None	replace
36	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  double  np1  =(initialTrustRegionRadius  +  tmp1)/  2;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	final  double  np1  =(initialTrustRegionRadius  +  tmp1)/  2;	      final    int    np1    =(initialTrustRegionRadius    +    tmp1)/    2;    	compilable	  [FE]  OutOfRangeException  	12	1	replace
37	[BUG]  [BUGGY]  final  double  np1  =(initialTrustRegionRadius  +  tmp1)/  2;  [FE]  OutOfRangeException  [FE]                BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  double  np1  =(initialTrustRegionRadius  +  tmp1)/  2;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  double  np1  =(initialTrustRegionRadius  +  tmp1)/  2;	      final    int    np1    =(initialTrustRegionRadius    +    tmp1)/    2;    	compilable	  [FE]  OutOfRangeException  	12	1	replace
38	[BUG]  [BUGGY]  final  long  np1  =(initialTrustRegionRadius  +  tmp1)/  2;  [CE]  possible  loss  of  precision  [FE]                  BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  long  np1  =(initialTrustRegionRadius  +  tmp1)/  2;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  long  np1  =(initialTrustRegionRadius  +  tmp1)/  2;	      final    int    np1    =(initialTrustRegionRadius    +    tmp1)/    2;    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
39	[BUG]  [BUGGY]  final  float  np1  =(initialTrustRegionRadius  +  tmp1)/  2;  [CE]  possible  loss  of  precision  [FE]                    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  float  np1  =(initialTrustRegionRadius  +  tmp1)/  2;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  float  np1  =(initialTrustRegionRadius  +  tmp1)/  2;	      final    int    np1    =(initialTrustRegionRadius    +    tmp1)/    2;    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
40	[BUG]  [BUGGY]  final  int  np1  =(tmp1  <  <  1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  np1  =(tmp1  <  <  1)?  1  :  0;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  np1  =(tmp1  <  <  1)?  1  :  0;	      final    int    np1    =(initialTrustRegionRadius    <    <    1)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  final  int  np1  =(initialTrustRegius  <  <  1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  np1  =(initialTrustRegius  <  <  1)?  1  :  0;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  np1  =(initialTrustRegius  <  <  1)?  1  :  0;	      final    int    np1    =(initialTrustRegionRadius    <    <    1)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
42	[BUG]  [BUGGY]  final  int  np1  =(initialTrustRegius  <  <  1)?  1L  :  0;  [CE]  illegal  start  of  type  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  np1  =(initialTrustRegius  <  <  1)?  1L  :  0;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  np1  =(initialTrustRegius  <  <  1)?  1L  :  0;	      final    int    np1    =(initialTrustRegionRadius    <    <    1)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
43	[BUG]  [BUGGY]  n  =  Math.max(-TWO  *  tmp1,  lowerBound  +  tmp1);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]                BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  n  =  Math.max(-TWO  *  tmp1,  lowerBound  +  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	n  =  Math.max(-TWO  *  tmp1,  lowerBound  +  tmp1);	      n    =    Math.max(-TWO    *    tmp1,    upperBound    +    tmp1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	28	None	replace
44	[BUG]  [BUGGY]  n  =  Math.max(-TWO  *  tmp1,  nfm  +  tmp1);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]                  BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  n  =  Math.max(-TWO  *  tmp1,  nfm  +  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	n  =  Math.max(-TWO  *  tmp1,  nfm  +  tmp1);	      n    =    Math.max(-TWO    *    tmp1,    upperBound    +    tmp1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	28	None	replace
45	[BUG]  [BUGGY]  n  =  Math.max(-TWO  *  tmp1,  np  +  tmp1);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]                    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  n  =  Math.max(-TWO  *  tmp1,  np  +  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	n  =  Math.max(-TWO  *  tmp1,  np  +  tmp1);	      n    =    Math.max(-TWO    *    tmp1,    upperBound    +    tmp1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	28	None	replace
46	[BUG]  [BUGGY]  final  int  np1  =(tmp1  <  <  2)?  1  :  0;  [CE]  illegal  start  of  type  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  np1  =(tmp1  <  <  2)?  1  :  0;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  np1  =(tmp1  <  <  2)?  1  :  0;	      final    int    np1    =(initialTrustRegionRadius    <    <    2)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
47	[BUG]  [BUGGY]  final  int  np1  =(initialTrustRegius  <  <  2)?  1  :  0;  [CE]  illegal  start  of  type  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  np1  =(initialTrustRegius  <  <  2)?  1  :  0;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  np1  =(initialTrustRegius  <  <  2)?  1  :  0;	      final    int    np1    =(initialTrustRegionRadius    <    <    2)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
48	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  np  *  tmp1  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  nfm  -  np  *  tmp1  -  n;	  jpt    =    nfm    -    tmp1    *    tmp2    -    n;    	compilable	  [FE]  OutOfRangeException  	5	1	replace
49	[BUG]  [BUGGY]  jpt  =  nfm  -  np  *  tmp1  -  n;  [FE]  OutOfRangeException  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  np  *  tmp1  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  nfm  -  np  *  tmp1  -  n;	  jpt    =    nfm    -    tmp1    *    tmp2    -    n;    	compilable	  [FE]  OutOfRangeException  	5	1	replace
50	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  double  np1  =(initialTrustRegionRadius  +  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	final  double  np1  =(initialTrustRegionRadius  +  tmp1);	      final    int    np1    =(initialTrustRegionRadius    +    tmp1);    	compilable	  [FE]  OutOfRangeException  	11	1	replace
51	[BUG]  [BUGGY]  final  double  np1  =(initialTrustRegionRadius  +  tmp1);  [FE]  OutOfRangeException  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  double  np1  =(initialTrustRegionRadius  +  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  double  np1  =(initialTrustRegionRadius  +  tmp1);	      final    int    np1    =(initialTrustRegionRadius    +    tmp1);    	compilable	  [FE]  OutOfRangeException  	11	1	replace
52	[BUG]  [BUGGY]  final  long  np1  =(initialTrustRegionRadius  +  tmp1);  [CE]  possible  loss  of  precision  [FE]                BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  long  np1  =(initialTrustRegionRadius  +  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  long  np1  =(initialTrustRegionRadius  +  tmp1);	      final    int    np1    =(initialTrustRegionRadius    +    tmp1);    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
53	[BUG]  [BUGGY]  final  float  np1  =(initialTrustRegionRadius  +  tmp1);  [CE]  possible  loss  of  precision  [FE]                  BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  float  np1  =(initialTrustRegionRadius  +  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  float  np1  =(initialTrustRegionRadius  +  tmp1);	      final    int    np1    =(initialTrustRegionRadius    +    tmp1);    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
54	[BUG]  [BUGGY]  final  int  nfm  =  lowerDifference.getEntry(nfm,  tmp1);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  nfm  =  lowerDifference.getEntry(nfm,  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  nfm  =  lowerDifference.getEntry(nfm,  tmp1);	      final    int    nfm    =    lowerDifference.getEntry(nfm);    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	20	None	replace
55	[BUG]  [BUGGY]  final  int  nfm  =  lowerDifference.getEntry(nfxm,  tmp1);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  nfm  =  lowerDifference.getEntry(nfxm,  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  nfm  =  lowerDifference.getEntry(nfxm,  tmp1);	      final    int    nfm    =    lowerDifference.getEntry(nfm);    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	20	None	replace
56	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  1;  jpt  =  nfm  -  tmp1  *  np  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt    =    nfm    -    tmp1    *    np    -    1;    jpt  =  nfm  -  tmp1  *  np  -  1;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	13	1	add
57	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  1;  jpt  =  nfm  -  tmp1  *  np  -  1;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  1;  jpt  =  nfm  -  tmp1  *  np  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    *    np    -    1;    jpt  =  nfm  -  tmp1  *  np  -  1;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	13	1	add
58	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  1;  jpt  =  nfm  -  tmp1,  *  np  -  1;  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  1;  jpt  =  nfm  -  tmp1,  *  np  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    *    np    -    1;    jpt  =  nfm  -  tmp1,  *  np  -  1;	  	non-compiled	[CE]  ';'  expected	13	None	add
59	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  1;  jpt  =  nfm  -  tmp1  *  np  -  1);  [CE]  ';'  expected  [FE]        OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  1;  jpt  =  nfm  -  tmp1  *  np  -  1);  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    *    np    -    1;    jpt  =  nfm  -  tmp1  *  np  -  1);	  	non-compiled	[CE]  ';'  expected	13	None	add
60	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  1;  Jpt  =  nfm  -  tmp1  *  np  -  1;  [CE]  cannot  find  symbol  Jpt  [FE]          OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  1;  Jpt  =  nfm  -  tmp1  *  np  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    *    np    -    1;    Jpt  =  nfm  -  tmp1  *  np  -  1;	  	non-compiled	[CE]  cannot  find  symbol  Jpt	13	None	add
61	[BUG]  [BUGGY]  nfm  =  Math.max(-TWO  *  tmp1,  n);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  nfm  =  Math.max(-TWO  *  tmp1,  n);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	nfm  =  Math.max(-TWO  *  tmp1,  n);	      nfm    =    Math.max(-TWO    *    tmp1,    upperBound);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	26	None	replace
62	[BUG]  [BUGGY]  nfm  =  Math.max(-TWO  *  tmp1,  np);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  nfm  =  Math.max(-TWO  *  tmp1,  np);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	nfm  =  Math.max(-TWO  *  tmp1,  np);	      nfm    =    Math.max(-TWO    *    tmp1,    upperBound);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	26	None	replace
63	[BUG]  [BUGGY]  tmp1  =  Math.max(-TWO  *  tmp1,  upperBound);  [CE]  cannot  assign  a  value  to  final  variable  tmp1  [FE]                BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  tmp1  =  Math.max(-TWO  *  tmp1,  upperBound);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	tmp1  =  Math.max(-TWO  *  tmp1,  upperBound);	      nfm    =    Math.max(-TWO    *    tmp1,    upperBound);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  tmp1	26	None	replace
64	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  1;  jpt  =  jpt  -  tmp1  *  n  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt    =    jpt    -    tmp1    *    n    -    1;    jpt  =  jpt  -  tmp1  *  n  -  1;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	22	1	add
65	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  1;  jpt  =  jpt  -  tmp1  *  n  -  1;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  1;  jpt  =  jpt  -  tmp1  *  n  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    jpt    -    tmp1    *    n    -    1;    jpt  =  jpt  -  tmp1  *  n  -  1;	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	22	1	add
66	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  1;  jpt  =  jpt  -  tmp1,  *  n  -  1;  [CE]  ';'  expected  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  1;  jpt  =  jpt  -  tmp1,  *  n  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    jpt    -    tmp1    *    n    -    1;    jpt  =  jpt  -  tmp1,  *  n  -  1;	  	non-compiled	[CE]  ';'  expected	22	None	add
67	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  1;  Jpt  =  jpt  -  tmp1  *  n  -  1;  [CE]  cannot  find  symbol  Jpt  [FE]        OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  1;  Jpt  =  jpt  -  tmp1  *  n  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    jpt    -    tmp1    *    n    -    1;    Jpt  =  jpt  -  tmp1  *  n  -  1;	  	non-compiled	[CE]  cannot  find  symbol  Jpt	22	None	add
68	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  1;  jpt  =  jpt  -  tmp1.  *  n  -  1;  [CE]  <identifier>  expected  [FE]          OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  1;  jpt  =  jpt  -  tmp1.  *  n  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    jpt    -    tmp1    *    n    -    1;    jpt  =  jpt  -  tmp1.  *  n  -  1;	  	non-compiled	[CE]  <identifier>  expected	22	None	add
69	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  double  np1  =(initialTrustRegionRadius  +  tmp1)/  n;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	final  double  np1  =(initialTrustRegionRadius  +  tmp1)/  n;	      final    int    np1    =(initialTrustRegionRadius    +    tmp1)/    n;    	compilable	  [FE]  OutOfRangeException  	8	1	replace
70	[BUG]  [BUGGY]  final  double  np1  =(initialTrustRegionRadius  +  tmp1)/  n;  [FE]  OutOfRangeException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  double  np1  =(initialTrustRegionRadius  +  tmp1)/  n;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  double  np1  =(initialTrustRegionRadius  +  tmp1)/  n;	      final    int    np1    =(initialTrustRegionRadius    +    tmp1)/    n;    	compilable	  [FE]  OutOfRangeException  	8	1	replace
71	[BUG]  [BUGGY]  final  long  np1  =(initialTrustRegionRadius  +  tmp1)/  n;  [CE]  possible  loss  of  precision  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  long  np1  =(initialTrustRegionRadius  +  tmp1)/  n;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  long  np1  =(initialTrustRegionRadius  +  tmp1)/  n;	      final    int    np1    =(initialTrustRegionRadius    +    tmp1)/    n;    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
72	[BUG]  [BUGGY]  final  float  np1  =(initialTrustRegionRadius  +  tmp1)/  n;  [CE]  possible  loss  of  precision  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  float  np1  =(initialTrustRegionRadius  +  tmp1)/  n;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  float  np1  =(initialTrustRegionRadius  +  tmp1)/  n;	      final    int    np1    =(initialTrustRegionRadius    +    tmp1)/    n;    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
73	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  np  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  jpt  -  tmp1  *  np  -  1;	  jpt    =    jpt    -    tmp1    *    n    -    1;    	compilable	  [FE]  OutOfRangeException  	23	1	replace
74	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  np  -  1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  np  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  jpt  -  tmp1  *  np  -  1;	  jpt    =    jpt    -    tmp1    *    n    -    1;    	compilable	  [FE]  OutOfRangeException  	23	1	replace
75	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  n  -  tmp1  *  jpt  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  n  -  tmp1  *  jpt  -  1;	  jpt    =    jpt    -    tmp1    *    n    -    1;    	compilable	  [FE]  OutOfRangeException  	23	1	replace
76	[BUG]  [BUGGY]  jpt  =  n  -  tmp1  *  jpt  -  1;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  n  -  tmp1  *  jpt  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  n  -  tmp1  *  jpt  -  1;	  jpt    =    jpt    -    tmp1    *    n    -    1;    	compilable	  [FE]  OutOfRangeException  	23	1	replace
77	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  /  np  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  nfm  -  tmp1  /  np  -  n;	  jpt    =    nfm    -    tmp1    /    n    -    n;    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	16	1	replace
78	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  /  np  -  n;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  /  np  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  nfm  -  tmp1  /  np  -  n;	  jpt    =    nfm    -    tmp1    /    n    -    n;    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	16	1	replace
79	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  /  2  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  nfm  -  tmp1  /  2  -  n;	  jpt    =    nfm    -    tmp1    /    n    -    n;    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	16	1	replace
80	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  /  2  -  n;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  /  2  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  nfm  -  tmp1  /  2  -  n;	  jpt    =    nfm    -    tmp1    /    n    -    n;    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	16	1	replace
81	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  tmp1  -  nfm  /  n  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  tmp1  -  nfm  /  n  -  n;	  jpt    =    nfm    -    tmp1    /    n    -    n;    	compilable	  [FE]  OutOfRangeException  	16	1	replace
82	[BUG]  [BUGGY]  jpt  =  tmp1  -  nfm  /  n  -  n;  [FE]  OutOfRangeException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  tmp1  -  nfm  /  n  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  tmp1  -  nfm  /  n  -  n;	  jpt    =    nfm    -    tmp1    /    n    -    n;    	compilable	  [FE]  OutOfRangeException  	16	1	replace
83	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  n;  jpt  =  nfm  -  tmp1  *  np  -  nl;  [CE]  cannot  find  symbol  nl  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  n;  jpt  =  nfm  -  tmp1  *  np  -  nl;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    *    np    -    n;    jpt  =  nfm  -  tmp1  *  np  -  nl;	  	non-compiled	[CE]  cannot  find  symbol  nl	1	None	add
84	[BUG]  [BUGGY]  final  int  jpt  =  Math.max(-TWO  *  upperBound);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  jpt  =  Math.max(-TWO  *  upperBound);  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  jpt  =  Math.max(-TWO  *  upperBound);	      	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	7	None	replace
85	[BUG]  [BUGGY]  jpt  =  Math.max(-TWO  *  upperBound);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  Math.max(-TWO  *  upperBound);  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  Math.max(-TWO  *  upperBound);	      	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	7	None	replace
86	[BUG]  [BUGGY]  final  int  jpt1  =  Math.min(ipt1,  np);  [CE]  cannot  find  symbol  ipt1  [FE]        OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  jpt1  =  Math.min(ipt1,  np);  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  jpt1  =  Math.min(ipt1,  np);	      	non-compiled	[CE]  cannot  find  symbol  ipt1	7	None	replace
87	[BUG]  [BUGGY]  final  int  jpt  =  Math.min(ipt,  n);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]          OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  jpt  =  Math.min(ipt,  n);  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  jpt  =  Math.min(ipt,  n);	      	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	7	None	replace
88	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  1;  int  jpt  =  nfm  -  tmp1  *  np  -  1;  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  1;  int  jpt  =  nfm  -  tmp1  *  np  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    *    np    -    1;    int  jpt  =  nfm  -  tmp1  *  np  -  1;	  	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	13	None	add
89	[BUG]  [BUGGY]  final  int  np1  =(tmp1  +  initialTrustRegionRadius);  [CE]  possible  loss  of  precision  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  np1  =(tmp1  +  initialTrustRegionRadius);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  np1  =(tmp1  +  initialTrustRegionRadius);	      final    int    np1    =(initialTrustRegionRadius    +    tmp1);    	non-compiled	[CE]  possible  loss  of  precision	11	None	replace
90	[BUG]  [BUGGY]  nfm  =  Math.max(-TWO  *  upperBound,  lowerBound);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  nfm  =  Math.max(-TWO  *  upperBound,  lowerBound);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	nfm  =  Math.max(-TWO  *  upperBound,  lowerBound);	      nfm    =    Math.max(-TWO    *    tmp1,    lowerBound);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	27	None	replace
91	[BUG]  [BUGGY]  nfm  =  Math.max(-TWO  *  lowerBound,  tmp1);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]                BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  nfm  =  Math.max(-TWO  *  lowerBound,  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	nfm  =  Math.max(-TWO  *  lowerBound,  tmp1);	      nfm    =    Math.max(-TWO    *    tmp1,    lowerBound);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	27	None	replace
92	[BUG]  [BUGGY]  final  int  np1  =(tmp1  +  initialTrustRegionRadius)/  2;  [CE]  possible  loss  of  precision  [FE]                BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  np1  =(tmp1  +  initialTrustRegionRadius)/  2;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  np1  =(tmp1  +  initialTrustRegionRadius)/  2;	      final    int    np1    =(initialTrustRegionRadius    +    tmp1)/    2;    	non-compiled	[CE]  possible  loss  of  precision	12	None	replace
93	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]                  BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  double  np1  =(tmp1  +  initialTrustRegionRadius)/  2;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	final  double  np1  =(tmp1  +  initialTrustRegionRadius)/  2;	      final    int    np1    =(initialTrustRegionRadius    +    tmp1)/    2;    	compilable	  [FE]  OutOfRangeException  	12	1	replace
94	[BUG]  [BUGGY]  final  double  np1  =(tmp1  +  initialTrustRegionRadius)/  2;  [FE]  OutOfRangeException  [FE]                  BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  double  np1  =(tmp1  +  initialTrustRegionRadius)/  2;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  double  np1  =(tmp1  +  initialTrustRegionRadius)/  2;	      final    int    np1    =(initialTrustRegionRadius    +    tmp1)/    2;    	compilable	  [FE]  OutOfRangeException  	12	1	replace
95	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  /  np  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  nfm  -  tmp1  /  np  -  1;	  jpt    =    nfm    -    tmp1    *    np    -    1;    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	14	1	replace
96	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  /  np  -  1;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  /  np  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  nfm  -  tmp1  /  np  -  1;	  jpt    =    nfm    -    tmp1    *    np    -    1;    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	14	1	replace
97	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp0  *  np  -  n;  [CE]  cannot  find  symbol  tmp0  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp0  *  np  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  nfm  -  tmp0  *  np  -  n;	  jpt    =    nfm    -    tmp1    *    np    -    n;    	non-compiled	[CE]  cannot  find  symbol  tmp0	2	None	replace
98	[BUG]  [BUGGY]  final  int  nfm  =  upperDifference.getEntry(nfm,  tmp1);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  nfm  =  upperDifference.getEntry(nfm,  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  nfm  =  upperDifference.getEntry(nfm,  tmp1);	      final    int    nfm    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	19	None	replace
99	[BUG]  [BUGGY]  final  int  nfm  =  upperDifference.getEntry(nfm)+  1;  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  nfm  =  upperDifference.getEntry(nfm)+  1;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  nfm  =  upperDifference.getEntry(nfm)+  1;	      final    int    nfm    =    upperDifference.getEntry(nfm);    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	19	None	replace
100	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  /  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  jpt  -  tmp1  *  n  /  n;	  jpt    =    jpt    -    tmp1    *    n    -    n;    	compilable	  [FE]  OutOfRangeException  	4	1	replace
101	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  n  /  n;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  /  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  jpt  -  tmp1  *  n  /  n;	  jpt    =    jpt    -    tmp1    *    n    -    n;    	compilable	  [FE]  OutOfRangeException  	4	1	replace
102	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  n  *  tmp1  -  tmp1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  jpt  -  n  *  tmp1  -  tmp1;	  jpt    =    jpt    -    tmp1    *    n    -    n;    	compilable	  [FE]  OutOfRangeException  	4	1	replace
103	[BUG]  [BUGGY]  jpt  =  jpt  -  n  *  tmp1  -  tmp1;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  n  *  tmp1  -  tmp1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  jpt  -  n  *  tmp1  -  tmp1;	  jpt    =    jpt    -    tmp1    *    n    -    n;    	compilable	  [FE]  OutOfRangeException  	4	1	replace
104	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  n  -  tmp1  *  jpt  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  n  -  tmp1  *  jpt  -  n;	  jpt    =    jpt    -    tmp1    *    n    -    n;    	compilable	  [FE]  OutOfRangeException  	4	1	replace
105	[BUG]  [BUGGY]  jpt  =  n  -  tmp1  *  jpt  -  n;  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  n  -  tmp1  *  jpt  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  n  -  tmp1  *  jpt  -  n;	  jpt    =    jpt    -    tmp1    *    n    -    n;    	compilable	  [FE]  OutOfRangeException  	4	1	replace
106	[BUG]  [BUGGY]  n  =  Math.max(-TWO  *  lowerBound,  tmp1);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  n  =  Math.max(-TWO  *  lowerBound,  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	n  =  Math.max(-TWO  *  lowerBound,  tmp1);	      n    =    Math.max(-TWO    *    tmp1,    lowerBound);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	25	None	replace
107	[BUG]  [BUGGY]  n  =  Math.max(-TWO  *  upperBound,  tmp1);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  n  =  Math.max(-TWO  *  upperBound,  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	n  =  Math.max(-TWO  *  upperBound,  tmp1);	      n    =    Math.max(-TWO    *    tmp1,    lowerBound);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	25	None	replace
108	[BUG]  [BUGGY]  nfm  =  Math.max(-TWO  *  lowerBound,  upperBound);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  nfm  =  Math.max(-TWO  *  lowerBound,  upperBound);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	nfm  =  Math.max(-TWO  *  lowerBound,  upperBound);	      nfm    =    Math.max(-TWO    *    tmp1,    upperBound);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	26	None	replace
109	[BUG]  [BUGGY]  nfm  =  Math.max(-TWO  *  upperBound,  tmp1);  [CE]  cannot  assign  a  value  to  final  variable  nfm  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  nfm  =  Math.max(-TWO  *  upperBound,  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	nfm  =  Math.max(-TWO  *  upperBound,  tmp1);	      nfm    =    Math.max(-TWO    *    tmp1,    upperBound);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  nfm	26	None	replace
110	[BUG]  [BUGGY]  n  =  Math.max(-TWO  *  lowerBound,  upperBound  +  tmp1);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]                BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  n  =  Math.max(-TWO  *  lowerBound,  upperBound  +  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	n  =  Math.max(-TWO  *  lowerBound,  upperBound  +  tmp1);	      n    =    Math.max(-TWO    *    tmp1,    upperBound    +    tmp1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	28	None	replace
111	[BUG]  [BUGGY]  n  =  Math.max(-TWO  *  upperBound,  tmp1  +  tmp1);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]                  BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  n  =  Math.max(-TWO  *  upperBound,  tmp1  +  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	n  =  Math.max(-TWO  *  upperBound,  tmp1  +  tmp1);	      n    =    Math.max(-TWO    *    tmp1,    upperBound    +    tmp1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	28	None	replace
112	[BUG]  [BUGGY]  n  =  Math.max(-TWO  *  lowerBound,  tmp1  +  tmp1);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]                    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  n  =  Math.max(-TWO  *  lowerBound,  tmp1  +  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	n  =  Math.max(-TWO  *  lowerBound,  tmp1  +  tmp1);	      n    =    Math.max(-TWO    *    tmp1,    upperBound    +    tmp1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	28	None	replace
113	[BUG]  [BUGGY]      final  int  jpt  =  Math.min(ipt,  nfm);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]      final  int  jpt  =  Math.min(ipt,  nfm);  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	        final  int  jpt  =  Math.min(ipt,  nfm);	  	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	6	None	add
114	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  n;  Jpt  =  jpt  -  tmp1  *  n  -  n;  [CE]  cannot  find  symbol  Jpt  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  n;  Jpt  =  jpt  -  tmp1  *  n  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    jpt    -    tmp1    *    n    -    n;    Jpt  =  jpt  -  tmp1  *  n  -  n;	  	non-compiled	[CE]  cannot  find  symbol  Jpt	3	None	add
115	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  dsqCrvmin  -  n;  [CE]  cannot  find  symbol  dsqCrvmin  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  dsqCrvmin  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  nfm  -  tmp1  *  dsqCrvmin  -  n;	  jpt    =    nfm    -    tmp1    *    tmp2    -    n;    	non-compiled	[CE]  cannot  find  symbol  dsqCrvmin	5	None	replace
116	[BUG]  [BUGGY]  final  int  nfm  =  lowerDifference.getEntry(nfm)+  1;  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  nfm  =  lowerDifference.getEntry(nfm)+  1;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  nfm  =  lowerDifference.getEntry(nfm)+  1;	      final    int    nfm    =    lowerDifference.getEntry(nfm);    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	20	None	replace
117	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  /  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  jpt  -  tmp1  *  n  /  1;	  jpt    =    jpt    -    tmp1    *    n    -    1;    	compilable	  [FE]  OutOfRangeException  	23	1	replace
118	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  n  /  1;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  /  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  jpt  -  tmp1  *  n  /  1;	  jpt    =    jpt    -    tmp1    *    n    -    1;    	compilable	  [FE]  OutOfRangeException  	23	1	replace
119	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  +  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  jpt  -  tmp1  *  n  +  1;	  jpt    =    jpt    -    tmp1    *    n    -    1;    	compilable	  [FE]  OutOfRangeException  	23	1	replace
120	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  n  +  1;  [FE]  OutOfRangeException  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  +  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  jpt  -  tmp1  *  n  +  1;	  jpt    =    jpt    -    tmp1    *    n    -    1;    	compilable	  [FE]  OutOfRangeException  	23	1	replace
121	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  /  n  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  jpt  -  tmp1  /  n  -  1;	  jpt    =    jpt    -    tmp1    *    n    -    1;    	compilable	  [FE]  OutOfRangeException  	23	1	replace
122	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  /  n  -  1;  [FE]  OutOfRangeException  [FE]        OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  /  n  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  jpt  -  tmp1  /  n  -  1;	  jpt    =    jpt    -    tmp1    *    n    -    1;    	compilable	  [FE]  OutOfRangeException  	23	1	replace
123	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  1;  int  jpt  =  jpt  -  tmp1  *  n  -  1;  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  1;  int  jpt  =  jpt  -  tmp1  *  n  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    jpt    -    tmp1    *    n    -    1;    int  jpt  =  jpt  -  tmp1  *  n  -  1;	  	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	22	None	add
124	[BUG]  [BUGGY]  final  int  np1  =(tmp1  +  initialTrustRegionRadius)/  n;  [CE]  possible  loss  of  precision  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  np1  =(tmp1  +  initialTrustRegionRadius)/  n;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  np1  =(tmp1  +  initialTrustRegionRadius)/  n;	      final    int    np1    =(initialTrustRegionRadius    +    tmp1)/    n;    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
125	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  /  n  -  n;  final  int  jpt  =  nfm  -  tmp1  /  n  -  n;  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  /  n  -  n;  final  int  jpt  =  nfm  -  tmp1  /  n  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    /    n    -    n;    final  int  jpt  =  nfm  -  tmp1  /  n  -  n;	  	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	15	None	add
126	[BUG]  [BUGGY]  n  =  Math.max(-TWO  *  lowerBound,  upperBound);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  n  =  Math.max(-TWO  *  lowerBound,  upperBound);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	n  =  Math.max(-TWO  *  lowerBound,  upperBound);	      n    =    Math.max(-TWO    *    tmp1,    upperBound);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	24	None	replace
127	[BUG]  [BUGGY]  final  int  np1  =(tmp1  <  <  2)?  2  :  0;  [CE]  illegal  start  of  type  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  np1  =(tmp1  <  <  2)?  2  :  0;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  np1  =(tmp1  <  <  2)?  2  :  0;	      final    int    np1    =(initialTrustRegionRadius    <    <    2)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
128	[BUG]  [BUGGY]  n  =  Math.max(-TWO  *  tmp1,  jpt  +  tmp1);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]                BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  n  =  Math.max(-TWO  *  tmp1,  jpt  +  tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	n  =  Math.max(-TWO  *  tmp1,  jpt  +  tmp1);	      n    =    Math.max(-TWO    *    tmp1,    upperBound    +    tmp1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	28	None	replace
129	[BUG]  [BUGGY]  tmp1  =  Math.max(-TWO  *  tmp1,  lowerBound);  [CE]  cannot  assign  a  value  to  final  variable  tmp1  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  tmp1  =  Math.max(-TWO  *  tmp1,  lowerBound);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	tmp1  =  Math.max(-TWO  *  tmp1,  lowerBound);	      nfm    =    Math.max(-TWO    *    tmp1,    lowerBound);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  tmp1	27	None	replace
130	[BUG]  [BUGGY]  final  int  tmp1  =  lowerDifference.getEntry(tmp1);  [CE]  variable  tmp1  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  tmp1  =  lowerDifference.getEntry(tmp1);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  tmp1  =  lowerDifference.getEntry(tmp1);	      final    int    nfm    =    lowerDifference.getEntry(tmp1);    	non-compiled	[CE]  variable  tmp1  is  already  defined  in  method  prelim(double[],double[])	21	None	replace
131	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  n;  jpt  =  nfm  -  tmp2  *  np  -  n;  [CE]  cannot  find  symbol  tmp2  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  n;  jpt  =  nfm  -  tmp2  *  np  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    *    np    -    n;    jpt  =  nfm  -  tmp2  *  np  -  n;	  	non-compiled	[CE]  cannot  find  symbol  tmp2	1	None	add
132	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  n;  jpt  =  nfm  -  tmp1.  *  np  -  n;  [CE]  <identifier>  expected  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  n;  jpt  =  nfm  -  tmp1.  *  np  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    *    np    -    n;    jpt  =  nfm  -  tmp1.  *  np  -  n;	  	non-compiled	[CE]  <identifier>  expected	1	None	add
133	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  1;  jpt  =  nfm  -  tmp1.  *  np  -  1;  [CE]  <identifier>  expected  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  1;  jpt  =  nfm  -  tmp1.  *  np  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    *    np    -    1;    jpt  =  nfm  -  tmp1.  *  np  -  1;	  	non-compiled	[CE]  <identifier>  expected	13	None	add
134	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  1;  jpt  =  nfm  -  tmp2  *  np  -  1;  [CE]  cannot  find  symbol  tmp2  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  np  -  1;  jpt  =  nfm  -  tmp2  *  np  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    *    np    -    1;    jpt  =  nfm  -  tmp2  *  np  -  1;	  	non-compiled	[CE]  cannot  find  symbol  tmp2	13	None	add
135	[BUG]  [BUGGY]  n  =  Math.max(-TWO  *  tmp1,  nfm);  [CE]  cannot  assign  a  value  to  final  variable  n  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  n  =  Math.max(-TWO  *  tmp1,  nfm);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	n  =  Math.max(-TWO  *  tmp1,  nfm);	      n    =    Math.max(-TWO    *    tmp1,    lowerBound);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  n	25	None	replace
136	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  /  n  -  n;  jpt  =  nfm.-  tmp1  /  n  -  n;  [CE]  <identifier>  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  /  n  -  n;  jpt  =  nfm.-  tmp1  /  n  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    nfm    -    tmp1    /    n    -    n;    jpt  =  nfm.-  tmp1  /  n  -  n;	  	non-compiled	[CE]  <identifier>  expected	15	None	add
137	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  /  n  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  jpt  -  tmp1  /  n  -  n;	  jpt    =    jpt    -    tmp1    *    n    -    n;    	compilable	  [FE]  OutOfRangeException  	4	1	replace
138	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  /  n  -  n;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  /  n  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  jpt  -  tmp1  /  n  -  n;	  jpt    =    jpt    -    tmp1    *    n    -    n;    	compilable	  [FE]  OutOfRangeException  	4	1	replace
139	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  1;  jpt  =  jpt  -  tmp2  *  n  -  1;  [CE]  cannot  find  symbol  tmp2  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  1;  jpt  =  jpt  -  tmp2  *  n  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    jpt    -    tmp1    *    n    -    1;    jpt  =  jpt  -  tmp2  *  n  -  1;	  	non-compiled	[CE]  cannot  find  symbol  tmp2	22	None	add
140	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  tmp1  -  nfm  /  n  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  tmp1  -  nfm  /  n  -  1;	  jpt    =    nfm    -    tmp1    /    n    -    n;    	compilable	  [FE]  OutOfRangeException  	16	1	replace
141	[BUG]  [BUGGY]  jpt  =  tmp1  -  nfm  /  n  -  1;  [FE]  OutOfRangeException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  tmp1  -  nfm  /  n  -  1;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  tmp1  -  nfm  /  n  -  1;	  jpt    =    nfm    -    tmp1    /    n    -    n;    	compilable	  [FE]  OutOfRangeException  	16	1	replace
142	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  tmp1  -  nfm  /  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  tmp1  -  nfm  /  n;	  jpt    =    nfm    -    tmp1    /    n    -    n;    	compilable	  [FE]  OutOfRangeException  	16	1	replace
143	[BUG]  [BUGGY]  jpt  =  tmp1  -  nfm  /  n;  [FE]  OutOfRangeException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  tmp1  -  nfm  /  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  tmp1  -  nfm  /  n;	  jpt    =    nfm    -    tmp1    /    n    -    n;    	compilable	  [FE]  OutOfRangeException  	16	1	replace
144	[BUG]  [BUGGY]  final  int  nfm  =  lowerDifference.getEntry(nfxm,  stepb);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  nfm  =  lowerDifference.getEntry(nfxm,  stepb);  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  nfm  =  lowerDifference.getEntry(nfxm,  stepb);	      final    int    nfm    =    lowerDifference.getEntry(nfxm);    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	18	None	replace
145	[BUG]  [BUGGY]  jpt  =  Math.max(-TWO  *  tmp1,  upperBound);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  Math.max(-TWO  *  tmp1,  upperBound);  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  Math.max(-TWO  *  tmp1,  upperBound);	      	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	7	None	replace
146	[BUG]  [BUGGY]  jpt  =  Math.max(-TWO  *  tmp1,  lowerBound);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]      OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  Math.max(-TWO  *  tmp1,  lowerBound);  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  Math.max(-TWO  *  tmp1,  lowerBound);	      	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	7	None	replace
147	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  tmp1  -  nfm  *  np  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  tmp1  -  nfm  *  np  -  n;	  jpt    =    nfm    -    tmp1    *    np    -    n;    	compilable	  [FE]  OutOfRangeException  	2	1	replace
148	[BUG]  [BUGGY]  jpt  =  tmp1  -  nfm  *  np  -  n;  [FE]  OutOfRangeException  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  tmp1  -  nfm  *  np  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  tmp1  -  nfm  *  np  -  n;	  jpt    =    nfm    -    tmp1    *    np    -    n;    	compilable	  [FE]  OutOfRangeException  	2	1	replace
149	[BUG]  [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  n;  jpt  =  jpt  -  tmp2  *  n  -  n;  [CE]  cannot  find  symbol  tmp2  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  jpt  -  tmp1  *  n  -  n;  jpt  =  jpt  -  tmp2  *  n  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt    =    jpt    -    tmp1    *    n    -    n;    jpt  =  jpt  -  tmp2  *  n  -  n;	  	non-compiled	[CE]  cannot  find  symbol  tmp2	3	None	add
150	[BUG]  [BUGGY]  jpt  =  nfm  -  stepb  *  tmp1  -  n;  [CE]  possible  loss  of  precision  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  stepb  *  tmp1  -  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  nfm  -  stepb  *  tmp1  -  n;	  jpt    =    nfm    -    tmp1    *    tmp2    -    n;    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
151	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  tmp1  /  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	jpt  =  nfm  -  tmp1  *  tmp1  /  n;	  jpt    =    nfm    -    tmp1    *    tmp2    -    n;    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	5	1	replace
152	[BUG]  [BUGGY]  jpt  =  nfm  -  tmp1  *  tmp1  /  n;  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]              BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  jpt  =  nfm  -  tmp1  *  tmp1  /  n;  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	jpt  =  nfm  -  tmp1  *  tmp1  /  n;	  jpt    =    nfm    -    tmp1    *    tmp2    -    n;    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	5	1	replace
153	[BUG]  [BUGGY]      final  int  jpt  =  Math.min(1,  tmp1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]    OutOfRangeException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]      final  int  jpt  =  Math.min(1,  tmp1);  [BUGGY]    ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	        final  int  jpt  =  Math.min(1,  tmp1);	  	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	6	None	add
154	[BUG]  [BUGGY]  final  int  np1  =(initialTrustRegionRadius  <  <  1)?  2  :  0;  [CE]  illegal  start  of  type  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  np1  =(initialTrustRegionRadius  <  <  1)?  2  :  0;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  np1  =(initialTrustRegionRadius  <  <  1)?  2  :  0;	      final    int    np1    =(initialTrustRegionRadius    <    <    1)?    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
155	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  np1  =(initialTrustRegionRadius  >=  1)?  1  :  0;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	add	final  int  np1  =(initialTrustRegionRadius  >=  1)?  1  :  0;	      final    int    np1    =(initialTrustRegionRadius    <    <    1)?    1    :    0;    	compilable	  [FE]  OutOfRangeException  	9	1	replace
156	[BUG]  [BUGGY]  final  int  np1  =(initialTrustRegionRadius  >=  1)?  1  :  0;  [FE]  OutOfRangeException  [FE]            BOBYQAOptimizer$PathIsExploredException    [CONTEXT]    throw  new  PathIsExploredException();  //  XXX  }  if  (upperDifference.getEntry(nfxm)  ==  ZERO)  {  stepb  =  Math.max(-TWO  *  initialTrustRegionRadius,  lowerDifference.getEntry(nfxm));  throw  new  PathIsExploredException();  //  XXX  }  interpolationPoints.setEntry(nfm,  nfxm,  stepb);  }  }  else  {  final  int  tmp1  =  (nfm  -  np)  /  n;    [BUGGY]  final  int  np1  =(initialTrustRegionRadius  >=  1)?  1  :  0;  [BUGGY]    jpt  =  nfm  -  tmp1  *  n  -  n;  ipt  =  jpt  +  tmp1;  if  (ipt  >  n)  {  final  int  tmp2  =  jpt;  jpt  =  ipt  -  n;  ipt  =  tmp2;  throw  new  PathIsExploredException();  //  XXX  }  final  int  iptMinus1  =  ipt;  final  int  jptMinus1  =  jpt;  interpolationPoints.setEntry(nfm,  iptMinus1,  interpolationPoints.getEntry(ipt,  iptMinus1));  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1654	1654	1	replace	final  int  np1  =(initialTrustRegionRadius  >=  1)?  1  :  0;	      final    int    np1    =(initialTrustRegionRadius    <    <    1)?    1    :    0;    	compilable	  [FE]  OutOfRangeException  	9	1	replace
