bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	55	None	replace
2	[BUG]  [BUGGY]  [FE]  OutOfRangeException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  nfm  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(ih,  nfm  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	compilable	  [FE]  OutOfRangeException  	55	1	replace
3	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  nfm  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [FE]  OutOfRangeException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  nfm  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(ih,  nfm  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	compilable	  [FE]  OutOfRangeException  	55	1	replace
4	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	55	1	replace
5	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	55	1	replace
6	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	55	None	replace
7	[BUG]  [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    fbeg    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	7	None	replace
8	[BUG]  [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (jpt  -  f  -  ')'  expected  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (jpt  -  f  -  ')'  expected  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	modelSecondDerivativesValues.setEntry(ih,  (jpt  -  f  -  ')'  expected	  modelSecondDerivativesValues.setEntry(ih,    (fbeg    -    f    	non-compiled	[CE]  ')'  expected	46	None	replace
9	[BUG]  [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  jpt,  (fbeg  -  f  [CE]  ')'  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  jpt,  (fbeg  -  f  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	modelSecondDerivativesValues.setEntry(ih,  jpt,  (fbeg  -  f	  modelSecondDerivativesValues.setEntry(ih,    (fbeg    -    f    	non-compiled	[CE]  ')'  expected	46	None	replace
10	[BUG]  [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  jpt  }  ')'  expected  [CE]  ')'  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  jpt  }  ')'  expected  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  jpt  }  ')'  expected	  modelSecondDerivativesValues.setEntry(ih,    (fbeg    -    f    	non-compiled	[CE]  ')'  expected	46	None	replace
11	[BUG]  [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  jpt  -  ')'  expected  [CE]  ')'  expected  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  jpt  -  ')'  expected  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  jpt  -  ')'  expected	  modelSecondDerivativesValues.setEntry(ih,    (fbeg    -    f    	non-compiled	[CE]  ')'  expected	46	None	replace
12	[BUG]  [BUGGY]  final  double  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1);	  final    double    jpt    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	109	None	replace
13	[BUG]  [BUGGY]  final  double  jpt  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  jpt  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  jpt  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1);	  final    double    jpt    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	109	None	replace
14	[BUG]  [BUGGY]  final  double  jpt  =  fAtInterpolationPoints.getEntry(ih,  nfm  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  jpt  =  fAtInterpolationPoints.getEntry(ih,  nfm  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  jpt  =  fAtInterpolationPoints.getEntry(ih,  nfm  -  1);	  final    double    jpt    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	109	None	replace
15	[BUG]  [BUGGY]  final  double  nfm  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  nfm  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  nfm  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    nfm    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	91	None	replace
16	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    nfm    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	91	None	replace
17	[BUG]  [BUGGY]  final  double  nfm  =  interpolationPoints.getEntry(ih,  jpt  -  1);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  nfm  =  interpolationPoints.getEntry(ih,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  nfm  =  interpolationPoints.getEntry(ih,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    nfm    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	91	None	replace
18	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih,  jpt);  [CE]  no  suitable  method  found  for  getEntry(int,int,int)  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih,  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih,  jpt);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(nfm,    ih);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,int)	90	None	replace
19	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  nfm,  ih);  [CE]  no  suitable  method  found  for  getEntry(int,int,int)  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  nfm,  ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  nfm,  ih);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(nfm,    ih);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,int)	90	None	replace
20	[BUG]  [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(nfm,    ih);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	90	None	replace
21	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  nfm);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  nfm);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  nfm);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(nfm,    ih);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	90	None	replace
22	[BUG]  [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    int    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	35	None	replace
23	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1);	  final    int    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    ih    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	35	None	replace
24	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	35	None	replace
25	[BUG]  [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	42	None	replace
26	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	42	None	replace
27	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	54	None	add
28	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  tmp  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  tmp  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    final  double  tmp  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	54	None	add
29	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  Final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  not  a  statement  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  Final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    Final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  	non-compiled	[CE]  not  a  statement	54	None	add
30	[BUG]  [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	106	None	replace
31	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	106	None	replace
32	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	106	1	replace
33	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	106	1	replace
34	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  zMatrix.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  zMatrix.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	106	1	replace
35	[BUG]  [BUGGY]  final  double  tmp  =  zMatrix.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  zMatrix.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  zMatrix.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	106	1	replace
36	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  nfm.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  nfm.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  nfm.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    jpt.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	21	None	replace
37	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    jpt.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	21	None	replace
38	[BUG]  [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	111	None	replace
39	[BUG]  [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	111	None	replace
40	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	51	None	replace
41	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	51	None	replace
42	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interfacePoints.getEntry(nfm,  jpt  -  1);  [CE]  cannot  find  symbol  interfacePoints  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interfacePoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interfacePoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    Final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  cannot  find  symbol  interfacePoints	68	None	replace
43	[BUG]  [BUGGY]  final  int  ih  =  ipt  *(ih  -  1)/  2  +  jpt  -  1;  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *(ih  -  1)/  2  +  jpt  -  1;  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *(ih  -  1)/  2  +  jpt  -  1;	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interfacePoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	67	None	replace
44	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	50	None	replace
45	[BUG]  [BUGGY]  final  int  jh  =  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jh  =  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jh  =  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	50	None	replace
46	[BUG]  [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	59	None	replace
47	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	112	None	replace
48	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt,  f);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt,  f);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt,  f);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih,    f);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	114	None	replace
49	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih,  f);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih,  f);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih,  f);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih,    f);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	114	None	replace
50	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  nfm);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  nfm);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  nfm);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih,    f);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	114	None	replace
51	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	58	None	replace
52	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	58	None	replace
53	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	58	None	replace
54	[BUG]  [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	58	None	replace
55	[BUG]  [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  ih  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  ih  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  ih  -  1);	  final    int    jpt    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	61	None	replace
56	[BUG]  [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  upperBound  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  upperBound  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  upperBound  -  1);	  final    int    jpt    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	61	None	replace
57	[BUG]  [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  recip);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  recip);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  recip);	  final    int    jpt    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	61	None	replace
58	[BUG]  [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  nfxm  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  nfxm  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  nfxm  -  1);	  final    int    jpt    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	61	None	replace
59	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  recip  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  recip  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  recip  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(nfm,    recip    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	31	None	replace
60	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  recip  -  1)*  jpt.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  recip  -  1)*  jpt.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  recip  -  1)*  jpt.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(nfm,    recip    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	31	None	replace
61	[BUG]  [BUGGY]  final  int  ih  =  jpt  *  interpolationPoints.getEntry(nfm,  recip  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  jpt  *  interpolationPoints.getEntry(nfm,  recip  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  jpt  *  interpolationPoints.getEntry(nfm,  recip  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    jpt    *    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	3	None	replace
62	[BUG]  [BUGGY]  final  int  ih  =  nfm  *  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  nfm  *  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  nfm  *  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    jpt    *    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	3	None	replace
63	[BUG]  [BUGGY]  final  int  ih  =  jpt  *  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  jpt  *  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  jpt  *  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(nfm,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	1	None	replace
64	[BUG]  [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	9	None	replace
65	[BUG]  [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	9	None	replace
66	[BUG]  [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	9	None	replace
67	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	45	None	replace
68	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  0)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  0)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  0)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	45	None	replace
69	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt,  ih);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt,  ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt,  ih);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih,    ih);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	29	None	replace
70	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih,  ih);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih,  ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih,  ih);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih,    ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	29	None	replace
71	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih,  ih);  [CE]  no  suitable  method  found  for  getEntry(int,int,int)  [FE]                          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih,  ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih,  ih);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih,    ih);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,int)	29	None	replace
72	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	84	None	replace
73	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	84	None	replace
74	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	84	None	replace
75	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	40	None	replace
76	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	40	1	replace
77	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	40	1	replace
78	[BUG]  [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	40	None	replace
79	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	40	1	replace
80	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	40	1	replace
81	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	52	None	add
82	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  tmp  =  interfacePoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  tmp  =  interfacePoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    final  double  tmp  =  interfacePoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	52	None	add
83	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  Final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  not  a  statement  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  Final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    Final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  	non-compiled	[CE]  not  a  statement	52	None	add
84	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(ih,  jpt);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(ih,  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(ih,  jpt);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    jpt);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	26	None	replace
85	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt,  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt,  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt,  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    jpt);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	26	None	replace
86	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  jpt);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  jpt);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    jpt);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	26	None	replace
87	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1);	  final    int    jpt    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	48	None	replace
88	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  nfm  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  nfm  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  nfm  -  1);	  final    int    jpt    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	48	None	replace
89	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1);	  final    int    jpt    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	48	None	replace
90	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1);	  final    int    jpt    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	48	None	replace
91	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	37	None	replace
92	[BUG]  [BUGGY]  final  int  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	37	None	replace
93	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1,  jpt  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	37	None	replace
94	[BUG]  [BUGGY]  final  int  ih  =  ipt  *(jpt  -  1  +  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *(jpt  -  1  +  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *(jpt  -  1  +  jpt  -  1);	  final    int    ih    =    ipt    *(ipt    -    1    +    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	13	None	replace
95	[BUG]  [BUGGY]  final  int  ih  =  jpt  *(ipt  -  1  +  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  jpt  *(ipt  -  1  +  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  jpt  *(ipt  -  1  +  jpt  -  1);	  final    int    ih    =    ipt    *(ipt    -    1    +    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	13	None	replace
96	[BUG]  [BUGGY]  final  int  ih  =  ipt  *(ipt  -  1  +  1)/  2  +  jpt  -  1;  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *(ipt  -  1  +  1)/  2  +  jpt  -  1;  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *(ipt  -  1  +  1)/  2  +  jpt  -  1;	  final    int    ih    =    ipt    *(ipt    -    1    +    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	13	None	replace
97	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  if(interpolationPoints!=    null)    {    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    modelSecondDerivativesValues.setEntry(i    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	98	1	replace
98	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  if(interpolationPoints!=    null)    {    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    modelSecondDerivativesValues.setEntry(i    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	98	1	replace
99	[BUG]  [BUGGY]  if(jpt  ==  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(i  [CE]  ')'  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  if(jpt  ==  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(i  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	if(jpt  ==  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(i	  if(interpolationPoints!=    null)    {    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    modelSecondDerivativesValues.setEntry(i    	non-compiled	[CE]  ')'  expected	98	None	replace
100	[BUG]  [BUGGY]  if(jpt  ==  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEnt  [CE]  ';'  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  if(jpt  ==  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEnt  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	if(jpt  ==  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEnt	  if(interpolationPoints!=    null)    {    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    modelSecondDerivativesValues.setEntry(i    	non-compiled	[CE]  ';'  expected	98	None	replace
101	[BUG]  [BUGGY]  if(jpt  ==  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry  [CE]  ';'  expected  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  if(jpt  ==  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	if(jpt  ==  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry	  if(interpolationPoints!=    null)    {    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    modelSecondDerivativesValues.setEntry(i    	non-compiled	[CE]  ';'  expected	98	None	replace
102	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  nfm);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  nfm);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  nfm);	  final    int    ih    =    fAtInterpolationPoints.getEntry(jpt,    ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	28	None	replace
103	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  jpt,  ih);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  jpt,  ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  jpt,  ih);	  final    int    ih    =    fAtInterpolationPoints.getEntry(jpt,    ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	28	None	replace
104	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  0);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  0);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  0);	  final    int    ih    =    fAtInterpolationPoints.getEntry(jpt,    ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	28	None	replace
105	[BUG]  [BUGGY]  final  int  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [CE]  int  cannot  be  dereferenced  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  nfm.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    nfm.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	107	None	replace
106	[BUG]  [BUGGY]  final  double  tmp  =  jpt.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  int  cannot  be  dereferenced  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  jpt.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  jpt.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    nfm.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	107	None	replace
107	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [CE]  int  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  nfm.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    nfm.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	107	None	replace
108	[BUG]  [BUGGY]  final  double  tmp  =  nfm.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  nfm.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  nfm.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    nfm.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	107	None	replace
109	[BUG]  [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	94	None	replace
110	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	94	None	replace
111	[BUG]  [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	94	None	replace
112	[BUG]  [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt);	  final    int    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	30	None	replace
113	[BUG]  [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  ih);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  ih);	  final    int    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	30	None	replace
114	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(jpt,    ih);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	115	None	replace
115	[BUG]  [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(jpt,    ih);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	115	None	replace
116	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  jpt,  ih);  [CE]  no  suitable  method  found  for  getEntry(int,int,int)  [FE]                          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  jpt,  ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  jpt,  ih);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(jpt,    ih);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,int)	115	None	replace
117	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	85	None	add
118	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	85	None	add
119	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	113	None	replace
120	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	113	None	replace
121	[BUG]  [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	64	None	replace
122	[BUG]  [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	78	None	replace
123	[BUG]  [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  nfm.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	78	None	replace
124	[BUG]  [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	78	None	replace
125	[BUG]  [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(nfm,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	96	None	replace
126	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  nfm,  ih  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int,int)  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  nfm,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  nfm,  ih  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(nfm,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,int)	96	None	replace
127	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1,  jpt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int,int)  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1,  jpt  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(nfm,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,int)	96	None	replace
128	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  nfm  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  nfm  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  nfm  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(nfm,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	96	None	replace
129	[BUG]  [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	108	None	replace
130	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	108	1	replace
131	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	108	1	replace
132	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	108	None	replace
133	[BUG]  [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	108	None	replace
134	[BUG]  [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    ih    =    fAtInterpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	95	None	replace
135	[BUG]  [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    ih    =    fAtInterpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	95	None	replace
136	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt);	  final    int    ih    =    fAtInterpolationPoints.getEntry(ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	25	None	replace
137	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  jpt);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  jpt);	  final    int    ih    =    fAtInterpolationPoints.getEntry(ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	25	None	replace
138	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(nfm);	  final    int    ih    =    fAtInterpolationPoints.getEntry(ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	25	None	replace
139	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  nfm  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  nfm  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  nfm  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(nfm,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	34	None	replace
140	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(nfm,    ih    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	34	None	replace
141	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	33	None	replace
142	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	33	None	replace
143	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	33	None	replace
144	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  nfm.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	33	None	replace
145	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(nfm,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	32	None	replace
146	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  interpolationPoints.getEntry(jpt,  nfm  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  interpolationPoints.getEntry(jpt,  nfm  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  interpolationPoints.getEntry(jpt,  nfm  -  1);	  final    int    ih    =    interpolationPoints.getEntry(nfm,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	32	None	replace
147	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	83	None	replace
148	[BUG]  [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	83	None	replace
149	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	83	None	replace
150	[BUG]  [BUGGY]  final  int  fbeg  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	83	None	replace
151	[BUG]  [BUGGY]  final  int  fbeg  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    int    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	69	None	replace
152	[BUG]  [BUGGY]  final  int  fbeg  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    int    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	69	None	replace
153	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	62	None	replace
154	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	62	None	replace
155	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interfacePoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interfacePoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interfacePoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	62	None	replace
156	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  2);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  2);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  2);	  final    int    ih    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	62	None	replace
157	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	73	None	replace
158	[BUG]  [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	73	None	replace
159	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  nfm  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  nfm  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  nfm  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	73	None	replace
160	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(jpt);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(jpt);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	27	None	replace
161	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(jpt,  ih);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(jpt,  ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(jpt,  ih);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	27	None	replace
162	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  if(interpolationPoints!=    null)    {    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    modelSecondDerivativesValues.setEntry(    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	99	1	replace
163	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  if(interpolationPoints!=    null)    {    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    modelSecondDerivativesValues.setEntry(    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	99	1	replace
164	[BUG]  [BUGGY]  final  int  jpt  =  ih  *(ih  -  1  +  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  ih  *(ih  -  1  +  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  ih  *(ih  -  1  +  jpt  -  1);	  final    int    jpt    =    jpt    *(ih    -    1    +    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	47	None	replace
165	[BUG]  [BUGGY]  final  int  jpt  =  nfm  *(ih  -  1  +  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  nfm  *(ih  -  1  +  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  nfm  *(ih  -  1  +  jpt  -  1);	  final    int    jpt    =    jpt    *(ih    -    1    +    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	47	None	replace
166	[BUG]  [BUGGY]  final  int  jpt  =  ih  *(iw  -  1  +  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  ih  *(iw  -  1  +  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  ih  *(iw  -  1  +  jpt  -  1);	  final    int    jpt    =    jpt    *(ih    -    1    +    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	47	None	replace
167	[BUG]  [BUGGY]  final  int  jpt  =  ih  *(ih  +  1  +  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  ih  *(ih  +  1  +  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  ih  *(ih  +  1  +  jpt  -  1);	  final    int    jpt    =    jpt    *(ih    -    1    +    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	47	None	replace
168	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	53	None	replace
169	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	4	None	replace
170	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  jpt.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  jpt.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  jpt.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	4	None	replace
171	[BUG]  [BUGGY]  final  int  ih  =  jpt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  jpt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  jpt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	4	None	replace
172	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  -  1)*  nfm.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(jpt,    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	71	None	replace
173	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(jpt,    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	71	None	replace
174	[BUG]  [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(nfm,  jpt);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(nfm,  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  fAtInterpolationPoints.getEntry(nfm,  jpt);	  final    double    ih    =    fAtInterpolationPoints.getEntry(jpt,    ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	80	None	replace
175	[BUG]  [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  cannot  find  symbol  interfacePoints  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interfacePoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  cannot  find  symbol  interfacePoints	10	None	replace
176	[BUG]  [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  ih  -  1);  [CE]  cannot  find  symbol  interfacePoints  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  ih  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interfacePoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interfacePoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  cannot  find  symbol  interfacePoints	10	None	replace
177	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	81	None	add
178	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(jpt,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(jpt,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final  double  tmp  =  interpolationPoints.getEntry(jpt,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	81	None	add
179	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interfacePoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interfacePoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final  double  tmp  =  interfacePoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	81	None	add
180	[BUG]  [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    int    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	17	None	replace
181	[BUG]  [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    int    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	17	None	replace
182	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	16	None	replace
183	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	16	None	replace
184	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	75	None	replace
185	[BUG]  [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	75	None	replace
186	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	75	None	replace
187	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	41	None	add
188	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final  double  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	41	None	add
189	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interfacePoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interfacePoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final  double  tmp  =  interfacePoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	41	None	add
190	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	19	None	replace
191	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	19	None	replace
192	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	19	None	replace
193	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(ih);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	102	1	replace
194	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(ih);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	102	1	replace
195	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih);  [CE]  no  suitable  method  found  for  getEntry(int)  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(ih);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(ih);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int)	102	None	replace
196	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  jpt);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  jpt);	  final    int    ih    =    fAtInterpolationPoints.getEntry(nfm,    ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	22	None	replace
197	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  nfm,  ih);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  nfm,  ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  nfm,  ih);	  final    int    ih    =    fAtInterpolationPoints.getEntry(nfm,    ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	22	None	replace
198	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  recip);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  recip);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  recip);	  final    int    ih    =    fAtInterpolationPoints.getEntry(nfm,    ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	22	None	replace
199	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	14	None	replace
200	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	14	None	replace
201	[BUG]  [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(jpt,  nfm,  ih);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(jpt,  nfm,  ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  fAtInterpolationPoints.getEntry(jpt,  nfm,  ih);	  final    double    ih    =    fAtInterpolationPoints.getEntry(nfm,    ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	89	None	replace
202	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  ih,  jpt);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  ih,  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  ih,  jpt);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    ih,    jpt);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	23	None	replace
203	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  nfm,  jpt);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  nfm,  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  nfm,  jpt);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    ih,    jpt);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	23	None	replace
204	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	18	None	replace
205	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	18	None	replace
206	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  jpt.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  jpt.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  jpt.getEntry(jpt,  ih  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	18	None	replace
207	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	97	None	replace
208	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	86	None	replace
209	[BUG]  [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	86	None	replace
210	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	86	None	replace
211	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	56	None	add
212	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    final  double  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	56	None	add
213	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  tmp  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  tmp  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    final  double  tmp  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	56	None	add
214	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	104	None	replace
215	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  nfm.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	104	None	replace
216	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	104	None	replace
217	[BUG]  [BUGGY]  final  int  ih  =  jpt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  jpt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  jpt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	104	None	replace
218	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    fAtInterpolationPoints.getEntry(ih);    final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	101	None	add
219	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);  Final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);  [CE]  not  a  statement  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);  Final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    fAtInterpolationPoints.getEntry(ih);    Final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);	  	non-compiled	[CE]  not  a  statement	101	None	add
220	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);  final  int  ih  =  fAtInterpolationPoints.getEntry(ih);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);  final  int  ih  =  fAtInterpolationPoints.getEntry(ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    fAtInterpolationPoints.getEntry(ih);    final  int  ih  =  fAtInterpolationPoints.getEntry(ih);	  	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	101	None	add
221	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);  final  double  ih  =  fAtInterpolationPoints.getEntry(ih);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);  final  double  ih  =  fAtInterpolationPoints.getEntry(ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    fAtInterpolationPoints.getEntry(ih);    final  double  ih  =  fAtInterpolationPoints.getEntry(ih);	  	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	101	None	add
222	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  nfm);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  nfm);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  nfm);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    jpt);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	24	None	replace
223	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  jpt);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  jpt);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    jpt);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	24	None	replace
224	[BUG]  [BUGGY]  final  double  ih  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interfacePoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	87	None	replace
225	[BUG]  [BUGGY]  final  double  ih  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interfacePoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	87	None	replace
226	[BUG]  [BUGGY]  final  int  ih  =  interfacePoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interfacePoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interfacePoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interfacePoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	87	None	replace
227	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	57	None	replace
228	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	57	1	replace
229	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(jpt,  ih  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	57	1	replace
230	[BUG]  [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	57	None	replace
231	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	57	1	replace
232	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	57	1	replace
233	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	36	None	replace
234	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	36	None	replace
235	[BUG]  [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(jpt);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  fAtInterpolationPoints.getEntry(jpt);	  final    double    ih    =    fAtInterpolationPoints.getEntry(ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	77	None	replace
236	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	8	1	replace
237	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	8	1	replace
238	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  ih  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	8	1	replace
239	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  ih  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  ih  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	8	1	replace
240	[BUG]  [BUGGY]  final  double  h  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  cannot  find  symbol  tmp  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  h  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  h  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    h    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  cannot  find  symbol  tmp	88	None	replace
241	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	43	None	add
242	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	43	None	add
243	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  nfm  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  nfm  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  nfm  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	43	None	add
244	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  jpt  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  jpt  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  jpt  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	43	None	add
245	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  zMatrix.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  zMatrix.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interfacePoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	103	1	replace
246	[BUG]  [BUGGY]  final  double  tmp  =  zMatrix.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  zMatrix.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  zMatrix.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interfacePoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	103	1	replace
247	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  bMatrix.getEntry(jpt,  ih  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  bMatrix.getEntry(jpt,  ih  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interfacePoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	103	1	replace
248	[BUG]  [BUGGY]  final  double  tmp  =  bMatrix.getEntry(jpt,  ih  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  bMatrix.getEntry(jpt,  ih  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  bMatrix.getEntry(jpt,  ih  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interfacePoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	103	1	replace
249	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  -  1)*  nfm.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	72	None	replace
250	[BUG]  [BUGGY]  final  int  ih  =  nfm  *  interpolationPoints.getEntry(jpt,  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  nfm  *  interpolationPoints.getEntry(jpt,  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  nfm  *  interpolationPoints.getEntry(jpt,  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	72	None	replace
251	[BUG]  [BUGGY]  final  int  ih  =  jpt  *  interpolationPoints.getEntry(jpt,  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  jpt  *  interpolationPoints.getEntry(jpt,  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  jpt  *  interpolationPoints.getEntry(jpt,  -  1)*  nfm.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	72	None	replace
252	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  (jpt  -  1)/  2  +  jpt  -  1;  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  (jpt  -  1)/  2  +  jpt  -  1;  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  (jpt  -  1)/  2  +  jpt  -  1;	  final    int    ih    =    ipt    *    (ipt    -    1)/    2    +    jpt    -    1;    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	12	None	replace
253	[BUG]  [BUGGY]  final  int  ih  =  jpt  *  (ipt  -  1)/  2  +  jpt  -  1;  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  jpt  *  (ipt  -  1)/  2  +  jpt  -  1;  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  jpt  *  (ipt  -  1)/  2  +  jpt  -  1;	  final    int    ih    =    ipt    *    (ipt    -    1)/    2    +    jpt    -    1;    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	12	None	replace
254	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	110	None	replace
255	[BUG]  [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	110	None	replace
256	[BUG]  [BUGGY]  final  int  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	20	None	replace
257	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	20	None	replace
258	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  nfm  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  nfm  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  nfm  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	20	None	replace
259	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	105	None	add
260	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	105	None	add
261	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  jpt  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  jpt  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  jpt  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	105	None	add
262	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	39	None	add
263	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final  double  ih  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	39	None	add
264	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interfacePoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interfacePoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final  double  tmp  =  interfacePoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	39	None	add
265	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    jpt    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	5	None	replace
266	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(ih,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(ih,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(ih,  jpt  -  1);	  final    int    jpt    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	5	None	replace
267	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    jpt    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	5	None	replace
268	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    jpt    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	5	None	replace
269	[BUG]  [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	70	None	replace
270	[BUG]  [BUGGY]  final  double  ih  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interfacePoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	92	None	replace
271	[BUG]  [BUGGY]  final  int  ih  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interfacePoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	92	None	replace
272	[BUG]  [BUGGY]  final  int  f  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  f  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  f  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  f  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    int    f    =    fAtInterpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  prelim(double[],double[])	93	None	replace
273	[BUG]  [BUGGY]  final  double  f  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  f  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  f  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  f  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    int    f    =    fAtInterpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  f  is  already  defined  in  method  prelim(double[],double[])	93	None	replace
274	[BUG]  [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  cannot  find  symbol  interfacePoints  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interfacePoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  cannot  find  symbol  interfacePoints	65	None	replace
275	[BUG]  [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  cannot  find  symbol  interfacePoints  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interfacePoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interfacePoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  cannot  find  symbol  interfacePoints	65	None	replace
276	[BUG]  [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  cannot  find  symbol  interfacePoints  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interfacePoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  cannot  find  symbol  interfacePoints	65	None	replace
277	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	74	None	replace
278	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	74	None	replace
279	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  nfm  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  nfm  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(ih,  nfm  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	74	None	replace
280	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	15	None	replace
281	[BUG]  [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f));  [CE]  cannot  find  symbol  tmp  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f));  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f));	  modelSecondDerivativesValues.setEntry(ih,    	non-compiled	[CE]  cannot  find  symbol  tmp	11	None	replace
282	[BUG]  [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(jpt)+  f));  [CE]  cannot  find  symbol  tmp  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(jpt)+  f));  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(jpt)+  f));	  modelSecondDerivativesValues.setEntry(ih,    	non-compiled	[CE]  cannot  find  symbol  tmp	11	None	replace
283	[BUG]  [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  1)/  2  +  jpt);  [CE]  cannot  find  symbol  tmp  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  1)/  2  +  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  1)/  2  +  jpt);	  modelSecondDerivativesValues.setEntry(ih,    	non-compiled	[CE]  cannot  find  symbol  tmp	11	None	replace
284	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	44	None	replace
285	[BUG]  [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	44	None	replace
286	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  zMatrix.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  zMatrix.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	86	1	replace
287	[BUG]  [BUGGY]  final  double  tmp  =  zMatrix.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  zMatrix.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  zMatrix.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	86	1	replace
288	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	110	None	replace
289	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	16	None	replace
290	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interfacePoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interfacePoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  ih  =  interfacePoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	85	None	add
291	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  h  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  h  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  h  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	85	None	add
292	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	111	None	replace
293	[BUG]  [BUGGY]  final  int  ih  =  interfacePoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interfacePoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interfacePoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interfacePoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	92	None	replace
294	[BUG]  [BUGGY]  final  double  ih  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interfacePoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	92	None	replace
295	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	84	None	replace
296	[BUG]  [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(nfm);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(nfm);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  fAtInterpolationPoints.getEntry(nfm);	  final    double    ih    =    fAtInterpolationPoints.getEntry(ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	77	None	replace
297	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  nfm  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  nfm  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final  double  nfm  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	81	None	add
298	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  jpt  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  jpt  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final  double  jpt  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	81	None	add
299	[BUG]  [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  jpt  >>  ')'  expected  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  jpt  >>  ')'  expected  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  jpt  >>  ')'  expected	  modelSecondDerivativesValues.setEntry(ih,    (fbeg    -    f    	non-compiled	[CE]  ')'  expected	46	None	replace
300	[BUG]  [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (ipt  -  f  *  jpt  -  ')'  expected  [CE]  ')'  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (ipt  -  f  *  jpt  -  ')'  expected  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	modelSecondDerivativesValues.setEntry(ih,  (ipt  -  f  *  jpt  -  ')'  expected	  modelSecondDerivativesValues.setEntry(ih,    (fbeg    -    f    	non-compiled	[CE]  ')'  expected	46	None	replace
301	[BUG]  [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  f  *  jpt  -  ')'  expected  [CE]  ')'  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  f  *  jpt  -  ')'  expected  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  f  *  jpt  -  ')'  expected	  modelSecondDerivativesValues.setEntry(ih,    (fbeg    -    f    	non-compiled	[CE]  ')'  expected	46	None	replace
302	[BUG]  [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt  -  1)  [CE]  ')'  expected  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt  -  1)  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt  -  1)	  modelSecondDerivativesValues.setEntry(ih,    (fbeg    -    f    	non-compiled	[CE]  ')'  expected	46	None	replace
303	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  recip  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  recip  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  recip  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(nfm,    recip    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	2	None	replace
304	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ipt,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ipt,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(ipt,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	60	None	replace
305	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1  +  jpt);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1  +  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1  +  jpt);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	37	None	replace
306	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ih    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	37	1	replace
307	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ih    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	37	1	replace
308	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int)  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int)	40	None	replace
309	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	58	None	replace
310	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    ih,    jpt);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	23	None	replace
311	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih,  upperBound);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih,  upperBound);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih,  upperBound);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    ih,    jpt);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	23	None	replace
312	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  jpt,  ih);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  jpt,  ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  jpt,  ih);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    ih,    jpt);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	23	None	replace
313	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  nfm  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  nfm  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  nfm  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	70	None	replace
314	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  zMatrix.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  zMatrix.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  zMatrix.getEntry(jpt,  ih  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	18	None	replace
315	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    int    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	69	None	replace
316	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  upperBound  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  upperBound  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  upperBound  -  1);	  final    int    ih    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	45	None	replace
317	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	19	None	replace
318	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	104	None	replace
319	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	9	None	replace
320	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	20	None	replace
321	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	20	None	replace
322	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(len,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(len,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(len,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	50	None	replace
323	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(bMatrix,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(bMatrix,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(bMatrix,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	50	None	replace
324	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	72	None	replace
325	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	72	None	replace
326	[BUG]  [BUGGY]  final  int  jpt  =  ih  *(ih  -  1  +  upperBound  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  ih  *(ih  -  1  +  upperBound  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  ih  *(ih  -  1  +  upperBound  -  1);	  final    int    jpt    =    jpt    *(ih    -    1    +    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	47	None	replace
327	[BUG]  [BUGGY]  final  int  ih  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interfacePoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interfacePoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	87	None	replace
328	[BUG]  [BUGGY]  final  int  ih  =  ipt  *(ipt  -  1  +  upperBound  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *(ipt  -  1  +  upperBound  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *(ipt  -  1  +  upperBound  -  1);	  final    int    ih    =    ipt    *(ipt    -    1    +    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	13	None	replace
329	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interfacePoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interfacePoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  ih  =  interfacePoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	105	None	add
330	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  h  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  h  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  h  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	105	None	add
331	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  nfm  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  nfm  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    final  double  nfm  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	54	None	add
332	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    final  double  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	54	None	add
333	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  recip  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  recip  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  recip  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(nfm,    recip    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	31	None	replace
334	[BUG]  [BUGGY]  final  int  ih  =  ipt  *(ih  -  1  +  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *(ih  -  1  +  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *(ih  -  1  +  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interpolationPoints.getEntry(nfm,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	79	None	replace
335	[BUG]  [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  lowerBound  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  lowerBound  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  lowerBound  -  1);	  final    int    jpt    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	61	None	replace
336	[BUG]  [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    int    ih    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	51	None	replace
337	[BUG]  [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	64	None	replace
338	[BUG]  [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	64	None	replace
339	[BUG]  [BUGGY]  final  double  jpt  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  jpt  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  jpt  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1);	  final    double    jpt    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	109	None	replace
340	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    jpt    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	5	None	replace
341	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    jpt    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	5	None	replace
342	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    jpt    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	5	None	replace
343	[BUG]  [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    ih    =    fAtInterpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	95	None	replace
344	[BUG]  [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    fbeg    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	7	None	replace
345	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	75	None	replace
346	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	75	None	replace
347	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(nfm,  jpt  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(nfm,  jpt  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(nfm,  jpt  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(nfm,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	1	None	replace
348	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(nfm,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(nfm,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(nfm,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(nfm,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	1	None	replace
349	[BUG]  [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(nfm,  -ih);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(nfm,  -ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  fAtInterpolationPoints.getEntry(nfm,  -ih);	  final    double    ih    =    fAtInterpolationPoints.getEntry(nfm,    ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	89	None	replace
350	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  nfm  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  nfm  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(ih,  nfm  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	74	None	replace
351	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(ih,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	74	None	replace
352	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  (ipt  -  1)/  2  +  upperBound  -  1;  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  (ipt  -  1)/  2  +  upperBound  -  1;  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  (ipt  -  1)/  2  +  upperBound  -  1;	  final    int    ih    =    ipt    *    (ipt    -    1)/    2    +    jpt    -    1;    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	12	None	replace
353	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  jpt.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  jpt.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  jpt.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    jpt.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	21	None	replace
354	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  jpt.getEntry(jpt,  nfm  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  jpt.getEntry(jpt,  nfm  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  jpt.getEntry(jpt,  nfm  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    jpt.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	21	None	replace
355	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  jpt.getEntry(jpt,  ih  -  1);  [CE]  int  cannot  be  dereferenced  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  jpt.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  jpt.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    jpt.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	21	None	replace
356	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  jpt.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  jpt.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  jpt.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    jpt.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	21	None	replace
357	[BUG]  [BUGGY]  final  double  h  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  cannot  find  symbol  tmp  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  h  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  h  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    h    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  cannot  find  symbol  tmp	88	None	replace
358	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  bMatrix.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  bMatrix.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interfacePoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	103	1	replace
359	[BUG]  [BUGGY]  final  double  tmp  =  bMatrix.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  bMatrix.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  bMatrix.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interfacePoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	103	1	replace
360	[BUG]  [BUGGY]  final  double  tmp  =  fbeg.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  double  cannot  be  dereferenced  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fbeg.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fbeg.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interfacePoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  double  cannot  be  dereferenced	103	None	replace
361	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    jpt    *    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	3	None	replace
362	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1  +  f);  [CE]  no  suitable  method  found  for  getEntry(int,double)  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1  +  f);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1  +  f);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,double)	108	None	replace
363	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  zMatrix.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  zMatrix.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	44	1	replace
364	[BUG]  [BUGGY]  final  double  tmp  =  zMatrix.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  zMatrix.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  zMatrix.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	44	1	replace
365	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	44	1	replace
366	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	44	1	replace
367	[BUG]  [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(jpt,  ih  -  1)*  interfacePoints.getEntry(nfm,  jpt  -  1);  [CE]  cannot  find  symbol  interfacePoints  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(jpt,  ih  -  1)*  interfacePoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interfacePoints.getEntry(jpt,  ih  -  1)*  interfacePoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interfacePoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  cannot  find  symbol  interfacePoints	100	None	replace
368	[BUG]  [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(nfm,  ih  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  cannot  find  symbol  interfacePoints  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(nfm,  ih  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interfacePoints.getEntry(nfm,  ih  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interfacePoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  cannot  find  symbol  interfacePoints	10	None	replace
369	[BUG]  [BUGGY]  if(ih  ==  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEnt  [CE]  ';'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  if(ih  ==  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEnt  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	if(ih  ==  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEnt	  if(interpolationPoints!=    null)    {    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    modelSecondDerivativesValues.setEntry(i    	non-compiled	[CE]  ';'  expected	98	None	replace
370	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  if(interpolationPoints!=    null)    {    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    modelSecondDerivativesValues.setEntry(i    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	98	None	replace
371	[BUG]  [BUGGY]  if(ih  ==  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.  [CE]  while  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  if(ih  ==  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	if(ih  ==  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.	  if(interpolationPoints!=    null)    {    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    modelSecondDerivativesValues.setEntry(i    	non-compiled	[CE]  while  expected	98	None	replace
372	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  upperBound);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  upperBound);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  upperBound);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih,    ih);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	29	None	replace
373	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih,  ih);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih,  ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih,  ih);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih,    ih);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	29	None	replace
374	[BUG]  [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  cannot  find  symbol  interfacePoints  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interfacePoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interfacePoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  cannot  find  symbol  interfacePoints	67	None	replace
375	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);  final  double  h  =  fAtInterpolationPoints.getEntry(ih);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);  final  double  h  =  fAtInterpolationPoints.getEntry(ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    fAtInterpolationPoints.getEntry(ih);    final  double  h  =  fAtInterpolationPoints.getEntry(ih);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	101	None	add
376	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  h  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  h  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    final  double  h  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	56	None	add
377	[BUG]  [BUGGY]  final  double  nfm  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  nfm  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  nfm  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    nfm    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	91	None	replace
378	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  i  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  i  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  i  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	62	None	replace
379	[BUG]  [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2  +  jpt  -  1);  [CE]  cannot  find  symbol  tmp  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2  +  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2  +  jpt  -  1);	  modelSecondDerivativesValues.setEntry(ih,    	non-compiled	[CE]  cannot  find  symbol  tmp	11	None	replace
380	[BUG]  [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [CE]  cannot  find  symbol  tmp  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);	  modelSecondDerivativesValues.setEntry(ih,    	non-compiled	[CE]  cannot  find  symbol  tmp	11	None	replace
381	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  0);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  0);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(nfm,  0);	  final    int    ih    =    fAtInterpolationPoints.getEntry(nfm,    ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	22	None	replace
382	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  jpt  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  jpt  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final  double  jpt  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	41	None	add
383	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interfacePoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interfacePoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final  double  ih  =  interfacePoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	41	None	add
384	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(nfm,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	32	None	replace
385	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  jpt  -  1)/  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(nfm,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	32	None	replace
386	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    Final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	68	1	replace
387	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    Final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	68	1	replace
388	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [CE]  int  cannot  be  dereferenced  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  nfm.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    Final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	replace
389	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  i  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  i  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  i  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	6	None	replace
390	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)/  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)/  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)/  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	4	None	replace
391	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  zMatrix.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	4	None	replace
392	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  bMatrix.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  bMatrix.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  bMatrix.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	4	None	replace
393	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  nfm  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  nfm  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(ih,  nfm  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	55	None	replace
394	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    final  double  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	52	None	add
395	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interfacePoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interfacePoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  ih  =  interfacePoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	43	None	add
396	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  h  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  h  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  h  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	43	None	add
397	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	83	None	replace
398	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	83	None	replace
399	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interfacePoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  ih  =  interfacePoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final  double  ih  =  interfacePoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	39	None	add
400	[BUG]  [BUGGY]  final  double  tmp  =  nfm.getEntry(jpt,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  int  cannot  be  dereferenced  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  nfm.getEntry(jpt,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  nfm.getEntry(jpt,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    nfm.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	107	None	replace
401	[BUG]  [BUGGY]  final  double  tmp  =  zMatrix.getEntry(ih,  jpt  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [CE]  int  cannot  be  dereferenced  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  zMatrix.getEntry(ih,  jpt  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  zMatrix.getEntry(ih,  jpt  -  1)*  nfm.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    nfm.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	107	None	replace
402	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  lowerBound);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  lowerBound);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  lowerBound);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih,    f);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	114	None	replace
403	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih,  f);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih,  f);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(nfm,  ih,  f);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih,    f);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	114	None	replace
404	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	78	None	replace
405	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  jpt.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  jpt.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  jpt.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    jpt.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	21	None	replace
406	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(ih,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	73	None	replace
407	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	73	None	replace
408	[BUG]  [BUGGY]  final  double  nfm  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  nfm  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  nfm  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    nfm    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	91	None	replace
409	[BUG]  [BUGGY]  final  double  nfm  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  nfm  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  nfm  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    nfm    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  nfm  is  already  defined  in  method  prelim(double[],double[])	91	None	replace
410	[BUG]  [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)));  [CE]  cannot  find  symbol  tmp  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)));  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)));	  modelSecondDerivativesValues.setEntry(ih,    	non-compiled	[CE]  cannot  find  symbol  tmp	11	None	replace
411	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  dsqCrvmin.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  dsqCrvmin.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  nfm  -  1)*  dsqCrvmin.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	33	None	replace
412	[BUG]  [BUGGY]  final  int  jpt  =  ipt  *(jpt  -  1  +  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  ipt  *(jpt  -  1  +  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  ipt  *(jpt  -  1  +  jpt  -  1);	  final    int    ih    =    ipt    *(ipt    -    1    +    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	13	None	replace
413	[BUG]  [BUGGY]  final  int  jpt  =  ipt  *  (jpt  -  1)/  2  +  jpt  -  1;  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  ipt  *  (jpt  -  1)/  2  +  jpt  -  1;  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  ipt  *  (jpt  -  1)/  2  +  jpt  -  1;	  final    int    ih    =    ipt    *    (ipt    -    1)/    2    +    jpt    -    1;    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	12	None	replace
414	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(nfm,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	1	None	replace
415	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interfacePoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interfacePoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  tmp  =  interfacePoints.getEntry(ih,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	85	None	add
416	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	97	None	replace
417	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1,  jpt);  [CE]  no  suitable  method  found  for  getEntry(int,int,int)  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1,  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1,  jpt);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,int)	108	None	replace
418	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1,  jpt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int,int)  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  jpt  -  1,  jpt  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,int)	108	None	replace
419	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  nfm.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  nfm.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  nfm  -  1)*  nfm.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	104	None	replace
420	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interfacePoints.getEntry(nfm,  jpt  -  1);  [CE]  cannot  find  symbol  interfacePoints  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interfacePoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interfacePoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  cannot  find  symbol  interfacePoints	57	None	replace
421	[BUG]  [BUGGY]  final  int  jpt  =  ih  *(len  -  1  +  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  ih  *(len  -  1  +  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  ih  *(len  -  1  +  jpt  -  1);	  final    int    jpt    =    jpt    *(ih    -    1    +    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	47	None	replace
422	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interfacepolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interfacepolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    jpt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final  double  tmp  =  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interfacepolationPoints.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	81	None	add
423	[BUG]  [BUGGY]  final  double  ih  =  interfacePoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  interfacePoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  interfacePoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	78	None	replace
424	[BUG]  [BUGGY]  final  int  ih  =  interfacePoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interfacePoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interfacePoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    int    ih    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	51	None	replace
425	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interfacepolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interfacepolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    final  double  tmp  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  interfacepolationPoints.getEntry(jpt,  ih  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	52	None	add
426	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	20	None	replace
427	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  jpt.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  jpt.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  jpt.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	62	None	replace
428	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ipt,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(ipt,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(ipt,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	62	None	replace
429	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interfacePoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interfacePoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  tmp  =  interfacePoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	43	None	add
430	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	8	1	replace
431	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	8	1	replace
432	[BUG]  [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	9	None	replace
433	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	40	1	replace
434	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	40	1	replace
435	[BUG]  [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  fAtInterpolationPoints.getEntry(nfm,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    ih    =    fAtInterpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	95	None	replace
436	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interfacePoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interfacePoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final  double  tmp  =  interpolationPoints.getEntry(jpt,  ih  -  1)*  interfacePoints.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	39	None	add
437	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  nfm.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  nfm.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	45	None	replace
438	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	45	None	replace
439	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  bMatrix.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	45	None	replace
440	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	45	None	replace
441	[BUG]  [BUGGY]  final  double  tmp  =  nfm.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  int  cannot  be  dereferenced  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  nfm.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  nfm.getEntry(jpt,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interfacePoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	103	None	replace
442	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  zMatrix.getEntry(jpt,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  zMatrix.getEntry(jpt,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interfacePoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	103	1	replace
443	[BUG]  [BUGGY]  final  double  tmp  =  zMatrix.getEntry(jpt,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  zMatrix.getEntry(jpt,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  zMatrix.getEntry(jpt,  ih  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interfacePoints.getEntry(jpt,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	103	1	replace
444	[BUG]  [BUGGY]  final  double  ih  =  interfacePoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  interfacePoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  interfacePoints.getEntry(ih,  jpt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    ih    =    interfacePoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	87	None	replace
445	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interfacepolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interfacepolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  interfacepolationPoints.getEntry(jpt,  ih  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	54	None	add
446	[BUG]  [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  cannot  find  symbol  interfacePoints  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interfacePoints.getEntry(nfm,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    final    double    tmp    =    interfacePoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  cannot  find  symbol  interfacePoints	10	None	replace
447	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1,  jpt);  [CE]  no  suitable  method  found  for  getEntry(int,int,int)  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1,  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  ih  -  1,  jpt);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(nfm,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,int)	96	None	replace
448	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(nfm,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	94	None	replace
449	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(jpt,  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(jpt,  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(jpt,    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	71	None	replace
450	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	70	None	replace
451	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	70	None	replace
452	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(ih,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	55	1	replace
453	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(ih,  ih  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	55	1	replace
454	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	add	final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	55	1	replace
455	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(jpt,  ih  -  1);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  zMatrix.getEntry(jpt,  ih  -  1);	  final    double    tmp    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	55	1	replace
456	[BUG]  [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)/  ')'  expected  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)/  ')'  expected  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)/  ')'  expected	  modelSecondDerivativesValues.setEntry(ih,    (fbeg    -    f    	non-compiled	[CE]  ')'  expected	46	None	replace
457	[BUG]  [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (jpt  -  f  [CE]  ')'  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  modelSecondDerivativesValues.setEntry(ih,  (jpt  -  f  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	modelSecondDerivativesValues.setEntry(ih,  (jpt  -  f	  modelSecondDerivativesValues.setEntry(ih,    (fbeg    -    f    	non-compiled	[CE]  ')'  expected	46	None	replace
458	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih,  0);  [CE]  no  suitable  method  found  for  getEntry(int,int,int)  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih,  0);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih,  0);	  final    double    tmp    =    fAtInterpolationPoints.getEntry(jpt,    ih);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int,int)	115	None	replace
459	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(ih,    ipt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	110	None	replace
460	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(r,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(r,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(ih,  ipt  -  1)*  fAtInterpolationPoints.getEntry(r,  jpt  -  1);	  final    int    jpt    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	5	None	replace
461	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(jpt,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    nfm    -    1)*    interpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	4	None	replace
462	[BUG]  [BUGGY]  final  double  jpt  =  fAtInterpolationPoints.getEntry(nfm,  ih,  jpt);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  jpt  =  fAtInterpolationPoints.getEntry(nfm,  ih,  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  jpt  =  fAtInterpolationPoints.getEntry(nfm,  ih,  jpt);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(nfm,    ih,    jpt);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	23	None	replace
463	[BUG]  [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interfacePoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  interpolationPoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  final  double  tmp  =  interfacePoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    interpolationPoints.getEntry(ih,    jpt    -    1)*    zMatrix.getEntry(nfm,    jpt    -    1);    final  double  tmp  =  interfacePoints.getEntry(ih,  jpt  -  1)*  zMatrix.getEntry(nfm,  jpt  -  1);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	105	None	add
464	[BUG]  [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  nfm.getEntry(nfm,  ih  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  nfm.getEntry(nfm,  ih  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  nfm.getEntry(nfm,  ih  -  1);	  final    int    jpt    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	61	None	replace
465	[BUG]  [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  recipient  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  recipient  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  interpolationPoints.getEntry(ih,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  recipient  -  1);	  final    int    jpt    =    interpolationPoints.getEntry(ih,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	61	None	replace
466	[BUG]  [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  fAtInterpolationPoints.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	58	None	replace
467	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ipt  -  1)*  interpolationPoints.getEntry(jpt,  ih  -  1);	  final    int    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ipt    -    1)*    interpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	69	None	replace
468	[BUG]  [BUGGY]  if(jpt!=  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  if(jpt!=  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	if(jpt!=  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(	  if(interpolationPoints!=    null)    {    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    modelSecondDerivativesValues.setEntry(i    	non-compiled	[CE]  ')'  expected	98	None	replace
469	[BUG]  [BUGGY]  if(jpt!=  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(i  [CE]  ')'  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  if(jpt!=  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(i  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	if(jpt!=  0)  {  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)*  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(i	  if(interpolationPoints!=    null)    {    final    double    tmp    =    interpolationPoints.getEntry(nfm,    ipt    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    modelSecondDerivativesValues.setEntry(i    	non-compiled	[CE]  ')'  expected	98	None	replace
470	[BUG]  [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  jpt.getEntry(nfm,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  jpt.getEntry(nfm,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  interpolationPoints.getEntry(nfm,  ih  -  1)*  jpt.getEntry(nfm,  jpt  -  1);	  final    int    ih    =    interpolationPoints.getEntry(nfm,    ih    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	38	None	replace
471	[BUG]  [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1,  jpt);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1,  jpt);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  interpolationPoints.getEntry(nfm,  ih  -  1,  jpt);	  final    double    fbeg    =    interpolationPoints.getEntry(nfm,    ih    -    1);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	37	None	replace
472	[BUG]  [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  jpt  =  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  jpt  =  fAtInterpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    fAtInterpolationPoints.getEntry(ih,    jpt    -    1);    	non-compiled	[CE]  variable  jpt  is  already  defined  in  method  prelim(double[],double[])	50	None	replace
473	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [CE]  no  suitable  method  found  for  getEntry(int,int)  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  tmp  =  fAtInterpolationPoints.getEntry(jpt,  ih  -  1)*  fAtInterpolationPoints.getEntry(jpt,  ih  -  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih    -    1)*    fAtInterpolationPoints.getEntry(jpt,    ih    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  getEntry(int,int)	75	None	replace
474	[BUG]  [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  ih  =  ipt  *  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);  [BUGGY]      modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  ih  =  ipt  *  interpolationPoints.getEntry(nfm,  jpt  -  1)*  interpolationPoints.getEntry(jpt,  jpt  -  1);	  final    int    ih    =    ipt    *    interpolationPoints.getEntry(jpt,    -    1)*    interpolationPoints.getEntry(nfm,    jpt    -    1);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	72	None	replace
475	[BUG]  [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);  final  double  tmp  =  FAtInterpolationPoints.getEntry(ih);  [CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  tmp  =  fAtInterpolationPoints.getEntry(ih);  final  double  tmp  =  FAtInterpolationPoints.getEntry(ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final    double    tmp    =    fAtInterpolationPoints.getEntry(ih);    final  double  tmp  =  FAtInterpolationPoints.getEntry(ih);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  prelim(double[],double[])	101	None	add
476	[BUG]  [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  f);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  f);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  int  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  f);	  final    int    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	30	None	replace
477	[BUG]  [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih,  ih);  [CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih,  ih);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  ih  =  fAtInterpolationPoints.getEntry(jpt,  ih,  ih);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih,    ih);    	non-compiled	[CE]  variable  ih  is  already  defined  in  method  prelim(double[],double[])	29	None	replace
478	[BUG]  [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  ih  +  1);  [CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]        }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;      [BUGGY]  final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  ih  +  1);  [BUGGY]      final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);  throw  new  PathIsExploredException();  //  XXX  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1750	1750	1	replace	final  double  fbeg  =  fAtInterpolationPoints.getEntry(jpt,  ih,  ih  +  1);	  final    double    fbeg    =    fAtInterpolationPoints.getEntry(jpt,    ih,    ih);    	non-compiled	[CE]  variable  fbeg  is  already  defined  in  method  prelim(double[],double[])	29	None	replace
