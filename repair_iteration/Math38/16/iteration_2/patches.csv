bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  safeThan  =  false)  {  throw  new  PathIsExploredException( " ");  }  [CE]  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan  =  false)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan  =  false)  {  throw  new  PathIsExploredException( " ");  }	  safeThan    <    =    false)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  	92	None	replace
2	[BUG]  [BUGGY]  safeThan  <  =  true)  {  throw  new  PathIsExploredException( " ");  }  [CE]  illegal  start  of  type  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan  <  =  true)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan  <  =  true)  {  throw  new  PathIsExploredException( " ");  }	  safeThan    <    =    false)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
3	[BUG]  [BUGGY]  safeThan  =  true)  {  throw  new  PathIsExploredException( " ");  }  [CE]  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan  =  true)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan  =  true)  {  throw  new  PathIsExploredException( " ");  }	  safeThan    <    =    false)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  	92	None	replace
4	[BUG]  [BUGGY]  safeThan)  {  throw  new  PathIsExploredException( " ");  }  [CE]  not  a  statement  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan)  {  throw  new  PathIsExploredException( " ");  }	  safeThan    <    =    false)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  not  a  statement	92	None	replace
5	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  ih);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  ih);	  throw    new    PathIsExploredException(   "Path    is    less    than    1:   ");    	non-compiled	[CE]  while  expected	102	None	replace
6	[BUG]  [BUGGY]  Throwables.throw  new  PathIsExploredException( "Path  is  less  than  1: ");  [CE]  <identifier>  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  Throwables.throw  new  PathIsExploredException( "Path  is  less  than  1: ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	Throwables.throw  new  PathIsExploredException( "Path  is  less  than  1: ");	  throw    new    PathIsExploredException(   "Path    is    less    than    1:   ");    	non-compiled	[CE]  <identifier>  expected	102	None	replace
7	[BUG]  [BUGGY]  parent  ==  null  ||  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  ih);  }  [CE]  not  a  statement  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  parent  ==  null  ||  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  ih);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	parent  ==  null  ||  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  ih);  }	  parent    ==    null    ||    isMinimize)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    jpt);    }    	non-compiled	[CE]  not  a  statement	105	None	replace
8	[BUG]  [BUGGY]  safeThanOverride();  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThanOverride();  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThanOverride();	  safeThanOverride    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  while  expected	93	None	replace
9	[BUG]  [BUGGY]  throw  new  PathIsExploredException( ".getMessage());  [CE]  unclosed  string  literal  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( ".getMessage());  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( ".getMessage());	  throw    new    PathIsExploredException(   "   ".getMessage());    	non-compiled	[CE]  unclosed  string  literal	56	None	replace
10	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException: "  +  jpt.getMessage());  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException: "  +  jpt.getMessage());  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "PathIsExploredException: "  +  jpt.getMessage());	  throw    new    PathIsExploredException(   "   ".getMessage());    	non-compiled	[CE]  while  expected	56	None	replace
11	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException: "  +  jpt);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException: "  +  jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "PathIsExploredException: "  +  jpt);	  throw    new    PathIsExploredException(   "   ".getMessage());    	non-compiled	[CE]  while  expected	56	None	replace
12	[BUG]  [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(tmp);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(tmp);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(tmp);	  NeighborRealMatrix    <    K,    V>    bMatrix    =    new    NeighborRealMatrix    <    K,    V>(ih);    	non-compiled	[CE]  while  expected	85	None	replace
13	[BUG]  [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(ih  +  1);  [CE]  while  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(ih  +  1);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(ih  +  1);	  NeighborRealMatrix    <    K,    V>    bMatrix    =    new    NeighborRealMatrix    <    K,    V>(ih);    	non-compiled	[CE]  while  expected	85	None	replace
14	[BUG]  [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(jpt,  ih);  [CE]  while  expected  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(jpt,  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(jpt,  ih);	  NeighborRealMatrix    <    K,    V>    bMatrix    =    new    NeighborRealMatrix    <    K,    V>(ih);    	non-compiled	[CE]  while  expected	85	None	replace
15	[BUG]  [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(zMatrix);  [CE]  while  expected  [FE]                          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(zMatrix);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(zMatrix);	  NeighborRealMatrix    <    K,    V>    bMatrix    =    new    NeighborRealMatrix    <    K,    V>(ih);    	non-compiled	[CE]  while  expected	85	None	replace
16	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(tmp));  [CE]  <identifier>  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(tmp));  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(tmp));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
17	[BUG]  [BUGGY]  Throwables.throw  new  PathIsExploredException( " ");  [CE]  <identifier>  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  Throwables.throw  new  PathIsExploredException( " ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	Throwables.throw  new  PathIsExploredException( " ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(recip));  [CE]  <identifier>  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(recip));  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(recip));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
19	[BUG]  [BUGGY]  while(isMinimize)  {  throw  new  PathIsExploredException( " ");  }  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(isMinimize)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(isMinimize)  {  throw  new  PathIsExploredException( " ");  }	  While(isMinimize)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  while  expected	18	None	replace
20	[BUG]  [BUGGY]  while(!isMinimize)  {  throw  new  PathIsExploredException( " ");  }  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(!isMinimize)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(!isMinimize)  {  throw  new  PathIsExploredException( " ");  }	  While(isMinimize)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  while  expected	18	None	replace
21	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  2  *  tmp  [CE]  ')'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  2  *  tmp  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  2  *  tmp	  zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    1)/    tmp    	non-compiled	[CE]  ')'  expected	109	None	replace
22	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  tmp  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  tmp  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  tmp	  zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    1)/    tmp    	non-compiled	[CE]  ')'  expected	109	None	replace
23	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  tmp.getMessage());  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  IllegalStateException( " "  +  tmp.getMessage());  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  IllegalStateException( " "  +  tmp.getMessage());	  throw    new    IllegalStateException(   "   ".equals(tmp));    	non-compiled	[CE]  while  expected	76	None	replace
24	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  fbeg);  [CE]  while  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  fbeg);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  fbeg);	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    fbeg);    	non-compiled	[CE]  while  expected	42	None	replace
25	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  2  *  tmp  [CE]  ')'  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  2  *  tmp  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  2  *  tmp	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    2    *    tmp    	non-compiled	[CE]  ')'  expected	39	None	replace
26	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  2  *  tmp  [CE]  ')'  expected  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  2  *  tmp  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  2  *  tmp	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    2    *    tmp    	non-compiled	[CE]  ')'  expected	39	None	replace
27	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  2  *  tmp  [CE]  ')'  expected  [FE]                          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  2  *  tmp  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  2  *  tmp	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    2    *    tmp    	non-compiled	[CE]  ')'  expected	39	None	replace
28	[BUG]  [BUGGY]  if(isMinimize)  {  parent  ==  null  &&  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }  [CE]  not  a  statement  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize)  {  parent  ==  null  &&  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize)  {  parent  ==  null  &&  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }	  parent    ==    null    &&    isMinimize)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    jpt);    }    	non-compiled	[CE]  not  a  statement	106	None	replace
29	[BUG]  [BUGGY]  zMatrix.setEntry(tmp,  (ih  -  fAtInterpolationPoints.getEntry(ipt)-  f)*  tmp);  [CE]  while  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(tmp,  (ih  -  fAtInterpolationPoints.getEntry(ipt)-  f)*  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(tmp,  (ih  -  fAtInterpolationPoints.getEntry(ipt)-  f)*  tmp);	  zMatrix.setEntry(tmp,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    ih)*    ih);    	non-compiled	[CE]  while  expected	59	None	replace
30	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  ih)*  tmp);  [CE]  while  expected  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  ih)*  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  ih)*  tmp);	  zMatrix.setEntry(tmp,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    ih)*    ih);    	non-compiled	[CE]  while  expected	59	None	replace
31	[BUG]  [BUGGY]  try  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  try  {  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	try  {	  try    {    [Delete]    catch(Throwable    t)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    jpt);    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	11	None	replace
32	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "The  jpt  is  less  than  1: "  +  jpt);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "The  jpt  is  less  than  1: "  +  jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "The  jpt  is  less  than  1: "  +  jpt);	  try    {    [Delete]    catch(Throwable    t)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    jpt);    }    	non-compiled	[CE]  while  expected	11	None	replace
33	[BUG]  [BUGGY]  tryFallThrough(tmp)  {  throw  new  PathIsExploredException( " ");  }  [CE]  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  tryFallThrough(tmp)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	tryFallThrough(tmp)  {  throw  new  PathIsExploredException( " ");  }	  tryFallThrough(jpt)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
34	[BUG]  [BUGGY]  tryFallThrough(tmp)  {  throw  new  PathIsExploredException( " ".getMessage());  }  [CE]  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  tryFallThrough(tmp)  {  throw  new  PathIsExploredException( " ".getMessage());  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	tryFallThrough(tmp)  {  throw  new  PathIsExploredException( " ".getMessage());  }	  tryFallThrough(jpt)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
35	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  tmp)/  tmp);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  tmp)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  tmp)/  tmp);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    fbeg);    	non-compiled	[CE]  while  expected	82	None	replace
36	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    fbeg);    	non-compiled	[CE]  while  expected	82	None	replace
37	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    fbeg);    	non-compiled	[CE]  while  expected	82	None	replace
38	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	add	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	30	1	add
39	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	30	1	add
40	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  f  [CE]  ')'  expected  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  f  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  f	  	non-compiled	[CE]  ')'  expected	30	None	add
41	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fA  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fA  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fA	  	non-compiled	[CE]  ')'  expected	30	None	add
42	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  [CE]  illegal  start  of  expression  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
43	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  ih);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  ih);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  ih);	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(jpt);    	non-compiled	[CE]  while  expected	41	None	replace
44	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  jpt  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  jpt  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  jpt	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (b    -    fAtInterpolationPoints.getEntry(ipt)-    jpt    	non-compiled	[CE]  ')'  expected	111	None	replace
45	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  jp  [CE]  ')'  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  jp  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  jp	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (b    -    fAtInterpolationPoints.getEntry(ipt)-    jpt    	non-compiled	[CE]  ')'  expected	111	None	replace
46	[BUG]  [BUGGY]  vices.add(tmp);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  vices.add(tmp);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	vices.add(tmp);	  vices.add(zMatrix);    	non-compiled	[CE]  while  expected	16	None	replace
47	[BUG]  [BUGGY]  vices.add(zMatrix,  tmp);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  vices.add(zMatrix,  tmp);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	vices.add(zMatrix,  tmp);	  vices.add(zMatrix);    	non-compiled	[CE]  while  expected	16	None	replace
48	[BUG]  [BUGGY]  vices.add(jpt);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  vices.add(jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	vices.add(jpt);	  vices.add(zMatrix);    	non-compiled	[CE]  while  expected	16	None	replace
49	[BUG]  [BUGGY]  safeThan(false)  {  throw  new  PathIsExploredException();  }  [CE]  ';'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan(false)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan(false)  {  throw  new  PathIsExploredException();  }	  safeThan    <    =    false)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  ';'  expected	96	None	replace
50	[BUG]  [BUGGY]  zMatrix.setEntry(tmp,  (ih  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(tmp,  (ih  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(tmp,  (ih  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  zMatrix.setEntry(tmp,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    ih);    	non-compiled	[CE]  while  expected	110	None	replace
51	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  zMatrix.setEntry(tmp,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    ih);    	non-compiled	[CE]  while  expected	110	None	replace
52	[BUG]  [BUGGY]  if(isMinimize  &&  isMaximize)  {  throw  new  PathIsExploredException();  }  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  &&  isMaximize)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  &&  isMaximize)  {  throw  new  PathIsExploredException();  }	  if(isMinimize    ||    isMaximize)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  while  expected	97	None	replace
53	[BUG]  [BUGGY]  if(isMinimize  ||  isMaximize)  {  throw  new  PathIsExploredException( " ");  }  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  ||  isMaximize)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  ||  isMaximize)  {  throw  new  PathIsExploredException( " ");  }	  if(isMinimize    ||    isMaximize)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  while  expected	97	None	replace
54	[BUG]  [BUGGY]  if(isMinimize  &&  isMaximize)  {  throw  new  PathIsExploredException( " ");  }  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  &&  isMaximize)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  &&  isMaximize)  {  throw  new  PathIsExploredException( " ");  }	  if(isMinimize    ||    isMaximize)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  while  expected	97	None	replace
55	[BUG]  [BUGGY]  if(isMinimize)  {  parent!=  null  &&  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }  [CE]  not  a  statement  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize)  {  parent!=  null  &&  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize)  {  parent!=  null  &&  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }	  parent!=    null    &&    isMinimize)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    jpt);    }    	non-compiled	[CE]  not  a  statement	79	None	replace
56	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  jpt);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  jpt);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  jpt);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    jpt);    	non-compiled	[CE]  while  expected	70	None	replace
57	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  jpt);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  jpt);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  jpt);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    jpt);    	non-compiled	[CE]  while  expected	70	None	replace
58	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  dsqCrvmin);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  dsqCrvmin);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  dsqCrvmin);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    jpt);    	non-compiled	[CE]  while  expected	70	None	replace
59	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)/  f)  [CE]  ')'  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)/  f)  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)/  f)	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (jpt    -    fAtInterpolationPoints.getEntry(ipt)+    f)    	non-compiled	[CE]  ')'  expected	47	None	replace
60	[BUG]  [BUGGY]  while(!isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }  [CE]  while  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(!isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(!isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }	  while(isMinimize)    {    throw    new    PathIsExploredException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  while  expected	3	None	replace
61	[BUG]  [BUGGY]  while(true)  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }  [CE]  while  expected  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(true)  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(true)  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }	  while(isMinimize)    {    throw    new    PathIsExploredException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  while  expected	3	None	replace
62	[BUG]  [BUGGY]  while(isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException: "  +  jpt);  }  [CE]  while  expected  [FE]                          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException: "  +  jpt);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException: "  +  jpt);  }	  while(isMinimize)    {    throw    new    PathIsExploredException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  while  expected	3	None	replace
63	[BUG]  [BUGGY]  while(isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException: "  +  ih);  }  [CE]  while  expected  [FE]                            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException: "  +  ih);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException: "  +  ih);  }	  while(isMinimize)    {    throw    new    PathIsExploredException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  while  expected	3	None	replace
64	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	add	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)-        fAtInterpolationPoints.getEntry(jpt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	50	1	add
65	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  tmp);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)-        fAtInterpolationPoints.getEntry(jpt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	50	1	add
66	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	add	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)-        fAtInterpolationPoints.getEntry(jpt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	50	1	add
67	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)-        fAtInterpolationPoints.getEntry(jpt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	50	1	add
68	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  t  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  t  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)-        fAtInterpolationPoints.getEntry(jpt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  t	  	non-compiled	[CE]  ')'  expected	50	None	add
69	[BUG]  [BUGGY]  if(isMinimize)  {  aughtException( "PathIsExploredException ");  }  [CE]  while  expected  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize)  {  aughtException( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize)  {  aughtException( "PathIsExploredException ");  }	  aughtException(   "PathIsExploredException   ");    	non-compiled	[CE]  while  expected	4	None	replace
70	[BUG]  [BUGGY]  if(isMinimize)  {  throw  new  RuntimeException( "PathIsExploredException ");  }  [CE]  while  expected  [FE]                          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize)  {  throw  new  RuntimeException( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize)  {  throw  new  RuntimeException( "PathIsExploredException ");  }	  aughtException(   "PathIsExploredException   ");    	non-compiled	[CE]  while  expected	4	None	replace
71	[BUG]  [BUGGY]  if(isMinimize)  {  aughtException( "PathIsExploredException ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  while  expected  [FE]                            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize)  {  aughtException( "PathIsExploredException ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize)  {  aughtException( "PathIsExploredException ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtException(   "PathIsExploredException   ");    	non-compiled	[CE]  while  expected	4	None	replace
72	[BUG]  [BUGGY]  if(isMinimize)  {  aughtException( "PathIsExploredException ");  }  else  {  throw  new  RuntimeException( " ");  }  [CE]  while  expected  [FE]                              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize)  {  aughtException( "PathIsExploredException ");  }  else  {  throw  new  RuntimeException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize)  {  aughtException( "PathIsExploredException ");  }  else  {  throw  new  RuntimeException( " ");  }	  aughtException(   "PathIsExploredException   ");    	non-compiled	[CE]  while  expected	4	None	replace
73	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [CE]  while  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	31	None	replace
74	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fBeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [CE]  while  expected  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fBeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fBeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	31	None	replace
75	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  tmp)/  tmp);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  tmp)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  tmp)/  tmp);	  zMatrix.setEntry(tmp,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    f)/    ih);    	non-compiled	[CE]  while  expected	123	None	replace
76	[BUG]  [BUGGY]  zMatrix.setEntry(tmp,  (ih  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  tmp);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(tmp,  (ih  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(tmp,  (ih  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  tmp);	  zMatrix.setEntry(tmp,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    f)/    ih);    	non-compiled	[CE]  while  expected	123	None	replace
77	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  tmp)/  tmp);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  tmp)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  tmp)/  tmp);	  zMatrix.setEntry(tmp,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    f)/    ih);    	non-compiled	[CE]  while  expected	123	None	replace
78	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  tmp.equalsIgnoreCase(ih));  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  IllegalStateException( " "  +  tmp.equalsIgnoreCase(ih));  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  IllegalStateException( " "  +  tmp.equalsIgnoreCase(ih));	  throw    new    IllegalStateException(   "   ".equalsIgnoreCase(tmp));    	non-compiled	[CE]  while  expected	77	None	replace
79	[BUG]  [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( " ",  jpt);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( " ",  jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( " ",  jpt);	  MutablePathIsExploredException    ih    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	113	None	replace
80	[BUG]  [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.lowerBound ",  jpt);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.lowerBound ",  jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.lowerBound ",  jpt);	  MutablePathIsExploredException    ih    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	113	None	replace
81	[BUG]  [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.lowerBound ",  tmp);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.lowerBound ",  tmp);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.lowerBound ",  tmp);	  MutablePathIsExploredException    ih    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	113	None	replace
82	[BUG]  [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.lowerBound ");  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.lowerBound ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.lowerBound ");	  MutablePathIsExploredException    ih    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	113	None	replace
83	[BUG]  [BUGGY]  aughtException( "Path  is  less  than  1: "  +  ih);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  aughtException( "Path  is  less  than  1: "  +  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	aughtException( "Path  is  less  than  1: "  +  ih);	  aughtException(   "Path    is    less    than    1:   "    +    jpt);    	non-compiled	[CE]  while  expected	12	None	replace
84	[BUG]  [BUGGY]  aughtException( "Path  is  less  than  1: "  +  tmp,  ih);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  aughtException( "Path  is  less  than  1: "  +  tmp,  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	aughtException( "Path  is  less  than  1: "  +  tmp,  ih);	  aughtException(   "Path    is    less    than    1:   "    +    tmp);    	non-compiled	[CE]  while  expected	61	None	replace
85	[BUG]  [BUGGY]  aughtException( "Path  is  less  than  1: "  +  tmp,  jpt);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  aughtException( "Path  is  less  than  1: "  +  tmp,  jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	aughtException( "Path  is  less  than  1: "  +  tmp,  jpt);	  aughtException(   "Path    is    less    than    1:   "    +    tmp);    	non-compiled	[CE]  while  expected	61	None	replace
86	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  nfm);  [CE]  while  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  nfm);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  nfm);	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	51	None	replace
87	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fb  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [CE]  while  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fb  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fb  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fb    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	88	None	replace
88	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (b  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (b  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (b  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fb    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	88	None	replace
89	[BUG]  [BUGGY]  while(!isMinimize)  {  try  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(!isMinimize)  {  try  {  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(!isMinimize)  {  try  {	  try    {    [Delete]    finally    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	114	None	replace
90	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  tmp.getMessage());  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  tmp.getMessage());  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  IllegalArgumentException( " "  +  tmp.getMessage());	  throw    new    IllegalArgumentException(   "   ".equalsIgnoreCase(tmp));    	non-compiled	[CE]  while  expected	100	None	replace
91	[BUG]  [BUGGY]  tryFallThrough(tmp)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  ih);  }  [CE]  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  tryFallThrough(tmp)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  ih);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	tryFallThrough(tmp)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  ih);  }	  tryFallThrough(jpt)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    ih);    }    	non-compiled	[CE]  	13	None	replace
92	[BUG]  [BUGGY]  tryFallThrough(zMatrix)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  ih);  }  [CE]  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  tryFallThrough(zMatrix)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  ih);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	tryFallThrough(zMatrix)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  ih);  }	  tryFallThrough(jpt)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    ih);    }    	non-compiled	[CE]  	13	None	replace
93	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp  [CE]  ')'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(ipt)+    1)/    tmp    	non-compiled	[CE]  ')'  expected	101	None	replace
94	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  f  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  f  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  f	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(ipt)+    1)/    tmp    	non-compiled	[CE]  ')'  expected	101	None	replace
95	[BUG]  [BUGGY]  if(isMinimize  &&  lowerBound  <  upperBound)  {  throw  new  PathIsExploredException( " ");  }  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  &&  lowerBound  <  upperBound)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  &&  lowerBound  <  upperBound)  {  throw  new  PathIsExploredException( " ");  }	  if(isMinimize    &&    lowerBound    <    =    upperBound)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  while  expected	118	None	replace
96	[BUG]  [BUGGY]  if(isMinimize  &&  lowerBound  ==  upperBound)  {  throw  new  PathIsExploredException();  }  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  &&  lowerBound  ==  upperBound)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  &&  lowerBound  ==  upperBound)  {  throw  new  PathIsExploredException();  }	  if(isMinimize    &&    lowerBound    <    =    upperBound)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  while  expected	118	None	replace
97	[BUG]  [BUGGY]  if(isMinimize  &&  lowerBound  >=  upperBound)  {  throw  new  PathIsExploredException();  }  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  &&  lowerBound  >=  upperBound)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  &&  lowerBound  >=  upperBound)  {  throw  new  PathIsExploredException();  }	  if(isMinimize    &&    lowerBound    <    =    upperBound)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  while  expected	118	None	replace
98	[BUG]  [BUGGY]  if(isMinimize  &&  upperBound  <  =  lowerBound)  {  throw  new  PathIsExploredException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  &&  upperBound  <  =  lowerBound)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  &&  upperBound  <  =  lowerBound)  {  throw  new  PathIsExploredException( " ");  }	  if(isMinimize    &&    lowerBound    <    =    upperBound)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
99	[BUG]  [BUGGY]  aughtException( "msg.bad.interpolation.lowerBound.infinity. ");  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  aughtException( "msg.bad.interpolation.lowerBound.infinity. ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	aughtException( "msg.bad.interpolation.lowerBound.infinity. ");	  if(isMinimize)    {    throw    new    PathIsExploredException(   "msg.bad.interpolation.lowerBound.infinity.   ");    }    	non-compiled	[CE]  while  expected	17	None	replace
100	[BUG]  [BUGGY]  bucketIsExploredException( "msg.bad.interpolation.lowerBound.infinity. ");  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  bucketIsExploredException( "msg.bad.interpolation.lowerBound.infinity. ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	bucketIsExploredException( "msg.bad.interpolation.lowerBound.infinity. ");	  if(isMinimize)    {    throw    new    PathIsExploredException(   "msg.bad.interpolation.lowerBound.infinity.   ");    }    	non-compiled	[CE]  while  expected	17	None	replace
101	[BUG]  [BUGGY]  aughtException( "msg.bad.interpolation.lowerBound.infinity.js ");  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  aughtException( "msg.bad.interpolation.lowerBound.infinity.js ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	aughtException( "msg.bad.interpolation.lowerBound.infinity.js ");	  if(isMinimize)    {    throw    new    PathIsExploredException(   "msg.bad.interpolation.lowerBound.infinity.   ");    }    	non-compiled	[CE]  while  expected	17	None	replace
102	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [CE]  while  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);	  zMatrix.setEntry(ih,    jpt,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	73	None	replace
103	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp);	  zMatrix.setEntry(ih,    jpt,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	73	None	replace
104	[BUG]  [BUGGY]  bucketIsExploredException( "msg.bad.interpolation.lowerBound ",  ih);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  bucketIsExploredException( "msg.bad.interpolation.lowerBound ",  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	bucketIsExploredException( "msg.bad.interpolation.lowerBound ",  ih);	  if(isMinimize)    {    throw    new    PathIsExploredException(   "msg.bad.interpolation.lowerBound   ",    ih);    }    	non-compiled	[CE]  while  expected	15	None	replace
105	[BUG]  [BUGGY]  bucketIsExploredException( "msg.bad.interpolation.lowerBound "  +  ih);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  bucketIsExploredException( "msg.bad.interpolation.lowerBound "  +  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	bucketIsExploredException( "msg.bad.interpolation.lowerBound "  +  ih);	  if(isMinimize)    {    throw    new    PathIsExploredException(   "msg.bad.interpolation.lowerBound   ",    ih);    }    	non-compiled	[CE]  while  expected	15	None	replace
106	[BUG]  [BUGGY]  aughtException( "msg.bad.interpolation.lowerBound ",  ih);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  aughtException( "msg.bad.interpolation.lowerBound ",  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	aughtException( "msg.bad.interpolation.lowerBound ",  ih);	  if(isMinimize)    {    throw    new    PathIsExploredException(   "msg.bad.interpolation.lowerBound   ",    ih);    }    	non-compiled	[CE]  while  expected	15	None	replace
107	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  (ih  -  fAtInterpolationPoints.getEntry(ipt)-  f);  [CE]  ')'  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  (ih  -  fAtInterpolationPoints.getEntry(ipt)-  f);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  (ih  -  fAtInterpolationPoints.getEntry(ipt)-  f);	  zMatrix.setEntry(jpt,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    f);    	non-compiled	[CE]  ')'  expected	29	None	replace
108	[BUG]  [BUGGY]  zMatrix.setEntry(ipt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f);  [CE]  ')'  expected  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ipt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ipt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f);	  zMatrix.setEntry(jpt,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    f);    	non-compiled	[CE]  ')'  expected	29	None	replace
109	[BUG]  [BUGGY]  zMatrix.setEntry(i,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f);  [CE]  ')'  expected  [FE]                          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(i,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(i,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f);	  zMatrix.setEntry(jpt,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    f);    	non-compiled	[CE]  ')'  expected	29	None	replace
110	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  t  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  t  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  t	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    t    	non-compiled	[CE]  ')'  expected	53	None	replace
111	[BUG]  [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( " ",  jpt);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( " ",  jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( " ",  jpt);	  MutablePathIsExploredException    tmp    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	112	None	replace
112	[BUG]  [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.bad.interpolation.lowerBound ",  ih);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.bad.interpolation.lowerBound ",  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.bad.interpolation.lowerBound ",  ih);	  MutablePathIsExploredException    tmp    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	112	None	replace
113	[BUG]  [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.bad.interpolation.lowerBound ");  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.bad.interpolation.lowerBound ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.bad.interpolation.lowerBound ");	  MutablePathIsExploredException    tmp    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	112	None	replace
114	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)*  tmp);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)*  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)*  tmp);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    jpt)*    tmp);    	non-compiled	[CE]  while  expected	57	None	replace
115	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ih)-  jpt)*  ih);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ih)-  jpt)*  ih);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ih)-  jpt)*  ih);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    jpt)*    tmp);    	non-compiled	[CE]  while  expected	57	None	replace
116	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  ih)/  tmp);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  ih)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  ih)/  tmp);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    jpt)/    tmp);    	non-compiled	[CE]  while  expected	66	None	replace
117	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (feg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [CE]  while  expected  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (feg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (feg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (feg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	107	None	replace
118	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  (fb  -  fAtInterpolationPoints.getEntry(ih)-  jpt)*  ih);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  (fb  -  fAtInterpolationPoints.getEntry(ih)-  jpt)*  ih);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  (fb  -  fAtInterpolationPoints.getEntry(ih)-  jpt)*  ih);	  zMatrix.setEntry(ih,    (fb    -    fAtInterpolationPoints.getEntry(ipt)-    jpt)*    tmp);    	non-compiled	[CE]  while  expected	78	None	replace
119	[BUG]  [BUGGY]  tryFallThrough(tmp)  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }  [CE]  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  tryFallThrough(tmp)  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	tryFallThrough(tmp)  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }	  tryFallThrough(jpt)    {    throw    new    PathIsExploredException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  	2	None	replace
120	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException ");  [CE]  while  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "PathIsExploredException ");	  tryFallThrough(jpt)    {    throw    new    PathIsExploredException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  while  expected	2	None	replace
121	[BUG]  [BUGGY]  tryFallThrough(tmp)  {  throw  new  PathIsExploredException( "PathIsExploredException: "  +  ih);  }  [CE]  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  tryFallThrough(tmp)  {  throw  new  PathIsExploredException( "PathIsExploredException: "  +  ih);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	tryFallThrough(tmp)  {  throw  new  PathIsExploredException( "PathIsExploredException: "  +  ih);  }	  tryFallThrough(jpt)    {    throw    new    PathIsExploredException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  	2	None	replace
122	[BUG]  [BUGGY]  tryFallThrough(jpt)  {  throw  new  PathIsExploredException( "PathIsExploredException: "  +  ih);  }  [CE]  [FE]                          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  tryFallThrough(jpt)  {  throw  new  PathIsExploredException( "PathIsExploredException: "  +  ih);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	tryFallThrough(jpt)  {  throw  new  PathIsExploredException( "PathIsExploredException: "  +  ih);  }	  tryFallThrough(jpt)    {    throw    new    PathIsExploredException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  	2	None	replace
123	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  tmp  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  tmp  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  tmp	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    1)/    tmp    	non-compiled	[CE]  ')'  expected	37	None	replace
124	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  2  *  tmp  [CE]  ')'  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  2  *  tmp  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  2  *  tmp	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    1)/    tmp    	non-compiled	[CE]  ')'  expected	37	None	replace
125	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  f  [CE]  ')'  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  f  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  f	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    1)/    tmp    	non-compiled	[CE]  ')'  expected	37	None	replace
126	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)*  tmp);  [CE]  while  expected  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)*  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)*  tmp);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    f)*    f);    	non-compiled	[CE]  while  expected	60	None	replace
127	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  tmp)*  tmp);  [CE]  while  expected  [FE]                          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  tmp)*  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  tmp)*  tmp);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    f)*    f);    	non-compiled	[CE]  while  expected	60	None	replace
128	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)*  tmp);  [CE]  while  expected  [FE]                            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)*  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)*  tmp);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    f)*    f);    	non-compiled	[CE]  while  expected	60	None	replace
129	[BUG]  [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(zMatrix.length);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(zMatrix.length);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(zMatrix.length);	  NeighborRealMatrix    <    K,    V>    bMatrix    =    new    NeighborRealMatrix    <    K,    V>();    	non-compiled	[CE]  while  expected	80	None	replace
130	[BUG]  [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(1);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(1);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(1);	  NeighborRealMatrix    <    K,    V>    bMatrix    =    new    NeighborRealMatrix    <    K,    V>();    	non-compiled	[CE]  while  expected	80	None	replace
131	[BUG]  [BUGGY]  tryFallThrough(tmp)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }  [CE]  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  tryFallThrough(tmp)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	tryFallThrough(tmp)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }	  tryFallThrough(jpt)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    jpt);    }    	non-compiled	[CE]  	14	None	replace
132	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  f);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  f);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  f);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    jpt);    	non-compiled	[CE]  while  expected	65	None	replace
133	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  ih);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  ih);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  ih);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    jpt);    	non-compiled	[CE]  while  expected	65	None	replace
134	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  tmp)/  jpt);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  tmp)/  jpt);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  tmp)/  jpt);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    jpt);    	non-compiled	[CE]  while  expected	65	None	replace
135	[BUG]  [BUGGY]  if(isMinimize)  {  tryFallThrough(zMatrix)  {  throw  new  PathIsExploredException( " ");  }  [CE]  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize)  {  tryFallThrough(zMatrix)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize)  {  tryFallThrough(zMatrix)  {  throw  new  PathIsExploredException( " ");  }	  tryFallThrough(zMatrix)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  	21	None	replace
136	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (jpt    -    fAtInterpolationPoints.getEntry(ipt)-    f    	non-compiled	[CE]  ')'  expected	7	None	replace
137	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2);  [CE]  while  expected  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    2);    	non-compiled	[CE]  while  expected	68	None	replace
138	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [CE]  while  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    2);    	non-compiled	[CE]  while  expected	68	None	replace
139	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    2);    	non-compiled	[CE]  while  expected	68	None	replace
140	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  jpt,  fbeg);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  jpt,  fbeg);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  jpt,  fbeg);	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    jpt);    	non-compiled	[CE]  while  expected	40	None	replace
141	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  jpt,  f);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  jpt,  f);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  jpt,  f);	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    jpt);    	non-compiled	[CE]  while  expected	40	None	replace
142	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  jpt  +  1);  [CE]  while  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  jpt  +  1);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  jpt  +  1);	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    jpt);    	non-compiled	[CE]  while  expected	40	None	replace
143	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  ih);  [CE]  ')'  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  ih);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  ih);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    jpt);    	non-compiled	[CE]  ')'  expected	28	None	replace
144	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt);  [CE]  ')'  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    jpt);    	non-compiled	[CE]  ')'  expected	28	None	replace
145	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException: "  +  ih);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException: "  +  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "PathIsExploredException: "  +  ih);	  throw    new    PathIsExploredException(   "   ",    ih);    	non-compiled	[CE]  while  expected	99	None	replace
146	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException: ",  ih);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException: ",  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "PathIsExploredException: ",  ih);	  throw    new    PathIsExploredException(   "   ",    ih);    	non-compiled	[CE]  while  expected	99	None	replace
147	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)/  tmp);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)/  tmp);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    f)/    fbeg);    	non-compiled	[CE]  while  expected	91	None	replace
148	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)/  f);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)/  f);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)/  f);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    f)/    fbeg);    	non-compiled	[CE]  while  expected	91	None	replace
149	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)/  jpt);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)/  jpt);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)/  jpt);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    f)/    fbeg);    	non-compiled	[CE]  while  expected	91	None	replace
150	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (ih  -  fAtInterpolationPoints.getEntry(ipt)+  f)  [CE]  ')'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (ih  -  fAtInterpolationPoints.getEntry(ipt)+  f)  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (ih  -  fAtInterpolationPoints.getEntry(ipt)+  f)	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(jpt,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)    	non-compiled	[CE]  ')'  expected	49	None	replace
151	[BUG]  [BUGGY]  if(!isMinimize)  {  throw  new  PathIsExploredException(zMatrix);  }  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(!isMinimize)  {  throw  new  PathIsExploredException(zMatrix);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(!isMinimize)  {  throw  new  PathIsExploredException(zMatrix);  }	  if(isMinimize)    {    throw    new    PathIsExploredException(zMatrix);    }    	non-compiled	[CE]  while  expected	98	None	replace
152	[BUG]  [BUGGY]  if(isMinimize)  {  throw  new  PathIsExploredException( "Matrix  is  less  than  1: "  +  jpt);  }  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize)  {  throw  new  PathIsExploredException( "Matrix  is  less  than  1: "  +  jpt);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize)  {  throw  new  PathIsExploredException( "Matrix  is  less  than  1: "  +  jpt);  }	  if(isMinimize)    {    throw    new    PathIsExploredException(zMatrix);    }    	non-compiled	[CE]  while  expected	98	None	replace
153	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  modelSecondDerivatives  [CE]  ')'  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  modelSecondDerivatives  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  modelSecondDerivatives	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    dsqCrvmin);    	non-compiled	[CE]  ')'  expected	52	None	replace
154	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	add	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    *    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	33	1	add
155	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    *    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	33	1	add
156	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  f  [CE]  ')'  expected  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  f  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    *    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  f	  	non-compiled	[CE]  ')'  expected	33	None	add
157	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fA  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fA  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    *    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fA	  	non-compiled	[CE]  ')'  expected	33	None	add
158	[BUG]  [BUGGY]  throw  new  PathIsExploredException( " ".equals(tmp));  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( " ".equals(tmp));  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( " ".equals(tmp));	  throw    new    IllegalArgumentException(   "   ".equals(tmp));    	non-compiled	[CE]  while  expected	6	None	replace
159	[BUG]  [BUGGY]  if(!isMinimize)  {  throw  new  PathIsExploredException( " ");  }  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(!isMinimize)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(!isMinimize)  {  throw  new  PathIsExploredException( " ");  }	  if(!isMinimize)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  while  expected	119	None	replace
160	[BUG]  [BUGGY]  if(!isMinimize)  {  throw  new  PathIsExploredException( "Must  be  less  than  1: "  +  ih);  }  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(!isMinimize)  {  throw  new  PathIsExploredException( "Must  be  less  than  1: "  +  ih);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(!isMinimize)  {  throw  new  PathIsExploredException( "Must  be  less  than  1: "  +  ih);  }	  if(!isMinimize)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  while  expected	119	None	replace
161	[BUG]  [BUGGY]  safeThanOverride  <  false)  {  throw  new  PathIsExploredException( " ");  }  [CE]  illegal  start  of  type  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThanOverride  <  false)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThanOverride  <  false)  {  throw  new  PathIsExploredException( " ");  }	  safeThanOverride    <    =    false)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
162	[BUG]  [BUGGY]  safeThanOverride  <  =  true)  {  throw  new  PathIsExploredException( " ");  }  [CE]  illegal  start  of  type  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThanOverride  <  =  true)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThanOverride  <  =  true)  {  throw  new  PathIsExploredException( " ");  }	  safeThanOverride    <    =    false)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
163	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)/  tmp);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)/  tmp);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    jpt)/    tmp);    	non-compiled	[CE]  while  expected	23	None	replace
164	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)/  DEFAULT_IN);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)/  DEFAULT_IN);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)/  DEFAULT_IN);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    jpt)/    tmp);    	non-compiled	[CE]  while  expected	23	None	replace
165	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt,  ih);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt,  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt,  ih);	  throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    jpt);    	non-compiled	[CE]  while  expected	104	None	replace
166	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  modelSecondDerivativesValues);  [CE]  while  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  modelSecondDerivativesValues);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  modelSecondDerivativesValues);	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    dsqCrvmin);    	non-compiled	[CE]  while  expected	32	None	replace
167	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  nfm);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  nfm);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  nfm);	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    dsqCrvmin);    	non-compiled	[CE]  while  expected	32	None	replace
168	[BUG]  [BUGGY]  if(isMinimize  &&  lowerBound  >=  upperBound)  {  throw  new  PathIsExploredException( " ");  }  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  &&  lowerBound  >=  upperBound)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  &&  lowerBound  >=  upperBound)  {  throw  new  PathIsExploredException( " ");  }	  if(isMinimize    &&    lowerBound    <    =    upperBound)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  while  expected	120	None	replace
169	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  tmp)/  tmp);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  tmp)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  tmp)/  tmp);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    f)/    f);    	non-compiled	[CE]  while  expected	24	None	replace
170	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  tmp,  ih);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  tmp,  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  tmp,  ih);	  throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    tmp);    	non-compiled	[CE]  while  expected	103	None	replace
171	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (bMatrix  -  fAtInterpolationPoints.getEntry(ipt)-  tmp);  [CE]  ')'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (bMatrix  -  fAtInterpolationPoints.getEntry(ipt)-  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (bMatrix  -  fAtInterpolationPoints.getEntry(ipt)-  tmp);	  zMatrix.setEntry(ih,    (bMatrix    -    fAtInterpolationPoints.getEntry(ipt)-    f);    	non-compiled	[CE]  ')'  expected	74	None	replace
172	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (bMatrix  -  fAtInterpolationPoints.getEntry(ipt)-  jpt);  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (bMatrix  -  fAtInterpolationPoints.getEntry(ipt)-  jpt);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (bMatrix  -  fAtInterpolationPoints.getEntry(ipt)-  jpt);	  zMatrix.setEntry(ih,    (bMatrix    -    fAtInterpolationPoints.getEntry(ipt)-    f);    	non-compiled	[CE]  ')'  expected	74	None	replace
173	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	add	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    +    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	86	1	add
174	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    +    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	86	1	add
175	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	add	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    +    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	86	1	add
176	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    +    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	86	1	add
177	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  +  f  [CE]  ')'  expected  [FE]        BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  +  f  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    +    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  +  f	  	non-compiled	[CE]  ')'  expected	86	None	add
178	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  +  fA  [CE]  ')'  expected  [FE]          BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  +  fA  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    +    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  +  fA	  	non-compiled	[CE]  ')'  expected	86	None	add
179	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  (feg  -  fAtInterpolationPoints.getEntry(ih)-  jpt)*  ih);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  (feg  -  fAtInterpolationPoints.getEntry(ih)-  jpt)*  ih);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  (feg  -  fAtInterpolationPoints.getEntry(ih)-  jpt)*  ih);	  zMatrix.setEntry(ih,    (feg    -    fAtInterpolationPoints.getEntry(ipt)-    jpt)*    tmp);    	non-compiled	[CE]  while  expected	108	None	replace
180	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)*  f);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)*  f);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)*  f);	  zMatrix.setEntry(ih,    (feg    -    fAtInterpolationPoints.getEntry(ipt)-    jpt)*    tmp);    	non-compiled	[CE]  while  expected	108	None	replace
181	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp  [CE]  ')'  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp	  zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(ipt)+    1)/    tmp    	non-compiled	[CE]  ')'  expected	38	None	replace
182	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp  [CE]  ')'  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp	  zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(ipt)+    1)/    tmp    	non-compiled	[CE]  ')'  expected	38	None	replace
183	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  2)/  tmp  [CE]  ')'  expected  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  2)/  tmp  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  2)/  tmp	  zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(ipt)+    1)/    tmp    	non-compiled	[CE]  ')'  expected	38	None	replace
184	[BUG]  [BUGGY]  tryFallThrough(zMatrix)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  tmp);  }  [CE]  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  tryFallThrough(zMatrix)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  tmp);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	tryFallThrough(zMatrix)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  tmp);  }	  tryFallThrough(jpt)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    tmp);    }    	non-compiled	[CE]  	62	None	replace
185	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(tmp));  [CE]  <identifier>  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(tmp));  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(tmp));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	44	None	replace
186	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(recip));  [CE]  <identifier>  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(recip));  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(recip));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	44	None	replace
187	[BUG]  [BUGGY]  While(!isMinimize)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  While(!isMinimize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	While(!isMinimize)  {  throw  new  IllegalStateException( " ");  }	  if(!isMinimize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
188	[BUG]  [BUGGY]  while(!isMinimize)  {  throw  new  IllegalStateException( " ");  }  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(!isMinimize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(!isMinimize)  {  throw  new  IllegalStateException( " ");  }	  if(!isMinimize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  while  expected	43	None	replace
189	[BUG]  [BUGGY]  While(isMinimize)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  While(isMinimize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	While(isMinimize)  {  throw  new  IllegalStateException( " ");  }	  if(!isMinimize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
190	[BUG]  [BUGGY]  While(!isMinimize)  {  throw  new  IllegalStateException( " ".equals(ih));  }  [CE]  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  While(!isMinimize)  {  throw  new  IllegalStateException( " ".equals(ih));  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	While(!isMinimize)  {  throw  new  IllegalStateException( " ".equals(ih));  }	  if(!isMinimize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
191	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (ih  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  [CE]  illegal  start  of  expression  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (ih  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (ih  -  fAtInterpolationPoints.getEntry(ipt)+  f)/	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(jpt,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
192	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [CE]  while  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    +    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	87	None	replace
193	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [CE]  while  expected  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    +    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	87	None	replace
194	[BUG]  [BUGGY]  safeThan  <  1)  {  throw  new  PathIsExploredException( " ");  }  [CE]  illegal  start  of  type  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan  <  1)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan  <  1)  {  throw  new  PathIsExploredException( " ");  }	  safeThan    <    =    1)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
195	[BUG]  [BUGGY]  safeThan  =  1)  {  throw  new  PathIsExploredException( " ");  }  [CE]  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan  =  1)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan  =  1)  {  throw  new  PathIsExploredException( " ");  }	  safeThan    <    =    1)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  	95	None	replace
196	[BUG]  [BUGGY]  safeThan  ==  1)  {  throw  new  PathIsExploredException( " ");  }  [CE]  not  a  statement  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan  ==  1)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan  ==  1)  {  throw  new  PathIsExploredException( " ");  }	  safeThan    <    =    1)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  not  a  statement	95	None	replace
197	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException ");  }  [CE]  constructor  PathIsExploredException  in  class  PathIsExploredException  cannot  be  applied  to  given  types;  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "PathIsExploredException ");  }	  aughtException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  constructor  PathIsExploredException  in  class  PathIsExploredException  cannot  be  applied  to  given  types;	122	None	replace
198	[BUG]  [BUGGY]  throw  new  RuntimeException( "PathIsExploredException ");  [CE]  while  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  RuntimeException( "PathIsExploredException ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  RuntimeException( "PathIsExploredException ");	  aughtException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  while  expected	122	None	replace
199	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  RuntimeException( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	add	throw  new  RuntimeException( "PathIsExploredException ");  }	  aughtException(   "PathIsExploredException   ");    }    	compilable	  [FE]  RuntimeException  	122	1	replace
200	[BUG]  [BUGGY]  throw  new  RuntimeException( "PathIsExploredException ");  }  [FE]  RuntimeException  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  RuntimeException( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  RuntimeException( "PathIsExploredException ");  }	  aughtException(   "PathIsExploredException   ");    }    	compilable	  [FE]  RuntimeException  	122	1	replace
201	[BUG]  [BUGGY]  throw  new  PathIsExploredException( " ",  jpt,  ih);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( " ",  jpt,  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( " ",  jpt,  ih);	  throw    new    PathIsExploredException(   "   ",    jpt);    	non-compiled	[CE]  while  expected	55	None	replace
202	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  dsq  [CE]  ')'  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  dsq  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  dsq	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    dsqCrv    	non-compiled	[CE]  ')'  expected	54	None	replace
203	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  dsqCrv  [CE]  ')'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  dsqCrv  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  dsqCrv	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    dsqCrv    	non-compiled	[CE]  ')'  expected	54	None	replace
204	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  ds  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  ds  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  ds	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    dsqCrv    	non-compiled	[CE]  ')'  expected	54	None	replace
205	[BUG]  [BUGGY]  NeighborRealMatrix  <  K,  V>  zMatrix  =  new  NeighborRealMatrix  <  K,  V>(0);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  K,  V>  zMatrix  =  new  NeighborRealMatrix  <  K,  V>(0);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  K,  V>  zMatrix  =  new  NeighborRealMatrix  <  K,  V>(0);	  NeighborRealMatrix    <    K,    V>    zMatrix    =    new    NeighborRealMatrix    <    K,    V>();    	non-compiled	[CE]  while  expected	84	None	replace
206	[BUG]  [BUGGY]  NeighborRealMatrix  <  K,  V>  zMatrix  =  new  NeighborRealMatrix  <  K,  V>(1);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  K,  V>  zMatrix  =  new  NeighborRealMatrix  <  K,  V>(1);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  K,  V>  zMatrix  =  new  NeighborRealMatrix  <  K,  V>(1);	  NeighborRealMatrix    <    K,    V>    zMatrix    =    new    NeighborRealMatrix    <    K,    V>();    	non-compiled	[CE]  while  expected	84	None	replace
207	[BUG]  [BUGGY]  NeighborRealMatrix  <  K,  V>  zMatrix  =  new  NeighborRealMatrix  <  K,  V>(2);  [CE]  while  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  K,  V>  zMatrix  =  new  NeighborRealMatrix  <  K,  V>(2);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  K,  V>  zMatrix  =  new  NeighborRealMatrix  <  K,  V>(2);	  NeighborRealMatrix    <    K,    V>    zMatrix    =    new    NeighborRealMatrix    <    K,    V>();    	non-compiled	[CE]  while  expected	84	None	replace
208	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (ipt  -  fAtInterpolationPoints.getEntry(ipt)-  f  [CE]  ')'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (ipt  -  fAtInterpolationPoints.getEntry(ipt)-  f  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (ipt  -  fAtInterpolationPoints.getEntry(ipt)-  f	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (ipt    -    fAtInterpolationPoints.getEntry(ipt)-    f    	non-compiled	[CE]  ')'  expected	9	None	replace
209	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  tmp);  [CE]  ')'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  tmp);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    f);    	non-compiled	[CE]  ')'  expected	26	None	replace
210	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  (tmp  -  fAtInterpolationPoints.getEntry(ih)-  f);  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  (tmp  -  fAtInterpolationPoints.getEntry(ih)-  f);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  (tmp  -  fAtInterpolationPoints.getEntry(ih)-  f);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    f);    	non-compiled	[CE]  ')'  expected	26	None	replace
211	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fb  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [CE]  while  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fb  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fb  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    *    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	34	None	replace
212	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [CE]  while  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	69	None	replace
213	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  f);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  f);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  f);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	69	None	replace
214	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (f  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (f  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (f  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (Fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	35	None	replace
215	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (Fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (Fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (Fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (Fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	35	None	replace
216	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)*  jpt);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)*  jpt);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)*  jpt);	  zMatrix.setEntry(ih,    (jpt    -    fAtInterpolationPoints.getEntry(ipt)-    f)*    tmp);    	non-compiled	[CE]  while  expected	58	None	replace
217	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [CE]  while  expected  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    2);    	non-compiled	[CE]  while  expected	72	None	replace
218	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (bMatrix  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [CE]  while  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (bMatrix  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (bMatrix  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    2);    	non-compiled	[CE]  while  expected	72	None	replace
219	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2);	  zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    2);    	non-compiled	[CE]  while  expected	71	None	replace
220	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (feg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (feg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (feg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2);	  zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    2);    	non-compiled	[CE]  while  expected	71	None	replace
221	[BUG]  [BUGGY]  tryFallThrough(zMatrix,  jpt)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  tmp);  }  [CE]  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  tryFallThrough(zMatrix,  jpt)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  tmp);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	tryFallThrough(zMatrix,  jpt)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  tmp);  }	  tryFallThrough(zMatrix,    ih)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    tmp);    }    	non-compiled	[CE]  	63	None	replace
222	[BUG]  [BUGGY]  tryFallThrough(zMatrix,  ih)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }  [CE]  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  tryFallThrough(zMatrix,  ih)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	tryFallThrough(zMatrix,  ih)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }	  tryFallThrough(zMatrix,    ih)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    tmp);    }    	non-compiled	[CE]  	63	None	replace
223	[BUG]  [BUGGY]  tryFallThrough(jpt,  ih)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  tmp);  }  [CE]  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  tryFallThrough(jpt,  ih)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  tmp);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	tryFallThrough(jpt,  ih)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  tmp);  }	  tryFallThrough(zMatrix,    ih)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    tmp);    }    	non-compiled	[CE]  	63	None	replace
224	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)  [CE]  ')'  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (ipt    -    fAtInterpolationPoints.getEntry(ipt)+    f)    	non-compiled	[CE]  ')'  expected	48	None	replace
225	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)/  jpt  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)/  jpt  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)/  jpt	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    jpt    	non-compiled	[CE]  ')'  expected	10	None	replace
226	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  1)/  tmp);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  1)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  1)/  tmp);	  zMatrix.setEntry(ih,    (jpt    -    fAtInterpolationPoints.getEntry(ipt)-    f)/    tmp);    	non-compiled	[CE]  while  expected	22	None	replace
227	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp  [CE]  ')'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp    	non-compiled	[CE]  ')'  expected	36	None	replace
228	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  fbeg  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  fbeg  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  fbeg	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp    	non-compiled	[CE]  ')'  expected	36	None	replace
229	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  fAtInterpolationPoints  [CE]  ')'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  fAtInterpolationPoints  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  fAtInterpolationPoints	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp    	non-compiled	[CE]  ')'  expected	36	None	replace
230	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  fAtInterpolationPoints  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  fAtInterpolationPoints  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  fAtInterpolationPoints	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp    	non-compiled	[CE]  ')'  expected	36	None	replace
231	[BUG]  [BUGGY]  Parent  ==  null  ||  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }  [CE]  not  a  statement  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  Parent  ==  null  ||  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	Parent  ==  null  ||  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }	  parent    ==    null    ||    isMinimize)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    jpt);    }    	non-compiled	[CE]  not  a  statement	105	None	replace
232	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  fAtInterpolationPoints  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  fAtInterpolationPoints  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  fAtInterpolationPoints	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    1)/    tmp    	non-compiled	[CE]  ')'  expected	37	None	replace
233	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  fAtInterpolationPoints.getEntry(  [CE]  illegal  start  of  expression  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  fAtInterpolationPoints.getEntry(  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  1)/  fAtInterpolationPoints.getEntry(	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    1)/    tmp    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
234	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ipt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)  [CE]  ')'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ipt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ipt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(jpt,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)    	non-compiled	[CE]  ')'  expected	49	None	replace
235	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  modelSecondDerivative  [CE]  ')'  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  modelSecondDerivative  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  modelSecondDerivative	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    dsqCrvmin);    	non-compiled	[CE]  ')'  expected	52	None	replace
236	[BUG]  [BUGGY]  boolean  isMinimize  =  isMinimize  ||  isMaximize)  {  throw  new  PathIsExploredException();  }  [CE]  ';'  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  boolean  isMinimize  =  isMinimize  ||  isMaximize)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	boolean  isMinimize  =  isMinimize  ||  isMaximize)  {  throw  new  PathIsExploredException();  }	  if(isMinimize    ||    isMaximize)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  ';'  expected	97	None	replace
237	[BUG]  [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "n ");  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "n ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "n ");	  MutablePathIsExploredException    ih    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	113	None	replace
238	[BUG]  [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "u000 ");  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "u000 ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "u000 ");	  MutablePathIsExploredException    ih    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	113	None	replace
239	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (bbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f);  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (bbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (bbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f);	  zMatrix.setEntry(ih,    (jpt    -    fAtInterpolationPoints.getEntry(ipt)-    f);    	non-compiled	[CE]  ')'  expected	27	None	replace
240	[BUG]  [BUGGY]  while(t!=  null  &&  tmp  <  =  upperBound)  {  [CE]  illegal  start  of  expression  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(t!=  null  &&  tmp  <  =  upperBound)  {  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(t!=  null  &&  tmp  <  =  upperBound)  {	  try    {    [Delete]    catch(Throwable    t)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
241	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(fbeg,  ih);  [CE]  while  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(fbeg,  ih);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(fbeg,  ih);	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    fbeg);    	non-compiled	[CE]  while  expected	42	None	replace
242	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (b  -  fAtInterpolationPoints.getEntry(ipt)-  jpt  +  f)  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (b  -  fAtInterpolationPoints.getEntry(ipt)-  jpt  +  f)  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (b  -  fAtInterpolationPoints.getEntry(ipt)-  jpt  +  f)	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (b    -    fAtInterpolationPoints.getEntry(ipt)-    jpt    	non-compiled	[CE]  ')'  expected	111	None	replace
243	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException( ", ",  jpt);  [CE]  unclosed  string  literal  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException( ", ",  jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "PathIsExploredException( ", ",  jpt);	  throw    new    PathIsExploredException(   "   ",    jpt);    	non-compiled	[CE]  unclosed  string  literal	55	None	replace
244	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException:  n "  +  jpt);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException:  n "  +  jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "PathIsExploredException:  n "  +  jpt);	  throw    new    PathIsExploredException(   "   ",    jpt);    	non-compiled	[CE]  while  expected	55	None	replace
245	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  bMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	add	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    *    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    bMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	33	1	add
246	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  bMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  bMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    *    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    bMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	33	1	add
247	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fb  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [CE]  cannot  find  symbol  fb  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fb  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    *    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fb  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	non-compiled	[CE]  cannot  find  symbol  fb	33	None	add
248	[BUG]  [BUGGY]  if(isMinimize  &&  lowerBound  <  upperBound)  {  throw  new  PathIsExploredException();  }  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  &&  lowerBound  <  upperBound)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  &&  lowerBound  <  upperBound)  {  throw  new  PathIsExploredException();  }	  if(isMinimize    &&    lowerBound    <    =    upperBound)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  while  expected	118	None	replace
249	[BUG]  [BUGGY]  if(isMinimize  &&  upperBound  <  =  lowerBound)  {  throw  new  PathIsExploredException();  }  [CE]  illegal  start  of  expression  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  &&  upperBound  <  =  lowerBound)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  &&  upperBound  <  =  lowerBound)  {  throw  new  PathIsExploredException();  }	  if(isMinimize    &&    lowerBound    <    =    upperBound)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
250	[BUG]  [BUGGY]  if(isMinimize  &&  lowerBound!=  upperBound)  {  throw  new  PathIsExploredException();  }  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  &&  lowerBound!=  upperBound)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  &&  lowerBound!=  upperBound)  {  throw  new  PathIsExploredException();  }	  if(isMinimize    &&    lowerBound    <    =    upperBound)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  while  expected	118	None	replace
251	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)/  tmp);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)/  tmp);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    f)/    f);    	non-compiled	[CE]  while  expected	24	None	replace
252	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt  +  1);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt  +  1);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt  +  1);	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(jpt);    	non-compiled	[CE]  while  expected	41	None	replace
253	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  [CE]  illegal  start  of  expression  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)/	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (nfm    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
254	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  jpt  -  1);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  jpt  -  1);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  jpt  -  1);	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    jpt);    	non-compiled	[CE]  while  expected	40	None	replace
255	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  dsq  [CE]  ')'  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  dsq  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  dsq	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    dsqCrv    	non-compiled	[CE]  ')'  expected	54	None	replace
256	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)+  1)/  2);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)+  1)/  2);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)+  1)/  2);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    fbeg);    	non-compiled	[CE]  while  expected	82	None	replace
257	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  ih)/  tmp);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  ih)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  ih)/  tmp);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    jpt)/    tmp);    	non-compiled	[CE]  while  expected	23	None	replace
258	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  fAtInterpolationPoints);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  fAtInterpolationPoints);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  fAtInterpolationPoints);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    jpt)/    tmp);    	non-compiled	[CE]  while  expected	23	None	replace
259	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  d  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  d  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  d	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    t    	non-compiled	[CE]  ')'  expected	53	None	replace
260	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  ')'  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  ')'  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  ')'	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    jpt    	non-compiled	[CE]  ')'  expected	10	None	replace
261	[BUG]  [BUGGY]  safeThan  =  true)  {  throw  new  PathIsExploredException();  }  [CE]  ';'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan  =  true)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan  =  true)  {  throw  new  PathIsExploredException();  }	  safeThan    <    =    false)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  ';'  expected	96	None	replace
262	[BUG]  [BUGGY]  safeThan  ==  false)  {  throw  new  PathIsExploredException();  }  [CE]  not  a  statement  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan  ==  false)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan  ==  false)  {  throw  new  PathIsExploredException();  }	  safeThan    <    =    false)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  not  a  statement	96	None	replace
263	[BUG]  [BUGGY]  safeThan!=  false)  {  throw  new  PathIsExploredException();  }  [CE]  not  a  statement  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan!=  false)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan!=  false)  {  throw  new  PathIsExploredException();  }	  safeThan    <    =    false)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  not  a  statement	96	None	replace
264	[BUG]  [BUGGY]  safeThan  =  false)  {  throw  new  PathIsExploredException();  }  [CE]  ';'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan  =  false)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan  =  false)  {  throw  new  PathIsExploredException();  }	  safeThan    <    =    false)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  ';'  expected	96	None	replace
265	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    jpt);    	non-compiled	[CE]  while  expected	70	None	replace
266	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ".getMessage());  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ".getMessage());  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ".getMessage());	  throw    new    PathIsExploredException(   "   ".getMessage());    	non-compiled	[CE]  while  expected	56	None	replace
267	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ",  jpt);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ",  jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ",  jpt);	  throw    new    PathIsExploredException(   "   ".getMessage());    	non-compiled	[CE]  while  expected	56	None	replace
268	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ",  tmp);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ",  tmp);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ",  tmp);	  throw    new    PathIsExploredException(   "   ".getMessage());    	non-compiled	[CE]  while  expected	56	None	replace
269	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException. ");  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException. ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "PathIsExploredException. ");	  try    {    [Delete]    catch(Throwable    t)    {    throw    new    PathIsExploredException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  while  expected	1	None	replace
270	[BUG]  [BUGGY]  safeThanOverride  ==  false)  {  throw  new  PathIsExploredException( " ");  }  [CE]  not  a  statement  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThanOverride  ==  false)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThanOverride  ==  false)  {  throw  new  PathIsExploredException( " ");  }	  safeThanOverride    <    =    false)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  not  a  statement	94	None	replace
271	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  dsqCrvmin);  [CE]  while  expected  [FE]        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  dsqCrvmin);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  dsqCrvmin);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    jpt);    	non-compiled	[CE]  while  expected	75	None	replace
272	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  tmp);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  tmp);	  zMatrix.setEntry(tmp,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    f)/    ih);    	non-compiled	[CE]  while  expected	123	None	replace
273	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	add	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    +    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	86	1	add
274	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    +    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	86	1	add
275	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  bMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	add	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    +    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    bMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	86	1	add
276	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  bMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  bMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    +    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    bMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	86	1	add
277	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (jpt  -  fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (jpt  -  fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (jpt  -  fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (jpt    -    fAtInterpolationPoints.getEntry(ipt)-    f    	non-compiled	[CE]  ')'  expected	7	None	replace
278	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  jpt  +  f  [CE]  ')'  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  jpt  +  f  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)-  jpt  +  f	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (jpt    -    fAtInterpolationPoints.getEntry(ipt)-    f    	non-compiled	[CE]  ')'  expected	7	None	replace
279	[BUG]  [BUGGY]  Matrix  parent!=  null  &&  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }  [CE]  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  Matrix  parent!=  null  &&  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	Matrix  parent!=  null  &&  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }	  parent!=    null    &&    isMinimize)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    jpt);    }    	non-compiled	[CE]  	79	None	replace
280	[BUG]  [BUGGY]  if(isMinimize  &&  lowerBound  ==  upperBound)  {  throw  new  PathIsExploredException( " ");  }  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  &&  lowerBound  ==  upperBound)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  &&  lowerBound  ==  upperBound)  {  throw  new  PathIsExploredException( " ");  }	  if(isMinimize    &&    lowerBound    <    =    upperBound)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  while  expected	120	None	replace
281	[BUG]  [BUGGY]  safeThan  =  0)  {  throw  new  PathIsExploredException( " ");  }  [CE]  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan  =  0)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan  =  0)  {  throw  new  PathIsExploredException( " ");  }	  safeThan    <    =    1)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  	95	None	replace
282	[BUG]  [BUGGY]  if(!isMinimize)  {  aughtException( "PathIsExploredException ");  }  [CE]  while  expected  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(!isMinimize)  {  aughtException( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(!isMinimize)  {  aughtException( "PathIsExploredException ");  }	  aughtException(   "PathIsExploredException   ");    	non-compiled	[CE]  while  expected	4	None	replace
283	[BUG]  [BUGGY]  if(!isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }  [CE]  while  expected  [FE]                          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(!isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(!isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }	  aughtException(   "PathIsExploredException   ");    	non-compiled	[CE]  while  expected	4	None	replace
284	[BUG]  [BUGGY]  nfm.error( "PathIsExploredException ");  [CE]  while  expected  [FE]                            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  nfm.error( "PathIsExploredException ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	nfm.error( "PathIsExploredException ");	  aughtException(   "PathIsExploredException   ");    	non-compiled	[CE]  while  expected	4	None	replace
285	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  fAtInterpolationPoints);  [CE]  while  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  fAtInterpolationPoints);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  fAtInterpolationPoints);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	69	None	replace
286	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fBeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fBeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fBeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2);	  zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    2);    	non-compiled	[CE]  while  expected	71	None	replace
287	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fb  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fb  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fb  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2);	  zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    2);    	non-compiled	[CE]  while  expected	71	None	replace
288	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  fAtInterpolationPoints  [CE]  ')'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  fAtInterpolationPoints  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  fAtInterpolationPoints	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(ipt)+    1)/    tmp    	non-compiled	[CE]  ')'  expected	101	None	replace
289	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (ipt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (ipt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (ipt  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(ipt)+    1)/    tmp    	non-compiled	[CE]  ')'  expected	101	None	replace
290	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  fAtInterpolationPoints.getEntry(  [CE]  illegal  start  of  expression  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  fAtInterpolationPoints.getEntry(  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  fAtInterpolationPoints.getEntry(	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(ipt)+    1)/    tmp    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
291	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  tmp);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  IllegalStateException( " "  +  tmp);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  IllegalStateException( " "  +  tmp);	  throw    new    IllegalStateException(   "   ".equals(tmp));    	non-compiled	[CE]  while  expected	76	None	replace
292	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  tmp.toString());  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  IllegalStateException( " "  +  tmp.toString());  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  IllegalStateException( " "  +  tmp.toString());	  throw    new    IllegalStateException(   "   ".equals(tmp));    	non-compiled	[CE]  while  expected	76	None	replace
293	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  tmp);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  tmp);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  IllegalArgumentException( " "  +  tmp);	  throw    new    IllegalArgumentException(   "   ".equals(tmp));    	non-compiled	[CE]  while  expected	6	None	replace
294	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  lowerBound  is  less  than  1: "  +  tmp);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  IllegalArgumentException( "The  lowerBound  is  less  than  1: "  +  tmp);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  IllegalArgumentException( "The  lowerBound  is  less  than  1: "  +  tmp);	  throw    new    IllegalArgumentException(   "   ".equals(tmp));    	non-compiled	[CE]  while  expected	6	None	replace
295	[BUG]  [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(ih,  modelSecondDerivativesValues);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(ih,  modelSecondDerivativesValues);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(ih,  modelSecondDerivativesValues);	  NeighborRealMatrix    <    K,    V>    bMatrix    =    new    NeighborRealMatrix    <    K,    V>(ih);    	non-compiled	[CE]  while  expected	85	None	replace
296	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  f)*  jpt);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  f)*  jpt);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  f)*  jpt);	  zMatrix.setEntry(ih,    (jpt    -    fAtInterpolationPoints.getEntry(ipt)-    f)*    tmp);    	non-compiled	[CE]  while  expected	58	None	replace
297	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)*  dsqCrvmin);  [CE]  while  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)*  dsqCrvmin);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)*  dsqCrvmin);	  zMatrix.setEntry(ih,    (jpt    -    fAtInterpolationPoints.getEntry(ipt)-    f)*    tmp);    	non-compiled	[CE]  while  expected	58	None	replace
298	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  fAtInterpolationPoints,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  jpt);  [CE]  while  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  fAtInterpolationPoints,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  jpt);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  fAtInterpolationPoints,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  jpt);	  zMatrix.setEntry(ih,    jpt,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	73	None	replace
299	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  jpt,  (fb  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  jpt,  (fb  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  jpt,  (fb  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  2);	  zMatrix.setEntry(ih,    jpt,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	73	None	replace
300	[BUG]  [BUGGY]  safeThanOverride  {  throw  new  PathIsExploredException( " ",  jpt);  }  [CE]  not  a  statement  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThanOverride  {  throw  new  PathIsExploredException( " ",  jpt);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThanOverride  {  throw  new  PathIsExploredException( " ",  jpt);  }	  safeThanOverride    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  not  a  statement	93	None	replace
301	[BUG]  [BUGGY]  safeThanOverride  {  throw  new  PathIsExploredException( " ".);  }  [CE]  not  a  statement  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThanOverride  {  throw  new  PathIsExploredException( " ".);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThanOverride  {  throw  new  PathIsExploredException( " ".);  }	  safeThanOverride    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  not  a  statement	93	None	replace
302	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  jpt);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  jpt);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  jpt);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    jpt);    	non-compiled	[CE]  while  expected	28	None	replace
303	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  f)*  tmp);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  f)*  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  f)*  tmp);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    jpt)*    tmp);    	non-compiled	[CE]  while  expected	57	None	replace
304	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  tmp.toString());  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  tmp.toString());  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  IllegalArgumentException( " "  +  tmp.toString());	  throw    new    IllegalArgumentException(   "   ".equalsIgnoreCase(tmp));    	non-compiled	[CE]  while  expected	100	None	replace
305	[BUG]  [BUGGY]  safeTreeIsExplored( "msg.bad.interpolation.lowerBound ",  ih);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeTreeIsExplored( "msg.bad.interpolation.lowerBound ",  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeTreeIsExplored( "msg.bad.interpolation.lowerBound ",  ih);	  if(isMinimize)    {    throw    new    PathIsExploredException(   "msg.bad.interpolation.lowerBound   ",    ih);    }    	non-compiled	[CE]  while  expected	15	None	replace
306	[BUG]  [BUGGY]  safeTreeIsExplored( "msg.bad.interpolation.lowerBound ");  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeTreeIsExplored( "msg.bad.interpolation.lowerBound ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeTreeIsExplored( "msg.bad.interpolation.lowerBound ");	  if(isMinimize)    {    throw    new    PathIsExploredException(   "msg.bad.interpolation.lowerBound   ",    ih);    }    	non-compiled	[CE]  while  expected	15	None	replace
307	[BUG]  [BUGGY]  NeighborDerivativesValues.setEntry(ih,  zMatrix,  lowerBound,  tmp);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborDerivativesValues.setEntry(ih,  zMatrix,  lowerBound,  tmp);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborDerivativesValues.setEntry(ih,  zMatrix,  lowerBound,  tmp);	  if(isMinimize)    {    throw    new    PathIsExploredException(   "msg.bad.interpolation.lowerBound   ",    ih);    }    	non-compiled	[CE]  while  expected	15	None	replace
308	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)/  f);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)/  f);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)/  f);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    f);    	non-compiled	[CE]  while  expected	26	None	replace
309	[BUG]  [BUGGY]  while((  jpt  <  0)||(jpt  >  upperBound))  {  throw  new  PathIsExploredException( " ");  }  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while((  jpt  <  0)||(jpt  >  upperBound))  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while((  jpt  <  0)||(jpt  >  upperBound))  {  throw  new  PathIsExploredException( " ");  }	  try    {    [Delete]    finally    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  while  expected	114	None	replace
310	[BUG]  [BUGGY]  while((  jpt  <  0)||(jpt  >  upperBound))  {  throw  new  PathIsExploredException( " ");  [CE]  illegal  start  of  expression  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while((  jpt  <  0)||(jpt  >  upperBound))  {  throw  new  PathIsExploredException( " ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while((  jpt  <  0)||(jpt  >  upperBound))  {  throw  new  PathIsExploredException( " ");	  try    {    [Delete]    finally    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
311	[BUG]  [BUGGY]  while((  jpt  <  0)||(jpt  >  upperBound))  {  try  {  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while((  jpt  <  0)||(jpt  >  upperBound))  {  try  {  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while((  jpt  <  0)||(jpt  >  upperBound))  {  try  {	  try    {    [Delete]    finally    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	114	None	replace
312	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2  *  f  [CE]  ')'  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2  *  f  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(jpt)+  f)/  2  *  f	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    2    *    tmp    	non-compiled	[CE]  ')'  expected	39	None	replace
313	[BUG]  [BUGGY]  while(isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException ",  jpt);  }  [CE]  while  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException ",  jpt);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException ",  jpt);  }	  while(isMinimize)    {    throw    new    PathIsExploredException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  while  expected	3	None	replace
314	[BUG]  [BUGGY]  while(isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException ",  zMatrix);  }  [CE]  while  expected  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException ",  zMatrix);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(isMinimize)  {  throw  new  PathIsExploredException( "PathIsExploredException ",  zMatrix);  }	  while(isMinimize)    {    throw    new    PathIsExploredException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  while  expected	3	None	replace
315	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException:  n "  +  ih);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException:  n "  +  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "PathIsExploredException:  n "  +  ih);	  throw    new    PathIsExploredException(   "   ",    ih);    	non-compiled	[CE]  while  expected	99	None	replace
316	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException: "  +  ih,  jpt);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException: "  +  ih,  jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "PathIsExploredException: "  +  ih,  jpt);	  throw    new    PathIsExploredException(   "   ",    ih);    	non-compiled	[CE]  while  expected	99	None	replace
317	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException:  ih  must  be  >  lowerBound  or  lowerBound ");  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException:  ih  must  be  >  lowerBound  or  lowerBound ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "PathIsExploredException:  ih  must  be  >  lowerBound  or  lowerBound ");	  throw    new    PathIsExploredException(   "   ",    ih);    	non-compiled	[CE]  while  expected	99	None	replace
318	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  dsqCrvmin);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  dsqCrvmin);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  dsqCrvmin);	  zMatrix.setEntry(tmp,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    ih)/    ih);    	non-compiled	[CE]  while  expected	25	None	replace
319	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ipt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  [CE]  illegal  start  of  expression  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ipt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ipt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(jpt,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
320	[BUG]  [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "n ");  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "n ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "n ");	  MutablePathIsExploredException    tmp    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	112	None	replace
321	[BUG]  [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( " ",  ih);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( " ",  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( " ",  ih);	  MutablePathIsExploredException    tmp    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	112	None	replace
322	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)/  fbeg);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)/  fbeg);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)/  fbeg);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    f)/    fbeg);    	non-compiled	[CE]  while  expected	91	None	replace
323	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)/  2);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)/  2);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)/  2);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    f)/    fbeg);    	non-compiled	[CE]  while  expected	91	None	replace
324	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "Path  is  less  than  1:n ");  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "Path  is  less  than  1:n ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "Path  is  less  than  1:n ");	  throw    new    PathIsExploredException(   "Path    is    less    than    1:   ");    	non-compiled	[CE]  while  expected	102	None	replace
325	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(tmp));  [CE]  <identifier>  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(tmp));  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equalsIgnoreCase(tmp));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
326	[BUG]  [BUGGY]  safeThan  <  =  false)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan  <  =  false)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan  <  =  false)  {  throw  new  IllegalStateException( " ");  }	  if(!isMinimize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
327	[BUG]  [BUGGY]  safeThan  <  =  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan  <  =  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan  <  =  0)  {  throw  new  IllegalStateException( " ");  }	  if(!isMinimize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
328	[BUG]  [BUGGY]  safeThanIgnoreWhitespace(ih)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThanIgnoreWhitespace(ih)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThanIgnoreWhitespace(ih)  {  throw  new  IllegalStateException( " ");  }	  if(!isMinimize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
329	[BUG]  [BUGGY]  safely())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safely())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safely())  {  throw  new  IllegalStateException( " ");  }	  if(!isMinimize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
330	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  dsqCrvmin);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  dsqCrvmin);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  dsqCrvmin);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    jpt)/    tmp);    	non-compiled	[CE]  while  expected	66	None	replace
331	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (bbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f  [CE]  ')'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (bbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (bbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (ipt    -    fAtInterpolationPoints.getEntry(ipt)-    f    	non-compiled	[CE]  ')'  expected	9	None	replace
332	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (ipt  -  fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (ipt  -  fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (ipt  -  fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (ipt    -    fAtInterpolationPoints.getEntry(ipt)-    f    	non-compiled	[CE]  ')'  expected	9	None	replace
333	[BUG]  [BUGGY]  safeThan  ==  false)  {  throw  new  PathIsExploredException( " ");  }  [CE]  not  a  statement  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan  ==  false)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan  ==  false)  {  throw  new  PathIsExploredException( " ");  }	  safeThan    <    =    false)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  not  a  statement	92	None	replace
334	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  jpt);  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  jpt);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  f)/  jpt);	  zMatrix.setEntry(ih,    (jpt    -    fAtInterpolationPoints.getEntry(ipt)-    f)/    tmp);    	non-compiled	[CE]  while  expected	22	None	replace
335	[BUG]  [BUGGY]  tryFallThrough(zMatrix)  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }  [CE]  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  tryFallThrough(zMatrix)  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	tryFallThrough(zMatrix)  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }	  tryFallThrough(jpt)    {    throw    new    PathIsExploredException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  	2	None	replace
336	[BUG]  [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(2);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(2);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(2);	  NeighborRealMatrix    <    K,    V>    bMatrix    =    new    NeighborRealMatrix    <    K,    V>();    	non-compiled	[CE]  while  expected	80	None	replace
337	[BUG]  [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(0);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(0);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(0);	  NeighborRealMatrix    <    K,    V>    bMatrix    =    new    NeighborRealMatrix    <    K,    V>();    	non-compiled	[CE]  while  expected	80	None	replace
338	[BUG]  [BUGGY]  zMatrix.setEntry(id,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f);  [CE]  ')'  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(id,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(id,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f);	  zMatrix.setEntry(jpt,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    f);    	non-compiled	[CE]  ')'  expected	29	None	replace
339	[BUG]  [BUGGY]  zMatrix.setEntry(ip,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f);  [CE]  ')'  expected  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ip,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ip,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  f);	  zMatrix.setEntry(jpt,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    f);    	non-compiled	[CE]  ')'  expected	29	None	replace
340	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  dsqCrvmin);  [CE]  cannot  find  symbol  dsqCrvmin  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  dsqCrvmin);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  dsqCrvmin);	  	non-compiled	[CE]  cannot  find  symbol  dsqCrvmin	30	None	add
341	[BUG]  [BUGGY]  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	add	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	30	1	add
342	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [FE]  BOBYQAOptimizer$PathIsExploredException  [FE]      BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  	compilable	  [FE]  BOBYQAOptimizer$PathIsExploredException  	30	1	add
343	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)-  f)/  tmp);  [CE]  while  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)-  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)-  f)/  tmp);	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    *    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	34	None	replace
344	[BUG]  [BUGGY]  NeighborRealMatrix  <?>)  {  throw  new  PathIsExploredException(zMatrix);  }  [CE]  not  a  statement  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <?>)  {  throw  new  PathIsExploredException(zMatrix);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <?>)  {  throw  new  PathIsExploredException(zMatrix);  }	  if(isMinimize)    {    throw    new    PathIsExploredException(zMatrix);    }    	non-compiled	[CE]  not  a  statement	98	None	replace
345	[BUG]  [BUGGY]  NeighborRealMatrix  <  N,  Object>  bMatrix  =  new  NeighborRealMatrix  <  N,  Object>();  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  N,  Object>  bMatrix  =  new  NeighborRealMatrix  <  N,  Object>();  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  N,  Object>  bMatrix  =  new  NeighborRealMatrix  <  N,  Object>();	  if(isMinimize)    {    throw    new    PathIsExploredException(zMatrix);    }    	non-compiled	[CE]  while  expected	98	None	replace
346	[BUG]  [BUGGY]  NeighborRealMatrix  <  Object>  bMatrix  =  new  NeighborRealMatrix  <  Object>();  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  Object>  bMatrix  =  new  NeighborRealMatrix  <  Object>();  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  Object>  bMatrix  =  new  NeighborRealMatrix  <  Object>();	  if(isMinimize)    {    throw    new    PathIsExploredException(zMatrix);    }    	non-compiled	[CE]  while  expected	98	None	replace
347	[BUG]  [BUGGY]  NeighborRealMatrix  <  N,  H>  bMatrix  =  new  NeighborRealMatrix  <  N,  H>();  [CE]  while  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  N,  H>  bMatrix  =  new  NeighborRealMatrix  <  N,  H>();  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  N,  H>  bMatrix  =  new  NeighborRealMatrix  <  N,  H>();	  if(isMinimize)    {    throw    new    PathIsExploredException(zMatrix);    }    	non-compiled	[CE]  while  expected	98	None	replace
348	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "Factory  is  less  than  1: "  +  tmp);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "Factory  is  less  than  1: "  +  tmp);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "Factory  is  less  than  1: "  +  tmp);	  try    {    [Delete]    catch(Throwable    t)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    tmp);    }    	non-compiled	[CE]  while  expected	117	None	replace
349	[BUG]  [BUGGY]  MutablePathIsExploredException( "PathIsExploredException ");  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException( "PathIsExploredException ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException( "PathIsExploredException ");	  aughtException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  while  expected	122	None	replace
350	[BUG]  [BUGGY]  MutablePathIsExploredException( "PathIsExploredException ");  }  [CE]  cannot  find  symbol  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException( "PathIsExploredException ");  }	  aughtException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
351	[BUG]  [BUGGY]  nfm.error( "PathIsExploredException ");  }  [CE]  int  cannot  be  dereferenced  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  nfm.error( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	nfm.error( "PathIsExploredException ");  }	  aughtException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  int  cannot  be  dereferenced	122	None	replace
352	[BUG]  [BUGGY]  aughtException( "PathIsExploredException ",  jpt);  }  [CE]  cannot  find  symbol  [FE]                          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  aughtException( "PathIsExploredException ",  jpt);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	aughtException( "PathIsExploredException ",  jpt);  }	  aughtException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
353	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(tmp));  [CE]  <identifier>  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(tmp));  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(tmp));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	44	None	replace
354	[BUG]  [BUGGY]  safeThan  <  false)  {  throw  new  PathIsExploredException( " ");  }  [CE]  illegal  start  of  type  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan  <  false)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan  <  false)  {  throw  new  PathIsExploredException( " ");  }	  safeThan    <    =    false)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
355	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (nfm  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  [CE]  illegal  start  of  expression  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (nfm  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (nfm  -  fAtInterpolationPoints.getEntry(ipt)+  f)/	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (nfm    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
356	[BUG]  [BUGGY]  while(!isMinimize)  {  throw  new  PathIsExploredException();  }  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(!isMinimize)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(!isMinimize)  {  throw  new  PathIsExploredException();  }	  if(!isMinimize)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  while  expected	119	None	replace
357	[BUG]  [BUGGY]  if(isMinimize)  {  throw  new  PathIsExploredException( "Invalid  lowerBound  and  lowerBound  not  supported. ");  }  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize)  {  throw  new  PathIsExploredException( "Invalid  lowerBound  and  lowerBound  not  supported. ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize)  {  throw  new  PathIsExploredException( "Invalid  lowerBound  and  lowerBound  not  supported. ");  }	  if(!isMinimize)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  while  expected	119	None	replace
358	[BUG]  [BUGGY]  if(isMinimize  &&  upperBound  <  =  dsqCrvmin)  {  throw  new  PathIsExploredException();  }  [CE]  illegal  start  of  expression  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  &&  upperBound  <  =  dsqCrvmin)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  &&  upperBound  <  =  dsqCrvmin)  {  throw  new  PathIsExploredException();  }	  if(isMinimize    &&    lowerBound    <    =    upperBound)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
359	[BUG]  [BUGGY]  if(isMinimize  &&  upperBound  <  =  tmp)  {  throw  new  PathIsExploredException();  }  [CE]  illegal  start  of  expression  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  &&  upperBound  <  =  tmp)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  &&  upperBound  <  =  tmp)  {  throw  new  PathIsExploredException();  }	  if(isMinimize    &&    lowerBound    <    =    upperBound)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
360	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (b  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)*  tmp);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (b  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)*  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (b  -  fAtInterpolationPoints.getEntry(ipt)-  jpt)*  tmp);	  zMatrix.setEntry(ih,    (fb    -    fAtInterpolationPoints.getEntry(ipt)-    jpt)*    tmp);    	non-compiled	[CE]  while  expected	78	None	replace
361	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  jpt,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [CE]  while  expected  [FE]          BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  jpt,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  jpt,  (jpt  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  zMatrix.setEntry(ih,    jpt,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    	non-compiled	[CE]  while  expected	73	None	replace
362	[BUG]  [BUGGY]  Parent  <?>  parent!=  null  &&  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }  [CE]  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  Parent  <?>  parent!=  null  &&  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	Parent  <?>  parent!=  null  &&  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }	  parent!=    null    &&    isMinimize)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    jpt);    }    	non-compiled	[CE]  	79	None	replace
363	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (b  -  fAtInterpolationPoints.getEntry(ipt)/  jpt  [CE]  ')'  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (b  -  fAtInterpolationPoints.getEntry(ipt)/  jpt  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (b  -  fAtInterpolationPoints.getEntry(ipt)/  jpt	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (b    -    fAtInterpolationPoints.getEntry(ipt)-    jpt    	non-compiled	[CE]  ')'  expected	111	None	replace
364	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (b  -  fAtInterpolationPoints.getEntry(ipt)-  jpt  [CE]  ')'  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (b  -  fAtInterpolationPoints.getEntry(ipt)-  jpt  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (b  -  fAtInterpolationPoints.getEntry(ipt)-  jpt	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (b    -    fAtInterpolationPoints.getEntry(ipt)-    jpt    	non-compiled	[CE]  ')'  expected	111	None	replace
365	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbe  [CE]  ')'  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbe  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbe	  	non-compiled	[CE]  ')'  expected	30	None	add
366	[BUG]  [BUGGY]  tryFallThrough(jpt)  {  throw  new  PathIsExploredException( "PathIsExploredException ",  ih);  }  [CE]  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  tryFallThrough(jpt)  {  throw  new  PathIsExploredException( "PathIsExploredException ",  ih);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	tryFallThrough(jpt)  {  throw  new  PathIsExploredException( "PathIsExploredException ",  ih);  }	  tryFallThrough(jpt)    {    throw    new    PathIsExploredException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  	2	None	replace
367	[BUG]  [BUGGY]  while(tmp!=  null  &&!tmp.isEmpty())  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(tmp!=  null  &&!tmp.isEmpty())  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(tmp!=  null  &&!tmp.isEmpty())  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }	  try    {    [Delete]    catch(Throwable    tmp)    {    throw    new    PathIsExploredException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  while  expected	121	None	replace
368	[BUG]  [BUGGY]  while(tmp!=  null  &&!tmp.equals( " "))  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(tmp!=  null  &&!tmp.equals( " "))  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(tmp!=  null  &&!tmp.equals( " "))  {  throw  new  PathIsExploredException( "PathIsExploredException ");  }	  try    {    [Delete]    catch(Throwable    tmp)    {    throw    new    PathIsExploredException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  while  expected	121	None	replace
369	[BUG]  [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(4);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(4);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(4);	  NeighborRealMatrix    <    K,    V>    bMatrix    =    new    NeighborRealMatrix    <    K,    V>();    	non-compiled	[CE]  while  expected	80	None	replace
370	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (b  -  fAtInterpolationPoints.getEntry(ipt)/  f)/  [CE]  illegal  start  of  expression  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (b  -  fAtInterpolationPoints.getEntry(ipt)/  f)/  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  (b  -  fAtInterpolationPoints.getEntry(ipt)/  f)/	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (b    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
371	[BUG]  [BUGGY]  While(isMinimize)  {  throw  new  PathIsExploredException( " ".);  }  [CE]  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  While(isMinimize)  {  throw  new  PathIsExploredException( " ".);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	While(isMinimize)  {  throw  new  PathIsExploredException( " ".);  }	  While(isMinimize)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  	18	None	replace
372	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)/  2  *  tmp  [CE]  ')'  expected  [FE]                      BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)/  2  *  tmp  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)/  2  *  tmp	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    2    *    tmp    	non-compiled	[CE]  ')'  expected	39	None	replace
373	[BUG]  [BUGGY]  if( "PathIsExploredException ");  }  [CE]  incompatible  types  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if( "PathIsExploredException ");  }	  aughtException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  incompatible  types	122	None	replace
374	[BUG]  [BUGGY]  NeighborRealMatrix  <  K,  V>  zMatrix  =  new  NeighborRealMatrix  <  K,  V>(jpt);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  K,  V>  zMatrix  =  new  NeighborRealMatrix  <  K,  V>(jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  K,  V>  zMatrix  =  new  NeighborRealMatrix  <  K,  V>(jpt);	  NeighborRealMatrix    <    K,    V>    zMatrix    =    new    NeighborRealMatrix    <    K,    V>();    	non-compiled	[CE]  while  expected	84	None	replace
375	[BUG]  [BUGGY]  NeighborRealMatrix  <  K,  V>  zMatrix  =  new  NeighborRealMatrix  <  K,  V>(tmp);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  K,  V>  zMatrix  =  new  NeighborRealMatrix  <  K,  V>(tmp);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  K,  V>  zMatrix  =  new  NeighborRealMatrix  <  K,  V>(tmp);	  NeighborRealMatrix    <    K,    V>    zMatrix    =    new    NeighborRealMatrix    <    K,    V>();    	non-compiled	[CE]  while  expected	84	None	replace
376	[BUG]  [BUGGY]  safeThanOverride  =  new  PathIsExploredException( " ");  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThanOverride  =  new  PathIsExploredException( " ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThanOverride  =  new  PathIsExploredException( " ");	  safeThanOverride    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  while  expected	93	None	replace
377	[BUG]  [BUGGY]  safeThanOverride  =  false;  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThanOverride  =  false;  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThanOverride  =  false;	  safeThanOverride    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  while  expected	93	None	replace
378	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  jpt);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  jpt);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  jpt);	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(jpt);    	non-compiled	[CE]  while  expected	41	None	replace
379	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  jpt  [CE]  ')'  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  jpt  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  jpt	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    jpt    	non-compiled	[CE]  ')'  expected	10	None	replace
380	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)*  jpt);  [CE]  while  expected  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)*  jpt);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)-  1)*  jpt);	  zMatrix.setEntry(ih,    (tmp    -    fAtInterpolationPoints.getEntry(ipt)-    f)*    f);    	non-compiled	[CE]  while  expected	60	None	replace
381	[BUG]  [BUGGY]  if(isMinimize)  {  parent  ==  null  &&  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  tmp);  }  [CE]  not  a  statement  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize)  {  parent  ==  null  &&  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  tmp);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize)  {  parent  ==  null  &&  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  tmp);  }	  parent    ==    null    &&    isMinimize)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    tmp);    }    	non-compiled	[CE]  not  a  statement	116	None	replace
382	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)  +  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fb  *  f  [CE]  ')'  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)  +  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fb  *  f  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    *    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  *  fAtInterpolationPoints.getEntry(ipt)  +  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fb  *  f	  	non-compiled	[CE]  ')'  expected	33	None	add
383	[BUG]  [BUGGY]  safeThan  <  =  0)  {  throw  new  PathIsExploredException( " ");  }  [CE]  illegal  start  of  type  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan  <  =  0)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan  <  =  0)  {  throw  new  PathIsExploredException( " ");  }	  safeThan    <    =    1)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
384	[BUG]  [BUGGY]  if(isMinimize)  {  throw  new  PathIsExploredException(tmp);  }  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize)  {  throw  new  PathIsExploredException(tmp);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize)  {  throw  new  PathIsExploredException(tmp);  }	  if(isMinimize)    {    throw    new    PathIsExploredException(zMatrix);    }    	non-compiled	[CE]  while  expected	98	None	replace
385	[BUG]  [BUGGY]  if(isMinimize)  {  throw  new  PathIsExploredException(jpt,  zMatrix);  }  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize)  {  throw  new  PathIsExploredException(jpt,  zMatrix);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize)  {  throw  new  PathIsExploredException(jpt,  zMatrix);  }	  if(isMinimize)    {    throw    new    PathIsExploredException(zMatrix);    }    	non-compiled	[CE]  while  expected	98	None	replace
386	[BUG]  [BUGGY]  if(isMinimize)  {  throw  new  PathIsExploredException(zMatrix,  ih);  }  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize)  {  throw  new  PathIsExploredException(zMatrix,  ih);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize)  {  throw  new  PathIsExploredException(zMatrix,  ih);  }	  if(isMinimize)    {    throw    new    PathIsExploredException(zMatrix);    }    	non-compiled	[CE]  while  expected	98	None	replace
387	[BUG]  [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(jpt);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	NeighborRealMatrix  <  K,  V>  bMatrix  =  new  NeighborRealMatrix  <  K,  V>(jpt);	  NeighborRealMatrix    <    K,    V>    bMatrix    =    new    NeighborRealMatrix    <    K,    V>(ih);    	non-compiled	[CE]  while  expected	85	None	replace
388	[BUG]  [BUGGY]  safeThan  <  =  true)  {  throw  new  PathIsExploredException();  }  [CE]  illegal  start  of  type  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThan  <  =  true)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThan  <  =  true)  {  throw  new  PathIsExploredException();  }	  safeThan    <    =    false)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
389	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (ipt  -  fAtInterpolationPoints.getEntry(ipt)-  jpt  [CE]  ')'  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (ipt  -  fAtInterpolationPoints.getEntry(ipt)-  jpt  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (ipt  -  fAtInterpolationPoints.getEntry(ipt)-  jpt	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (ipt    -    fAtInterpolationPoints.getEntry(ipt)-    jpt    	non-compiled	[CE]  ')'  expected	8	None	replace
390	[BUG]  [BUGGY]  while(!isMinimize  &&  isMaximize)  {  throw  new  PathIsExploredException( " ");  }  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(!isMinimize  &&  isMaximize)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(!isMinimize  &&  isMaximize)  {  throw  new  PathIsExploredException( " ");  }	  try    {    [Delete]    finally    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  while  expected	114	None	replace
391	[BUG]  [BUGGY]  parent  ==  null  ||  isMinimize)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ",  ih);  }  [CE]  not  a  statement  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  parent  ==  null  ||  isMinimize)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ",  ih);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	parent  ==  null  ||  isMinimize)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ",  ih);  }	  if(isMinimize)    {    throw    new    PathIsExploredException(   "msg.bad.interpolation.lowerBound   ",    ih);    }    	non-compiled	[CE]  not  a  statement	15	None	replace
392	[BUG]  [BUGGY]  try  {  [Delete]  catch(Throwable  tmp)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ", "msg.bad.interpolation.lowerBound ");  }  [CE]  illegal  start  of  expression  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  try  {  [Delete]  catch(Throwable  tmp)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ", "msg.bad.interpolation.lowerBound ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	try  {  [Delete]  catch(Throwable  tmp)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ", "msg.bad.interpolation.lowerBound ");  }	  if(isMinimize)    {    throw    new    PathIsExploredException(   "msg.bad.interpolation.lowerBound   ",    ih);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
393	[BUG]  [BUGGY]  try  {  [Delete]  catch(Throwable  tmp)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ",  ih);  }  [CE]  illegal  start  of  expression  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  try  {  [Delete]  catch(Throwable  tmp)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ",  ih);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	try  {  [Delete]  catch(Throwable  tmp)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound ",  ih);  }	  if(isMinimize)    {    throw    new    PathIsExploredException(   "msg.bad.interpolation.lowerBound   ",    ih);    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
394	[BUG]  [BUGGY]  allowSideEffects(true)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  allowSideEffects(true)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	allowSideEffects(true)  {  throw  new  IllegalStateException( " ");  }	  if(!isMinimize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
395	[BUG]  [BUGGY]  safeThanIgnoreWhitespace(tmp)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThanIgnoreWhitespace(tmp)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThanIgnoreWhitespace(tmp)  {  throw  new  IllegalStateException( " ");  }	  if(!isMinimize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
396	[BUG]  [BUGGY]  safeThanIgnoreWhitespace(jpt)  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  safeThanIgnoreWhitespace(jpt)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	safeThanIgnoreWhitespace(jpt)  {  throw  new  IllegalStateException( " ");  }	  if(!isMinimize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
397	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException ",  jpt);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "PathIsExploredException ",  jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "PathIsExploredException ",  jpt);	  try    {    [Delete]    catch(Throwable    t)    {    throw    new    PathIsExploredException(   "PathIsExploredException   ");    }    	non-compiled	[CE]  while  expected	1	None	replace
398	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (ipt  -  fAtInterpolationPoints.getEntry(ipt)+  f)  [CE]  ')'  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (ipt  -  fAtInterpolationPoints.getEntry(ipt)+  f)  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(jpt,  (ipt  -  fAtInterpolationPoints.getEntry(ipt)+  f)	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    (ipt    -    fAtInterpolationPoints.getEntry(ipt)+    f)    	non-compiled	[CE]  ')'  expected	48	None	replace
399	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt.getMessage());  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt.getMessage());  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt.getMessage());	  throw    new    PathIsExploredException(   "   ".getMessage());    	non-compiled	[CE]  while  expected	56	None	replace
400	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "jpt  is  less  than  1: "  +  jpt.getMessage());  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "jpt  is  less  than  1: "  +  jpt.getMessage());  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "jpt  is  less  than  1: "  +  jpt.getMessage());	  throw    new    PathIsExploredException(   "   ".getMessage());    	non-compiled	[CE]  while  expected	56	None	replace
401	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "jpt  is  less  than  1:  ' "  +  jpt.getMessage());  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "jpt  is  less  than  1:  ' "  +  jpt.getMessage());  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "jpt  is  less  than  1:  ' "  +  jpt.getMessage());	  throw    new    PathIsExploredException(   "   ".getMessage());    	non-compiled	[CE]  while  expected	56	None	replace
402	[BUG]  [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  +  f  [CE]  ')'  expected  [FE]    BOBYQAOptimizer$PathIsExploredException    [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  +  f  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	                zMatrix.setEntry(jpt,        ih,        (fbeg        -        fAtInterpolationPoints.getEntry(ipt)+        f)/        tmp);        zMatrix.setEntry(jpt,    ih,    (fbeg    +    fAtInterpolationPoints.getEntry(ipt)+    f)/    tmp);    zMatrix.setEntry(jpt,  ih,  (fbeg  +  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  zMatrix.setEntry(jpt,  ih,  (fbeg  +  f	  	non-compiled	[CE]  ')'  expected	86	None	add
403	[BUG]  [BUGGY]  while(!isMinimize  &&  tmp  <  =  upperBound)  {  throw  new  PathIsExploredException( " ");  }  [CE]  illegal  start  of  expression  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(!isMinimize  &&  tmp  <  =  upperBound)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(!isMinimize  &&  tmp  <  =  upperBound)  {  throw  new  PathIsExploredException( " ");  }	  try    {    [Delete]    catch(Throwable    t)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
404	[BUG]  [BUGGY]  while(!isMinimize  &&  tmp  <  =  lowerBound)  {  throw  new  PathIsExploredException( " ");  }  [CE]  illegal  start  of  expression  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(!isMinimize  &&  tmp  <  =  lowerBound)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(!isMinimize  &&  tmp  <  =  lowerBound)  {  throw  new  PathIsExploredException( " ");  }	  try    {    [Delete]    catch(Throwable    t)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
405	[BUG]  [BUGGY]  parent  ==  null  ||  isMinimize)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound.infinity. ");  }  [CE]  not  a  statement  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  parent  ==  null  ||  isMinimize)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound.infinity. ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	parent  ==  null  ||  isMinimize)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound.infinity. ");  }	  if(isMinimize)    {    throw    new    PathIsExploredException(   "msg.bad.interpolation.lowerBound.infinity.   ");    }    	non-compiled	[CE]  not  a  statement	17	None	replace
406	[BUG]  [BUGGY]  try  {  [Delete]  catch(Throwable  tmp)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound.infinity. ");  }  [CE]  illegal  start  of  expression  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  try  {  [Delete]  catch(Throwable  tmp)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound.infinity. ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	try  {  [Delete]  catch(Throwable  tmp)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound.infinity. ");  }	  if(isMinimize)    {    throw    new    PathIsExploredException(   "msg.bad.interpolation.lowerBound.infinity.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
407	[BUG]  [BUGGY]  try  {  [Delete]  catch(Throwable  t)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound.infinity. ");  }  [CE]  illegal  start  of  expression  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  try  {  [Delete]  catch(Throwable  t)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound.infinity. ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	try  {  [Delete]  catch(Throwable  t)  {  throw  new  PathIsExploredException( "msg.bad.interpolation.lowerBound.infinity. ");  }	  if(isMinimize)    {    throw    new    PathIsExploredException(   "msg.bad.interpolation.lowerBound.infinity.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
408	[BUG]  [BUGGY]  while(isMinimize  &&  isMaximize)  {  throw  new  PathIsExploredException();  }  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  while(isMinimize  &&  isMaximize)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	while(isMinimize  &&  isMaximize)  {  throw  new  PathIsExploredException();  }	  if(isMinimize    ||    isMaximize)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  while  expected	97	None	replace
409	[BUG]  [BUGGY]  if(!isMinimize  &&!isMaximize)  {  throw  new  PathIsExploredException();  }  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(!isMinimize  &&!isMaximize)  {  throw  new  PathIsExploredException();  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(!isMinimize  &&!isMaximize)  {  throw  new  PathIsExploredException();  }	  if(isMinimize    ||    isMaximize)    {    throw    new    PathIsExploredException();    }    	non-compiled	[CE]  while  expected	97	None	replace
410	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  tmp.equalsIgnoreCase(tmp));  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  IllegalStateException( " "  +  tmp.equalsIgnoreCase(tmp));  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  IllegalStateException( " "  +  tmp.equalsIgnoreCase(tmp));	  throw    new    IllegalStateException(   "   ".equalsIgnoreCase(tmp));    	non-compiled	[CE]  while  expected	77	None	replace
411	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)/  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp  [CE]  ')'  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)/  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)/  fAtInterpolationPoints.getEntry(ipt)+  1)/  tmp	  zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(ipt)+    1)/    tmp    	non-compiled	[CE]  ')'  expected	38	None	replace
412	[BUG]  [BUGGY]  Parent  <?>  parent  ==  null  ||  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }  [CE]  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  Parent  <?>  parent  ==  null  ||  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	Parent  <?>  parent  ==  null  ||  isMinimize)  {  throw  new  PathIsExploredException( "Path  is  less  than  1: "  +  jpt);  }	  parent    ==    null    ||    isMinimize)    {    throw    new    PathIsExploredException(   "Path    is    less    than    1:   "    +    jpt);    }    	non-compiled	[CE]  	105	None	replace
413	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (bMatrix  -  fAtInterpolationPoints.getEntry(ipt)/  f);  [CE]  ')'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (bMatrix  -  fAtInterpolationPoints.getEntry(ipt)/  f);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (bMatrix  -  fAtInterpolationPoints.getEntry(ipt)/  f);	  zMatrix.setEntry(ih,    (bMatrix    -    fAtInterpolationPoints.getEntry(ipt)-    f);    	non-compiled	[CE]  ')'  expected	74	None	replace
414	[BUG]  [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.path.node ");  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.path.node ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.path.node ");	  MutablePathIsExploredException    ih    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	113	None	replace
415	[BUG]  [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.path.node ",  jpt);  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.path.node ",  jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.path.node ",  jpt);	  MutablePathIsExploredException    ih    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	113	None	replace
416	[BUG]  [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.jsdoc.not.expand.node ");  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.jsdoc.not.expand.node ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.jsdoc.not.expand.node ");	  MutablePathIsExploredException    ih    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	113	None	replace
417	[BUG]  [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.jpt.invalid ",  jpt);  [CE]  while  expected  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.jpt.invalid ",  jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  ih  =  new  MutablePathIsExploredException( "msg.bad.interpolation.jpt.invalid ",  jpt);	  MutablePathIsExploredException    ih    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	113	None	replace
418	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "Invalid  tmp: "  +  ih);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "Invalid  tmp: "  +  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "Invalid  tmp: "  +  ih);	  throw    new    PathIsExploredException(   "   ",    ih);    	non-compiled	[CE]  while  expected	99	None	replace
419	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (tmp  -  fAtInterpolationPoints.getEntry(ipt)+  f)/  tmp);	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)+    jpt)/    tmp);    	non-compiled	[CE]  while  expected	66	None	replace
420	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".);  [CE]  <identifier>  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	Throwables.throw  new  IllegalArgumentException( " ".);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
421	[BUG]  [BUGGY]  throw  new  PathIsExploredException( "Path  is  less  than  1:  ' ");  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  throw  new  PathIsExploredException( "Path  is  less  than  1:  ' ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	throw  new  PathIsExploredException( "Path  is  less  than  1:  ' ");	  throw    new    PathIsExploredException(   "Path    is    less    than    1:   ");    	non-compiled	[CE]  while  expected	102	None	replace
422	[BUG]  [BUGGY]  if(!isMinimize)  {  throw  new  RuntimeException( "PathIsExploredException ");  }  [CE]  while  expected  [FE]                        BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(!isMinimize)  {  throw  new  RuntimeException( "PathIsExploredException ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(!isMinimize)  {  throw  new  RuntimeException( "PathIsExploredException ");  }	  aughtException(   "PathIsExploredException   ");    	non-compiled	[CE]  while  expected	4	None	replace
423	[BUG]  [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  jpt  [CE]  ')'  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  jpt  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)-  fAtInterpolationPoints.getEntry(ipt)+  1)/  jpt	  zMatrix.setEntry(ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(ipt)+    1)/    tmp    	non-compiled	[CE]  ')'  expected	101	None	replace
424	[BUG]  [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  jpt,  jpt);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  jpt,  jpt);  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	BOBYQAOptimizer$PathIsExploredException  tmp  =  modelSecondDerivativesValues.getEntry(ih,  jpt,  jpt);	  BOBYQAOptimizer$PathIsExploredException    tmp    =    modelSecondDerivativesValues.getEntry(ih,    jpt);    	non-compiled	[CE]  while  expected	40	None	replace
425	[BUG]  [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  +  f)/  dsqCrv  [CE]  ')'  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  +  f)/  dsqCrv  [BUGGY]      throw  new  PathIsExploredException();  //  XXX    }  }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	zMatrix.setEntry(jpt,  ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  +  f)/  dsqCrv	          zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    tmp);    zMatrix.setEntry(jpt,    ih,    (fbeg    -    fAtInterpolationPoints.getEntry(ipt)-    fAtInterpolationPoints.getEntry(jpt)+    f)/    dsqCrv    	non-compiled	[CE]  ')'  expected	54	None	replace
426	[BUG]  [BUGGY]  if(isMinimize  &&  upperBound  <  =  dsqCrvmin)  {  throw  new  PathIsExploredException( " ");  }  [CE]  illegal  start  of  expression  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  &&  upperBound  <  =  dsqCrvmin)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  &&  upperBound  <  =  dsqCrvmin)  {  throw  new  PathIsExploredException( " ");  }	  if(isMinimize    &&    lowerBound    <    =    upperBound)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
427	[BUG]  [BUGGY]  if(isMinimize  &&  upperBound  <  =  tmp)  {  throw  new  PathIsExploredException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  &&  upperBound  <  =  tmp)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  &&  upperBound  <  =  tmp)  {  throw  new  PathIsExploredException( " ");  }	  if(isMinimize    &&    lowerBound    <    =    upperBound)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
428	[BUG]  [BUGGY]  if(isMinimize  &&  upperBound  <  =  0)  {  throw  new  PathIsExploredException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  if(isMinimize  &&  upperBound  <  =  0)  {  throw  new  PathIsExploredException( " ");  }  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	if(isMinimize  &&  upperBound  <  =  0)  {  throw  new  PathIsExploredException( " ");  }	  if(isMinimize    &&    lowerBound    <    =    upperBound)    {    throw    new    PathIsExploredException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
429	[BUG]  [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.bad.interpolation.path.node ");  [CE]  while  expected  [FE]            BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.bad.interpolation.path.node ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.bad.interpolation.path.node ");	  MutablePathIsExploredException    tmp    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	112	None	replace
430	[BUG]  [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.bad.interpolation.path.node ",  jpt);  [CE]  while  expected  [FE]              BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.bad.interpolation.path.node ",  jpt);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.bad.interpolation.path.node ",  jpt);	  MutablePathIsExploredException    tmp    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	112	None	replace
431	[BUG]  [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.jsdoc.not.expand.null ");  [CE]  while  expected  [FE]                BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.jsdoc.not.expand.null ");  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.jsdoc.not.expand.null ");	  MutablePathIsExploredException    tmp    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	112	None	replace
432	[BUG]  [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.bad.interpolation.path.node ",  ih);  [CE]  while  expected  [FE]                  BOBYQAOptimizer$PathIsExploredException      [CONTEXT]      }  else  {  zMatrix.setEntry(0,  nfxm,  recip);  zMatrix.setEntry(nfm,  nfxm,  recip);  zMatrix.setEntry(ipt,  nfxm,  -recip);  zMatrix.setEntry(jpt,  nfxm,  -recip);  final  int  ih  =  ipt  *  (ipt  -  1)  /  2  +  jpt  -  1;  final  double  tmp  =  interpolationPoints.getEntry(nfm,  ipt  -  1)  *  interpolationPoints.getEntry(nfm,  jpt  -  1);  modelSecondDerivativesValues.setEntry(ih,  (fbeg  -  fAtInterpolationPoints.getEntry(ipt)  -  fAtInterpolationPoints.getEntry(jpt)  +  f)  /  tmp);      [BUGGY]  MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.bad.interpolation.path.node ",  ih);  [BUGGY]      }  [CLASS]  BOBYQAOptimizer  PathIsExploredException  [METHOD]  prelim  [RETURN_TYPE]  void  double[]  lowerBound  double[]  upperBound  [VARIABLES]  boolean  isMinimize  double[]  alphaCauchy  boundDifference  dsqCrvmin  lowerBound  upperBound  Array2DRowRealMatrix  bMatrix  interpolationPoints  zMatrix  double  DEFAULT_INITIAL_RADIUS  DEFAULT_STOPPING_RADIUS  HALF  MINUS_ONE  ONE  ONE_OVER_A_THOUSAND  ONE_OVER_EIGHT  ONE_OVER_FOUR  ONE_OVER_TEN  SIXTEEN  TEN  TWO  TWO_HUNDRED_FIFTY  ZERO  adelt  alpha  bdtest  bdtol  beta  biglsq  bigstp  boundDiff  bsum  cauchy  crvmin  csave  curv  d1  d2  d3  d4  d5  dderiv  delsq  delta  deltaOne  deltaTwo  den  denom  densav  diff  diffa  diffb  diffc  dist  distsq  dnorm  dsq  dx  errbig  f  fbeg  fopt  fracsq  frhosq  fsave  ggfree  gisq  glagValue  gqsq  gw  hDelta  ha  hdiag  initialTrustRegionRadius  min  objectiveValue  oneOverStepA  pqold  predsq  presav  ratio  recip  rho  rhosq  scaden  scale  slbd  step  stepa  stepb  stoppingTrustRegionRadius  stpsav  subd  sum  suma  sumb  sumin  sumpq  sumw  sumz  temp  tmp  tmp1  tmp2  value  vlag  vquad  wfixsq  xoptsq  ArrayRealVector  alternativeNewPoint  currentBest  fAtInterpolationPoints  glag  gnew  gradientAtTrustRegionCenter  hcol  hred  hs  lagrangeValuesAtNewPoint  lowerDifference  modelSecondDerivativesParameters  modelSecondDerivativesValues  newPoint  originShift  s  trialStepPoint  trustRegionCenterOffset  upperDifference  work1  work2  work3  xbdi  String  PATH_IS_EXPLORED  int  MINIMUM_PROBLEM_DIMENSION  i  ibdsav  iflag  ih  ilbd  ip  ipt  iptMinus1  isbd  itest  iubd  j  jp  jpt  jptMinus1  k  kbase  knew  ksav  m  max  n  ndim  nfm  nfmm  nfsav  nfx  nfxm  nh  np  npt  nptm  ntrits  numEval  numberOfInterpolationPoints  state  tmp1  tmp2  trustRegionCenterInterpolationPointIndex  long  serialVersionUID  	projects/Math38/src/main/java/org/apache/commons/math/optimization/direct/BOBYQAOptimizer.java	1.0	1752	1753	1	replace	MutablePathIsExploredException  tmp  =  new  MutablePathIsExploredException( "msg.bad.interpolation.path.node ",  ih);	  MutablePathIsExploredException    tmp    =    new    MutablePathIsExploredException(   "   ");    	non-compiled	[CE]  while  expected	112	None	replace
