bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(arg!=  null  &&  arg.getNext()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg!=  null  &&  arg.getNext()  ==  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg!=  null  &&  arg.getNext()  ==  null)  {	  if(arg!=    null    ||    arg.getNext()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
2	[BUG]  [BUGGY]  diagnostic  =  arg.getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  arg.getNext();  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  arg.getNext();	  diagnostic    =    methodName.getNext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
3	[BUG]  [BUGGY]  diagnostic  =  methodName.getNext()  :  null;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  methodName.getNext()  :  null;  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  methodName.getNext()  :  null;	  diagnostic    =    methodName.getNext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
4	[BUG]  [BUGGY]  diagnostic  =  methodName.getParent();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  methodName.getParent();  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  methodName.getParent();	  diagnostic    =    methodName.getNext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  if(methodName.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.getType()!=  desiredType)  {	  if(arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
6	[BUG]  [BUGGY]  if(arg.getNext()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg.getNext()!=  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg.getNext()!=  desiredType)  {	  if(arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
7	[BUG]  [BUGGY]  if(methodName.getType()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.getType()  ==  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.getType()  ==  desiredType)  {	  if(arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
8	[BUG]  [BUGGY]  if(methodName  ==  null  ||  arg.getType()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName  ==  null  ||  arg.getType()  ==  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName  ==  null  ||  arg.getType()  ==  desiredType)  {	  if(arg    ==    null    ||    arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
9	[BUG]  [BUGGY]  if(arg  ==  null  ||  desiredType  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg  ==  null  ||  desiredType  ==  0)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg  ==  null  ||  desiredType  ==  0)  {	  if(arg!=    null    ||    desiredType    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
10	[BUG]  [BUGGY]  if(arg!=  null  ||  desiredType  ==  NULL_ARGUMENT_ERROR)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg!=  null  ||  desiredType  ==  NULL_ARGUMENT_ERROR)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg!=  null  ||  desiredType  ==  NULL_ARGUMENT_ERROR)  {	  if(arg!=    null    ||    desiredType    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
11	[BUG]  [BUGGY]  if(arg  ==  null  ||  desiredType!=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg  ==  null  ||  desiredType!=  0)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg  ==  null  ||  desiredType!=  0)  {	  if(arg!=    null    ||    desiredType    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  if(arg!=  null  &&  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg!=  null  &&  arg.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg!=  null  &&  arg.getType()!=  desiredType)  {	  if(arg!=    null    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
13	[BUG]  [BUGGY]  if(diagnostic  ==  NULL_ARGUMENT_ERROR  ||  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic  ==  NULL_ARGUMENT_ERROR  ||  arg.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  NULL_ARGUMENT_ERROR  ||  arg.getType()!=  desiredType)  {	  if(diagnostic    ==    null    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
14	[BUG]  [BUGGY]  if(diagnostic  ==  null  &&  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic  ==  null  &&  arg.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  null  &&  arg.getType()!=  desiredType)  {	  if(diagnostic    ==    null    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
15	[BUG]  [BUGGY]  diagnostic  =  methodName.restrictByNotNullOrUndefined(),  desiredType);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  methodName.restrictByNotNullOrUndefined(),  desiredType);  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  methodName.restrictByNotNullOrUndefined(),  desiredType);	  diagnostic    =    methodName.restrictByNotNullOrUndefined();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
16	[BUG]  [BUGGY]  diagnostic  =  t.restrictByNotNullOrUndefined();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  t.restrictByNotNullOrUndefined();  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  t.restrictByNotNullOrUndefined();	  diagnostic    =    methodName.restrictByNotNullOrUndefined();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
17	[BUG]  [BUGGY]  diagnostic  =  arg.restrictByNotNullOrUndefined();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  arg.restrictByNotNullOrUndefined();  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  arg.restrictByNotNullOrUndefined();	  diagnostic    =    methodName.restrictByNotNullOrUndefined();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
18	[BUG]  [BUGGY]  if(arg!=  null  &&  arg.getType()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg!=  null  &&  arg.getType()  ==  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg!=  null  &&  arg.getType()  ==  desiredType)  {	  if(arg!=    null    ||    arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
19	[BUG]  [BUGGY]  if(methodName.equals(arg.getString())||  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.equals(arg.getString())||  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg.getString())||  methodName.equals(arg.getString()))  {	  if(arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  if(methodName.equals(arg.getString())&&  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.equals(arg.getString())&&  arg.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg.getString())&&  arg.getType()!=  desiredType)  {	  if(arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]  if(methodName.equals(arg.getString())&&  arg.getType()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.equals(arg.getString())&&  arg.getType()  ==  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg.getString())&&  arg.getType()  ==  desiredType)  {	  if(arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  if(arg!=  null  ||  arg.getString().endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg!=  null  ||  arg.getString().endsWith( "__ "))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg!=  null  ||  arg.getString().endsWith( "__ "))  {	  if(arg!=    null    &&    arg.getString().endsWith(   "__   "))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
23	[BUG]  [BUGGY]  if(arg!=  null  &&  arg.getString().startsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg!=  null  &&  arg.getString().startsWith( "__ "))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg!=  null  &&  arg.getString().startsWith( "__ "))  {	  if(arg!=    null    &&    arg.getString().endsWith(   "__   "))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
24	[BUG]  [BUGGY]  if(arg  ==  null  &&  arg.getString().endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg  ==  null  &&  arg.getString().endsWith( "__ "))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg  ==  null  &&  arg.getString().endsWith( "__ "))  {	  if(arg!=    null    &&    arg.getString().endsWith(   "__   "))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
25	[BUG]  [BUGGY]  diagnostic  =  methodName.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  methodName.getQualifiedName();  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  methodName.getQualifiedName();	  diagnostic    =    methodName;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
26	[BUG]  [BUGGY]  diagnostic  =  MethodName.UNKNOWN;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  MethodName.UNKNOWN;  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  MethodName.UNKNOWN;	  diagnostic    =    methodName;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
27	[BUG]  [BUGGY]  if(methodName!=  null  ||  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName!=  null  ||  arg.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName!=  null  ||  arg.getType()!=  desiredType)  {	  if(methodName    ==    null    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
28	[BUG]  [BUGGY]  if(methodName!=  null  ||  arg.getType()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName!=  null  ||  arg.getType()  ==  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName!=  null  ||  arg.getType()  ==  desiredType)  {	  if(methodName    ==    null    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  if(methodName  ==  null  &&  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName  ==  null  &&  arg.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName  ==  null  &&  arg.getType()!=  desiredType)  {	  if(methodName    ==    null    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  if(diagnostic!=  NULL_ARGUMENT_ERROR  ||  diagnostic!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic!=  NULL_ARGUMENT_ERROR  ||  diagnostic!=  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic!=  NULL_ARGUMENT_ERROR  ||  diagnostic!=  null)  {	  if(diagnostic    ==    NULL_ARGUMENT_ERROR    ||    diagnostic!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
31	[BUG]  [BUGGY]  if(diagnostic!=  NULL_ARGUMENT_ERROR  ||  diagnostic  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic!=  NULL_ARGUMENT_ERROR  ||  diagnostic  ==  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic!=  NULL_ARGUMENT_ERROR  ||  diagnostic  ==  null)  {	  if(diagnostic    ==    NULL_ARGUMENT_ERROR    ||    diagnostic!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
32	[BUG]  [BUGGY]  if(diagnostic  ==  NULL_ARGUMENT_ERROR  &&  diagnostic!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic  ==  NULL_ARGUMENT_ERROR  &&  diagnostic!=  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  NULL_ARGUMENT_ERROR  &&  diagnostic!=  null)  {	  if(diagnostic    ==    NULL_ARGUMENT_ERROR    ||    diagnostic!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
33	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName.restrictByNotNullOrUndefined(),  desiredType);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  methodName.restrictByNotNullOrUndefined(),  desiredType);  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  methodName.restrictByNotNullOrUndefined(),  desiredType);	  DiagnosticType    diagnostic    =    methodName.restrictByNotNullOrUndefined();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
34	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  t.restrictByNotNullOrUndefined();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  t.restrictByNotNullOrUndefined();  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  t.restrictByNotNullOrUndefined();	  DiagnosticType    diagnostic    =    methodName.restrictByNotNullOrUndefined();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
35	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName.restrictByNotNullOrUndefined(),  desiredType;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  methodName.restrictByNotNullOrUndefined(),  desiredType;  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  methodName.restrictByNotNullOrUndefined(),  desiredType;	  DiagnosticType    diagnostic    =    methodName.restrictByNotNullOrUndefined();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
36	[BUG]  [BUGGY]  if(arg  ==  null  &&  arg.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg  ==  null  &&  arg.getNext()!=  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg  ==  null  &&  arg.getNext()!=  null)  {	  if(arg!=    null    &&    arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
37	[BUG]  [BUGGY]  if(diagnostic  ==  null  ||  diagnostic.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic  ==  null  ||  diagnostic.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  null  ||  diagnostic.getType()!=  desiredType)  {	  if(diagnostic    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
38	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName.getCurrentNodeType();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  methodName.getCurrentNodeType();  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  methodName.getCurrentNodeType();	  DiagnosticType    diagnostic    =    t.getCurrentNodeType();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
39	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  t.getCurrentNodeType()  ||  methodName.equals(arg.getString());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  t.getCurrentNodeType()  ||  methodName.equals(arg.getString());  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  t.getCurrentNodeType()  ||  methodName.equals(arg.getString());	  DiagnosticType    diagnostic    =    t.getCurrentNodeType();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
40	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  t.getCurrentNodeType(methodName);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  t.getCurrentNodeType(methodName);  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  t.getCurrentNodeType(methodName);	  DiagnosticType    diagnostic    =    t.getCurrentNodeType();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
41	[BUG]  [BUGGY]  if(methodName!=  null  ||  arg.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName!=  null  ||  arg.getNext()!=  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName!=  null  ||  arg.getNext()!=  null)  {	  if(methodName!=    null    &&    arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
42	[BUG]  [BUGGY]  if(methodName  ==  null  &&  arg.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName  ==  null  &&  arg.getNext()!=  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName  ==  null  &&  arg.getNext()!=  null)  {	  if(methodName!=    null    &&    arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
43	[BUG]  [BUGGY]  if(methodName!=  null  &&  arg.getNext()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName!=  null  &&  arg.getNext()  ==  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName!=  null  &&  arg.getNext()  ==  null)  {	  if(methodName!=    null    &&    arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
44	[BUG]  [BUGGY]  if(methodName.equals(arg.getString())||  methodName.equals(arg.getNext()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.equals(arg.getString())||  methodName.equals(arg.getNext()))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg.getString())||  methodName.equals(arg.getNext()))  {	  if(methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
45	[BUG]  [BUGGY]  if(methodName.equals(arg.getString())&&  desiredType  <  NULL_ARGUMENT_ERROR)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.equals(arg.getString())&&  desiredType  <  NULL_ARGUMENT_ERROR)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg.getString())&&  desiredType  <  NULL_ARGUMENT_ERROR)  {	  if(methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
46	[BUG]  [BUGGY]  if(methodName.equals(arg.getString())||  methodName.equals(arg.getType()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.equals(arg.getString())||  methodName.equals(arg.getType()))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg.getString())||  methodName.equals(arg.getType()))  {	  if(methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
47	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  arg.getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  arg.getNext();  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  arg.getNext();	  DiagnosticType    diagnostic    =    methodName.getNext();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
48	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName.getParent();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  methodName.getParent();  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  methodName.getParent();	  DiagnosticType    diagnostic    =    methodName.getNext();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
49	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName.getNext()  :  null;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  methodName.getNext()  :  null;  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  methodName.getNext()  :  null;	  DiagnosticType    diagnostic    =    methodName.getNext();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
50	[BUG]  [BUGGY]  diagnostic  =  methodName.replace('.',  '/').replace(':',  '/');  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  methodName.replace('.',  '/').replace(':',  '/');  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  methodName.replace('.',  '/').replace(':',  '/');	  diagnostic    =    methodName.replace('.',    '/');    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
51	[BUG]  [BUGGY]  diagnostic  =  methodName.replace('.',  '/')+  1;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  methodName.replace('.',  '/')+  1;  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  methodName.replace('.',  '/')+  1;	  diagnostic    =    methodName.replace('.',    '/');    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
52	[BUG]  [BUGGY]  diagnostic  =  arg.replace('.',  '/');  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  arg.replace('.',  '/');  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  arg.replace('.',  '/');	  diagnostic    =    methodName.replace('.',    '/');    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
53	[BUG]  [BUGGY]  if(diagnostic  ==  NULL_ARGUMENT_ERROR  ||  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic  ==  NULL_ARGUMENT_ERROR  ||  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  NULL_ARGUMENT_ERROR  ||  methodName.equals(arg.getString()))  {	  if(diagnostic    ==    NULL_ARGUMENT_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
54	[BUG]  [BUGGY]  if(diagnostic!=  NULL_ARGUMENT_ERROR  ||  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic!=  NULL_ARGUMENT_ERROR  ||  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic!=  NULL_ARGUMENT_ERROR  ||  methodName.equals(arg.getString()))  {	  if(diagnostic    ==    NULL_ARGUMENT_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
55	[BUG]  [BUGGY]  if(methodName!=  null  &&  diagnostic.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName!=  null  &&  diagnostic.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName!=  null  &&  diagnostic.equals(arg.getString()))  {	  if(diagnostic!=    null    &&    methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
56	[BUG]  [BUGGY]  if(methodName!=  null  &&  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName!=  null  &&  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName!=  null  &&  methodName.equals(arg.getString()))  {	  if(diagnostic!=    null    &&    methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
57	[BUG]  [BUGGY]  if(methodName  ==  null  &&  diagnostic.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName  ==  null  &&  diagnostic.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName  ==  null  &&  diagnostic.equals(arg.getString()))  {	  if(diagnostic!=    null    &&    methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
58	[BUG]  [BUGGY]  if(methodName!=  null  &&  pathName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName!=  null  &&  pathName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName!=  null  &&  pathName.equals(arg.getString()))  {	  if(diagnostic!=    null    &&    methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
59	[BUG]  [BUGGY]  if(methodName!=  null  &&  methodName.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName!=  null  &&  methodName.length()  >  0)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName!=  null  &&  methodName.length()  >  0)  {	  if(diagnostic!=    null    &&    methodName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
60	[BUG]  [BUGGY]  if(methodName!=  null  &&  diagnostic.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName!=  null  &&  diagnostic.length()  >  0)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName!=  null  &&  diagnostic.length()  >  0)  {	  if(diagnostic!=    null    &&    methodName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
61	[BUG]  [BUGGY]  if(methodName  ==  null  &&  methodName.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName  ==  null  &&  methodName.length()  >  0)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName  ==  null  &&  methodName.length()  >  0)  {	  if(diagnostic!=    null    &&    methodName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
62	[BUG]  [BUGGY]  if(diagnostic  ==  null  &&  arg.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic  ==  null  &&  arg.getNext()!=  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  null  &&  arg.getNext()!=  null)  {	  if(diagnostic    ==    null    ||    arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
63	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  new  DiagnosticType(methodName,  desiredType);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  new  DiagnosticType(methodName,  desiredType);  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  new  DiagnosticType(methodName,  desiredType);	  DiagnosticType    diagnostic    =    null;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
64	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  new  DiagnosticType(methodName);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  new  DiagnosticType(methodName);  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  new  DiagnosticType(methodName);	  DiagnosticType    diagnostic    =    null;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
65	[BUG]  [BUGGY]  diagnostic  =  methodName.replace('.',  '_').replace('_',  '_');  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  methodName.replace('.',  '_').replace('_',  '_');  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  methodName.replace('.',  '_').replace('_',  '_');	  diagnostic    =    methodName.replace('.',    '_');    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
66	[BUG]  [BUGGY]  diagnostic  =  methodName.replace('.',  '_')+  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  methodName.replace('.',  '_')+  1;  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  methodName.replace('.',  '_')+  1;	  diagnostic    =    methodName.replace('.',    '_');    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
67	[BUG]  [BUGGY]  diagnostic  =  arg.replace('.',  '_');  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  arg.replace('.',  '_');  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  arg.replace('.',  '_');	  diagnostic    =    methodName.replace('.',    '_');    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
68	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  methodName.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic!=  null  &&  methodName.length()  ==  0)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic!=  null  &&  methodName.length()  ==  0)  {	  if(diagnostic!=    null    &&    methodName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
69	[BUG]  [BUGGY]  if(diagnostic  ==  null  &&  methodName.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic  ==  null  &&  methodName.length()  >  0)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  null  &&  methodName.length()  >  0)  {	  if(diagnostic!=    null    &&    methodName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
70	[BUG]  [BUGGY]  if(diagnostic!=  NULL_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic!=  NULL_OBJECT)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic!=  NULL_OBJECT)  {	  if(diagnostic    ==    NULL_ARGUMENT_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
71	[BUG]  [BUGGY]  if(diagnostic!=  NULL_OBJECT  ||  diagnostic  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic!=  NULL_OBJECT  ||  diagnostic  ==  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic!=  NULL_OBJECT  ||  diagnostic  ==  null)  {	  if(diagnostic    ==    NULL_ARGUMENT_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
72	[BUG]  [BUGGY]  if(diagnostic  ==  NULL_OBJECT)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic  ==  NULL_OBJECT)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  NULL_OBJECT)  {	  if(diagnostic    ==    NULL_ARGUMENT_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
73	[BUG]  [BUGGY]  if(diagnostic  ==  null  ||  arg.getType()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic  ==  null  ||  arg.getType()  ==  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  null  ||  arg.getType()  ==  desiredType)  {	  if(diagnostic    ==    null    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
74	[BUG]  [BUGGY]  if(diagnostic  ==  null  ||  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic  ==  null  ||  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  null  ||  methodName.equals(arg.getString()))  {	  if(diagnostic    ==    null    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
75	[BUG]  [BUGGY]  diagnostic  =  MethodName.NOT_OBJECT;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  MethodName.NOT_OBJECT;  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  MethodName.NOT_OBJECT;	  diagnostic    =    methodName;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
76	[BUG]  [BUGGY]  diagnostic  =  DEFAULT_TYPE;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  DEFAULT_TYPE;  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  DEFAULT_TYPE;	  diagnostic    =    methodName;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
77	[BUG]  [BUGGY]  diagnostic  =  t.getScope().replace('.',  '/');  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  t.getScope().replace('.',  '/');  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  t.getScope().replace('.',  '/');	  diagnostic    =    methodName.replace('.',    '/');    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
78	[BUG]  [BUGGY]  if(methodName.equals(arg.getString())&&  desiredType  ==  NULL_ARGUMENT_ERROR)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.equals(arg.getString())&&  desiredType  ==  NULL_ARGUMENT_ERROR)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg.getString())&&  desiredType  ==  NULL_ARGUMENT_ERROR)  {	  if(methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
79	[BUG]  [BUGGY]  if(methodName.equals(arg.getNext()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.equals(arg.getNext()))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg.getNext()))  {	  if(methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
80	[BUG]  [BUGGY]  if(arg  ==  null  ||  arg.getType()!=  typeName)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg  ==  null  ||  arg.getType()!=  typeName)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg  ==  null  ||  arg.getType()!=  typeName)  {	  if(arg    ==    null    ||    arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
81	[BUG]  [BUGGY]  diagnostic  =  methodName.restrictByNotNullOrUndefined(),  desiredType;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  methodName.restrictByNotNullOrUndefined(),  desiredType;  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  methodName.restrictByNotNullOrUndefined(),  desiredType;	  diagnostic    =    methodName.restrictByNotNullOrUndefined();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
82	[BUG]  [BUGGY]  if(unwrappedType  ==  null  ||  desiredType  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(unwrappedType  ==  null  ||  desiredType  ==  0)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(unwrappedType  ==  null  ||  desiredType  ==  0)  {	  if(arg!=    null    ||    desiredType    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
83	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  arg.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic!=  null  &&  arg.getNext()!=  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic!=  null  &&  arg.getNext()!=  null)  {	  if(arg!=    null    ||    arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
84	[BUG]  [BUGGY]  if(diagnostic!=  NULL_ARGUMENT_ERROR  &&  arg.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic!=  NULL_ARGUMENT_ERROR  &&  arg.getNext()!=  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic!=  NULL_ARGUMENT_ERROR  &&  arg.getNext()!=  null)  {	  if(arg!=    null    &&    arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
85	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  new  DiagnosticType(methodName,  arg,  desiredType);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  new  DiagnosticType(methodName,  arg,  desiredType);  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  new  DiagnosticType(methodName,  arg,  desiredType);	  DiagnosticType    diagnostic    =    null;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
86	[BUG]  [BUGGY]  if(arg!=  null  &&  arg.getString().endsWith( ".__ "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg!=  null  &&  arg.getString().endsWith( ".__ "))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg!=  null  &&  arg.getString().endsWith( ".__ "))  {	  if(arg!=    null    &&    arg.getString().endsWith(   "__   "))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
87	[BUG]  [BUGGY]  if(methodName  ==  null  ||  arg.getNext()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName  ==  null  ||  arg.getNext()  ==  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName  ==  null  ||  arg.getNext()  ==  null)  {	  if(methodName    ==    null    ||    arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
88	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName.getParameterType(0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  methodName.getParameterType(0);  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  methodName.getParameterType(0);	  DiagnosticType    diagnostic    =    methodName.getNext();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
89	[BUG]  [BUGGY]  if(diagnostic  ==  NULL_ARGUMENT_ERROR  ||  arg.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic  ==  NULL_ARGUMENT_ERROR  ||  arg.getNext()!=  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  NULL_ARGUMENT_ERROR  ||  arg.getNext()!=  null)  {	  if(diagnostic    ==    null    ||    arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
90	[BUG]  [BUGGY]  if(methodName.equals(arg)||  arg.getType()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.equals(arg)||  arg.getType()  ==  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg)||  arg.getType()  ==  desiredType)  {	  if(arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
91	[BUG]  [BUGGY]  if(methodName.equals(arg)&&  arg.getType()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.equals(arg)&&  arg.getType()  ==  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg)&&  arg.getType()  ==  desiredType)  {	  if(arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
92	[BUG]  [BUGGY]  diagnostic  =  t.getScope().replace('.',  '_');  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  t.getScope().replace('.',  '_');  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  t.getScope().replace('.',  '_');	  diagnostic    =    methodName.replace('.',    '_');    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
93	[BUG]  [BUGGY]  if(diagnostic  ==  NULL_OBJECT  ||  diagnostic!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic  ==  NULL_OBJECT  ||  diagnostic!=  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  NULL_OBJECT  ||  diagnostic!=  null)  {	  if(diagnostic    ==    NULL_ARGUMENT_ERROR    ||    diagnostic!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
94	[BUG]  [BUGGY]  if(diagnostic!=  NULL_OBJECT  ||  diagnostic!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic!=  NULL_OBJECT  ||  diagnostic!=  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic!=  NULL_OBJECT  ||  diagnostic!=  null)  {	  if(diagnostic    ==    NULL_ARGUMENT_ERROR    ||    diagnostic!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
95	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  t.getGenericNodeType();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  t.getGenericNodeType();  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  t.getGenericNodeType();	  DiagnosticType    diagnostic    =    t.getCurrentNodeType();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
96	[BUG]  [BUGGY]  if(methodName.equals(arg)||  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.equals(arg)||  arg.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg)||  arg.getType()!=  desiredType)  {	  if(arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
97	[BUG]  [BUGGY]  if(methodName.equals(arg)&&  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.equals(arg)&&  arg.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg)&&  arg.getType()!=  desiredType)  {	  if(arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
98	[BUG]  [BUGGY]  if(methodName.equals(arg.getString())||  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.equals(arg.getString())||  arg.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg.getString())||  arg.getType()!=  desiredType)  {	  if(arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
99	[BUG]  [BUGGY]  if(arg  ==  null  ||  arg.getNext()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg  ==  null  ||  arg.getNext()  ==  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg  ==  null  ||  arg.getNext()  ==  desiredType)  {	  if(arg    ==    null    ||    arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
100	[BUG]  [BUGGY]  diagnostic  =  methodName.toString();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  methodName.toString();  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  methodName.toString();	  diagnostic    =    methodName;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
101	[BUG]  [BUGGY]  diagnostic  =  methodName.replace('_',  '_');  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  methodName.replace('_',  '_');  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  methodName.replace('_',  '_');	  diagnostic    =    methodName;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
102	[BUG]  [BUGGY]  diagnostic  =  t.getScope().restrictByNotNullOrUndefined();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  t.getScope().restrictByNotNullOrUndefined();  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  t.getScope().restrictByNotNullOrUndefined();	  diagnostic    =    methodName.restrictByNotNullOrUndefined();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
103	[BUG]  [BUGGY]  if(diagnostic!=  NULL_ARGUMENT_ERROR  &&  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic!=  NULL_ARGUMENT_ERROR  &&  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic!=  NULL_ARGUMENT_ERROR  &&  methodName.equals(arg.getString()))  {	  if(diagnostic!=    NULL_ARGUMENT_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
104	[BUG]  [BUGGY]  if(methodName  ==  null  ||  arg.getNext()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName  ==  null  ||  arg.getNext()!=  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName  ==  null  ||  arg.getNext()!=  desiredType)  {	  if(methodName    ==    null    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
105	[BUG]  [BUGGY]  if(methodName.equals(arg)||  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.equals(arg)||  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg)||  methodName.equals(arg.getString()))  {	  if(arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
106	[BUG]  [BUGGY]  if(methodName.isQualifiedName()  &&  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.isQualifiedName()  &&  arg.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.isQualifiedName()  &&  arg.getType()!=  desiredType)  {	  if(arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
107	[BUG]  [BUGGY]  if(arg!=  null  ||  arg.getType()  ==  methodName)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg!=  null  ||  arg.getType()  ==  methodName)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg!=  null  ||  arg.getType()  ==  methodName)  {	  if(arg!=    null    ||    arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
108	[BUG]  [BUGGY]  if(diagnostic  ==  NULL_ARGUMENT_ERROR  ||  methodName!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic  ==  NULL_ARGUMENT_ERROR  ||  methodName!=  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  NULL_ARGUMENT_ERROR  ||  methodName!=  null)  {	  if(diagnostic    ==    NULL_ARGUMENT_ERROR    ||    diagnostic!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
109	[BUG]  [BUGGY]  if(methodName.isQualifiedName()  &&  arg.getType()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.isQualifiedName()  &&  arg.getType()  ==  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.isQualifiedName()  &&  arg.getType()  ==  desiredType)  {	  if(arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
110	[BUG]  [BUGGY]  if(methodName.equals(arg.getString())&&(arg.getType()  ==  desiredType))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.equals(arg.getString())&&(arg.getType()  ==  desiredType))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg.getString())&&(arg.getType()  ==  desiredType))  {	  if(arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
111	[BUG]  [BUGGY]  if(arg  ==  null  ||  arg.getNext()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg  ==  null  ||  arg.getNext()  ==  null)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg  ==  null  ||  arg.getNext()  ==  null)  {	  if(arg!=    null    ||    arg.getNext()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
112	[BUG]  [BUGGY]  if(methodName  ==  null  &&  diagnostic!=  null  &&  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName  ==  null  &&  diagnostic!=  null  &&  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName  ==  null  &&  diagnostic!=  null  &&  methodName.equals(arg.getString()))  {	  if(diagnostic!=    null    &&    methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
113	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  methodName.getQualifiedName();  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  methodName.getQualifiedName();	  DiagnosticType    diagnostic    =    methodName.getNext();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
114	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  methodName;  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  methodName;	  DiagnosticType    diagnostic    =    null;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
115	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  t;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  t;  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  t;	  DiagnosticType    diagnostic    =    null;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
116	[BUG]  [BUGGY]  diagnostic  =  MethodName.replace('.',  '_');  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  MethodName.replace('.',  '_');  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  MethodName.replace('.',  '_');	  diagnostic    =    methodName.replace('.',    '_');    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
117	[BUG]  [BUGGY]  diagnostic  =  MethodName.replace('.',  '/');  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  diagnostic  =  MethodName.replace('.',  '/');  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  MethodName.replace('.',  '/');	  diagnostic    =    methodName.replace('.',    '/');    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
118	[BUG]  [BUGGY]  if(diagnostic  ==  NULL_ARGUMENT_ERROR  &&  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(diagnostic  ==  NULL_ARGUMENT_ERROR  &&  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  NULL_ARGUMENT_ERROR  &&  methodName.equals(arg.getString()))  {	  if(diagnostic    ==    NULL_ARGUMENT_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
119	[BUG]  [BUGGY]  if(methodName!=  null  &&  arg.getType()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName!=  null  &&  arg.getType()  ==  desiredType)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName!=  null  &&  arg.getType()  ==  desiredType)  {	  if(methodName!=    null    &&    arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
120	[BUG]  [BUGGY]  if(arg!=  null  &&  desiredType  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(arg!=  null  &&  desiredType  ==  0)  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg!=  null  &&  desiredType  ==  0)  {	  if(arg!=    null    ||    desiredType    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
121	[BUG]  [BUGGY]  if(methodName.equals(arg.getString())&&  desiredType  <  NULL_ARGUMENT_ERROR  ||  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  if(methodName.equals(arg.getString())&&  desiredType  <  NULL_ARGUMENT_ERROR  ||  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg.getString())&&  desiredType  <  NULL_ARGUMENT_ERROR  ||  methodName.equals(arg.getString()))  {	  if(methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
122	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName  ==  null?  t.getCurrentNodeType()  :  methodName;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;      [BUGGY]  DiagnosticType  diagnostic  =  methodName  ==  null?  t.getCurrentNodeType()  :  methodName;  [BUGGY]      diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  methodName  ==  null?  t.getCurrentNodeType()  :  methodName;	  DiagnosticType    diagnostic    =    t.getCurrentNodeType();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
