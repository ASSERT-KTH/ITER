bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(arg!=  null  ||  desiredType  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(arg!=  null  ||  desiredType  ==  0)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg!=  null  ||  desiredType  ==  0)  {	  if(arg!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  diagnostic  =  methodName;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  diagnostic  =  methodName;  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  methodName;	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
3	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName.getNext();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  DiagnosticType  diagnostic  =  methodName.getNext();  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  methodName.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
4	[BUG]  [BUGGY]  diagnostic  =  methodName.getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  diagnostic  =  methodName.getNext();  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  methodName.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
5	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  null;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  DiagnosticType  diagnostic  =  null;  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  null;	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  if(arg!=  null  ||  arg.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(arg!=  null  ||  arg.getNext()!=  null)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg!=  null  ||  arg.getNext()!=  null)  {	  if(arg    ==    null    ||    arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  if(arg!=  null  ||  arg.getNext()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(arg!=  null  ||  arg.getNext()  ==  null)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg!=  null  ||  arg.getNext()  ==  null)  {	  if(arg    ==    null    ||    arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  if(arg.getType()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(arg.getType()  ==  desiredType)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg.getType()  ==  desiredType)  {	  if(arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  if(arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(arg.getType()!=  desiredType)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg.getType()!=  desiredType)  {	  if(arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  if(arg.getNext()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(arg.getNext()  ==  null)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg.getNext()  ==  null)  {	  if(arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  if(arg!=  null  ||  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(arg!=  null  ||  arg.getType()!=  desiredType)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg!=  null  ||  arg.getType()!=  desiredType)  {	  if(arg    ==    null    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  if(arg!=  null  ||  arg.getType()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(arg!=  null  ||  arg.getType()  ==  desiredType)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg!=  null  ||  arg.getType()  ==  desiredType)  {	  if(arg    ==    null    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
13	[BUG]  [BUGGY]  if(methodName  ==  null  ||  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(methodName  ==  null  ||  arg.getType()!=  desiredType)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName  ==  null  ||  arg.getType()!=  desiredType)  {	  if(arg    ==    null    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
14	[BUG]  [BUGGY]  if(diagnostic  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(diagnostic  ==  null)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  null)  {	  if(diagnostic!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  if(diagnostic  ==  NULL_ARGUMENT_ERROR)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(diagnostic  ==  NULL_ARGUMENT_ERROR)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  NULL_ARGUMENT_ERROR)  {	  if(diagnostic!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
16	[BUG]  [BUGGY]  if(diagnostic  ==  NULL_ARGUMENT_ERROR  ||  diagnostic!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(diagnostic  ==  NULL_ARGUMENT_ERROR  ||  diagnostic!=  null)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  NULL_ARGUMENT_ERROR  ||  diagnostic!=  null)  {	  if(diagnostic!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
17	[BUG]  [BUGGY]  diagnostic  =  methodName.restrictByNotNullOrUndefined();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  diagnostic  =  methodName.restrictByNotNullOrUndefined();  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  methodName.restrictByNotNullOrUndefined();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
18	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  t.getCurrentNodeType();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  DiagnosticType  diagnostic  =  t.getCurrentNodeType();  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  t.getCurrentNodeType();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
19	[BUG]  [BUGGY]  if(methodName  ==  null  ||  arg.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(methodName  ==  null  ||  arg.getNext()!=  null)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName  ==  null  ||  arg.getNext()!=  null)  {	  if(arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
20	[BUG]  [BUGGY]  if(methodName!=  null  &&  arg.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(methodName!=  null  &&  arg.getNext()!=  null)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName!=  null  &&  arg.getNext()!=  null)  {	  if(arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
21	[BUG]  [BUGGY]  if(diagnostic!=  NULL_ARGUMENT_ERROR)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(diagnostic!=  NULL_ARGUMENT_ERROR)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic!=  NULL_ARGUMENT_ERROR)  {	  if(diagnostic!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
22	[BUG]  [BUGGY]  if(diagnostic  ==  null  ||  arg.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(diagnostic  ==  null  ||  arg.getNext()!=  null)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  null  ||  arg.getNext()!=  null)  {	  if(arg    ==    null    ||    arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  if(diagnostic  ==  null  ||  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(diagnostic  ==  null  ||  arg.getType()!=  desiredType)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic  ==  null  ||  arg.getType()!=  desiredType)  {	  if(arg    ==    null    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
24	[BUG]  [BUGGY]  if(arg  ==  null  ||  arg.getType()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(arg  ==  null  ||  arg.getType()  ==  desiredType)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg  ==  null  ||  arg.getType()  ==  desiredType)  {	  if(arg    ==    null    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
25	[BUG]  [BUGGY]  if(methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(methodName.equals(arg.getString()))  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(methodName.equals(arg.getString()))  {	  if(arg.getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
26	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName.restrictByNotNullOrUndefined();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  DiagnosticType  diagnostic  =  methodName.restrictByNotNullOrUndefined();  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	DiagnosticType  diagnostic  =  methodName.restrictByNotNullOrUndefined();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  diagnostic  =  methodName.replace('.',  '_');  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  diagnostic  =  methodName.replace('.',  '_');  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  methodName.replace('.',  '_');	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  diagnostic  =  methodName.replace('.',  '/');  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  diagnostic  =  methodName.replace('.',  '/');  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	diagnostic  =  methodName.replace('.',  '/');	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
29	[BUG]  [BUGGY]  if(arg!=  null  &&  arg.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(arg!=  null  &&  arg.getNext()!=  null)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg!=  null  &&  arg.getNext()!=  null)  {	  if(arg!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
30	[BUG]  [BUGGY]  if(arg!=  null  &&  arg.getString().endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(arg!=  null  &&  arg.getString().endsWith( "__ "))  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(arg!=  null  &&  arg.getString().endsWith( "__ "))  {	  if(arg!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
31	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(diagnostic!=  null  &&  methodName.equals(arg.getString()))  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic!=  null  &&  methodName.equals(arg.getString()))  {	  if(diagnostic!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  methodName.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;    [BUGGY]  if(diagnostic!=  null  &&  methodName.length()  >  0)  {  [BUGGY]    diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	611	611	1	replace	if(diagnostic!=  null  &&  methodName.length()  >  0)  {	  if(diagnostic!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
