bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  n  =  methodName.getNext().getString();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  String  n  =  methodName.getNext().getString();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	String  n  =  methodName.getNext().getString();	  String    n    =    name.getNext().getString();    	non-compiled	[CE]  orphaned  case	13	None	replace
2	[BUG]  [BUGGY]  String  n  =  name.getNext().getValue();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  String  n  =  name.getNext().getValue();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	String  n  =  name.getNext().getValue();	  String    n    =    name.getNext().getString();    	non-compiled	[CE]  orphaned  case	13	None	replace
3	[BUG]  [BUGGY]  String  n  =  name.getName().getString();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  String  n  =  name.getName().getString();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	String  n  =  name.getName().getString();	  String    n    =    name.getNext().getString();    	non-compiled	[CE]  orphaned  case	13	None	replace
4	[BUG]  [BUGGY]  if(methodName!=  null  ||   "baseClass ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  ||   "baseClass ".equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  ||   "baseClass ".equals(methodName))  {	  if(methodName    ==    null    ||       "baseClass   ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
5	[BUG]  [BUGGY]  if(methodName!=  null  ||  isBaseClassCall(t,  n))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  ||  isBaseClassCall(t,  n))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  ||  isBaseClassCall(t,  n))  {	  if(methodName!=    null    &&    isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
6	[BUG]  [BUGGY]  if(methodName  ==  null  &&  isBaseClassCall(t,  n))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName  ==  null  &&  isBaseClassCall(t,  n))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName  ==  null  &&  isBaseClassCall(t,  n))  {	  if(methodName!=    null    &&    isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
7	[BUG]  [BUGGY]  if(methodName  ==  null  ||  isBaseClassCall(t,  n))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName  ==  null  ||  isBaseClassCall(t,  n))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName  ==  null  ||  isBaseClassCall(t,  n))  {	  if(methodName!=    null    &&    isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
8	[BUG]  [BUGGY]  n  =  methodName.getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  n  =  methodName.getNext();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	n  =  methodName.getNext();	  n    =    name.getNext();    	non-compiled	[CE]  orphaned  case	45	None	replace
9	[BUG]  [BUGGY]  n  =  name.getNext().getString();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  n  =  name.getNext().getString();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	n  =  name.getNext().getString();	  n    =    name.getNext();    	non-compiled	[CE]  orphaned  case	45	None	replace
10	[BUG]  [BUGGY]  n  =  name.getNext().getValue();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  n  =  name.getNext().getValue();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	n  =  name.getNext().getValue();	  n    =    name.getNext();    	non-compiled	[CE]  orphaned  case	45	None	replace
11	[BUG]  [BUGGY]  if(methodName!=  null  &&  methodName.equals( "base "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  &&  methodName.equals( "base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  &&  methodName.equals( "base "))  {	  if(methodName!=    null    &&       "base   ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
12	[BUG]  [BUGGY]  if(methodName.equals( "base ")&&  n.startsWith(methodName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "base ")&&  n.startsWith(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "base ")&&  n.startsWith(methodName))  {	  if(   "base       ".equals(methodName)&&    n.startsWith(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
13	[BUG]  [BUGGY]  if( "base   ".equals(methodName)&&  name.startsWith(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if( "base   ".equals(methodName)&&  name.startsWith(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if( "base   ".equals(methodName)&&  name.startsWith(methodName))  {	  if(   "base       ".equals(methodName)||    name.startsWith(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
14	[BUG]  [BUGGY]  if(methodName.equals( "base ")||  methodName.startsWith( "base "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "base ")||  methodName.startsWith( "base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "base ")||  methodName.startsWith( "base "))  {	  if(   "base       ".equals(methodName)||    name.startsWith(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
15	[BUG]  [BUGGY]  if( "base   ".equals(methodName)||  methodName.startsWith( "base "))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if( "base   ".equals(methodName)||  methodName.startsWith( "base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if( "base   ".equals(methodName)||  methodName.startsWith( "base "))  {	  if(   "base       ".equals(methodName)||    name.startsWith(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
16	[BUG]  [BUGGY]  if(methodName.equals( "base ")&&  methodName.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "base ")&&  methodName.length()  ==  0)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "base ")&&  methodName.length()  ==  0)  {	  if(methodName.equals(   "base   ")||    methodName.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
17	[BUG]  [BUGGY]  if(methodName.equals( "base ")||  methodName.length()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "base ")||  methodName.length()  ==  1)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "base ")||  methodName.length()  ==  1)  {	  if(methodName.equals(   "base   ")||    methodName.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
18	[BUG]  [BUGGY]  if(methodName.equals( "baseClass ")||  methodName.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "baseClass ")||  methodName.length()  ==  0)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "baseClass ")||  methodName.length()  ==  0)  {	  if(methodName.equals(   "base   ")||    methodName.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
19	[BUG]  [BUGGY]  if( "base   ".equals(methodName)&&  n.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if( "base   ".equals(methodName)&&  n.length()  ==  0)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if( "base   ".equals(methodName)&&  n.length()  ==  0)  {	  if(   "base       ".equals(methodName)&&    methodName.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
20	[BUG]  [BUGGY]  n.setMethodName(methodName)&&  isExpr;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  n.setMethodName(methodName)&&  isExpr;  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	n.setMethodName(methodName)&&  isExpr;	  n.setMethodName(methodName);    	non-compiled	[CE]  not  a  statement	43	None	replace
21	[BUG]  [BUGGY]  n.setMethodName(methodName,  t);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  n.setMethodName(methodName,  t);  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	n.setMethodName(methodName,  t);	  n.setMethodName(methodName);    	non-compiled	[CE]  orphaned  case	43	None	replace
22	[BUG]  [BUGGY]  if(!isConstructor()  &&!methodName.equals( "base "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isConstructor()  &&!methodName.equals( "base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isConstructor()  &&!methodName.equals( "base "))  {	  if(!isConstructor()    &&!   "base       ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
23	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n)||  methodName.startsWith( "class   "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n)||  methodName.startsWith( "class   "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n)||  methodName.startsWith( "class   "))  {	  if(isBaseClassCall(t,    n)&&    methodName.startsWith(   "class   "))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
24	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n)&&  methodName.startsWith( ".class "))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n)&&  methodName.startsWith( ".class "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n)&&  methodName.startsWith( ".class "))  {	  if(isBaseClassCall(t,    n)&&    methodName.startsWith(   "class   "))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
25	[BUG]  [BUGGY]  if(methodName!=  null  &&  isBaseClassCall(t,  n)&&  methodName.startsWith( "class   "))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  &&  isBaseClassCall(t,  n)&&  methodName.startsWith( "class   "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  &&  isBaseClassCall(t,  n)&&  methodName.startsWith( "class   "))  {	  if(isBaseClassCall(t,    n)&&    methodName.startsWith(   "class   "))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
26	[BUG]  [BUGGY]  t  =  n.getParent();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  t  =  n.getParent();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	t  =  n.getParent();	  t    =    n.getNext();    	non-compiled	[CE]  orphaned  case	16	None	replace
27	[BUG]  [BUGGY]  t  =  methodName.getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  t  =  methodName.getNext();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	t  =  methodName.getNext();	  t    =    n.getNext();    	non-compiled	[CE]  orphaned  case	16	None	replace
28	[BUG]  [BUGGY]  t  =  n.getCurrentToken();  [CE]  orphaned  case  [FE]                            AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  t  =  n.getCurrentToken();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	t  =  n.getCurrentToken();	  t    =    n.getNext();    	non-compiled	[CE]  orphaned  case	16	None	replace
29	[BUG]  [BUGGY]  Method  t  =  getMethod(methodName,  n);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  Method  t  =  getMethod(methodName,  n);  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	Method  t  =  getMethod(methodName,  n);	  Method    t    =    getMethod(methodName);    	non-compiled	[CE]  orphaned  case	33	None	replace
30	[BUG]  [BUGGY]  Method  t  =  getMethod(methodName.toLowerCase());  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  Method  t  =  getMethod(methodName.toLowerCase());  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	Method  t  =  getMethod(methodName.toLowerCase());	  Method    t    =    getMethod(methodName);    	non-compiled	[CE]  orphaned  case	33	None	replace
31	[BUG]  [BUGGY]  Method  t  =  getMethod(n);  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  Method  t  =  getMethod(n);  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	Method  t  =  getMethod(n);	  Method    t    =    getMethod(methodName);    	non-compiled	[CE]  orphaned  case	33	None	replace
32	[BUG]  [BUGGY]  if(methodName.equals( "base ")||  methodName.equals( "base "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "base ")||  methodName.equals( "base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "base ")||  methodName.equals( "base "))  {	  if(methodName.equals(   "base   "))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
33	[BUG]  [BUGGY]  if(methodName.equals(n)&&  isBaseClassCall(t,  n))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals(n)&&  isBaseClassCall(t,  n))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals(n)&&  isBaseClassCall(t,  n))  {	  if(n.equals(methodName)&&    isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
34	[BUG]  [BUGGY]  if(!methodName.equals(methodName)&&  isBaseClassCall(t,  n))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!methodName.equals(methodName)&&  isBaseClassCall(t,  n))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!methodName.equals(methodName)&&  isBaseClassCall(t,  n))  {	  if(n.equals(methodName)&&    isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
35	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n.equals(methodName))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n.equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n.equals(methodName))  {	  if(n.equals(methodName)&&    isBaseClassCall(t,    n))    {    	non-compiled	[CE]  ')'  expected	12	None	replace
36	[BUG]  [BUGGY]  Method  t  =  methodName.toLowerCase(Locale.ENGLISH);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  Method  t  =  methodName.toLowerCase(Locale.ENGLISH);  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	Method  t  =  methodName.toLowerCase(Locale.ENGLISH);	  Method    t    =    methodName.toLowerCase();    	non-compiled	[CE]  orphaned  case	34	None	replace
37	[BUG]  [BUGGY]  Method  t  =  name.toLowerCase();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  Method  t  =  name.toLowerCase();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	Method  t  =  name.toLowerCase();	  Method    t    =    methodName.toLowerCase();    	non-compiled	[CE]  orphaned  case	34	None	replace
38	[BUG]  [BUGGY]  Method  t  =  n.toLowerCase();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  Method  t  =  n.toLowerCase();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	Method  t  =  n.toLowerCase();	  Method    t    =    methodName.toLowerCase();    	non-compiled	[CE]  orphaned  case	34	None	replace
39	[BUG]  [BUGGY]  if(!methodName.equals( "baseClass "))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!methodName.equals( "baseClass "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!methodName.equals( "baseClass "))  {	  if(!methodName.equals(   "base   "))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
40	[BUG]  [BUGGY]  if(!methodName.equals( "BaseClassCall "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!methodName.equals( "BaseClassCall "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!methodName.equals( "BaseClassCall "))  {	  if(!methodName.equals(   "base   "))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
41	[BUG]  [BUGGY]  if(!methodName.equals( "base ")||!methodName.equals( "base "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!methodName.equals( "base ")||!methodName.equals( "base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!methodName.equals( "base ")||!methodName.equals( "base "))  {	  if(!methodName.equals(   "base   "))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
42	[BUG]  [BUGGY]  if(methodName!=  null  &&! "base   ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  &&! "base   ".equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  &&! "base   ".equals(methodName))  {	  if(methodName!=    null    ||!   "base       ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
43	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n)&&  methodName.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n)&&  methodName.length()  ==  0)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n)&&  methodName.length()  ==  0)  {	  if(isBaseClassCall(t,    n)&&    methodName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
44	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n)&&  methodName.length()!=  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n)&&  methodName.length()!=  0)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n)&&  methodName.length()!=  0)  {	  if(isBaseClassCall(t,    n)&&    methodName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
45	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n)||  methodName.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n)||  methodName.length()  >  0)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n)||  methodName.length()  >  0)  {	  if(isBaseClassCall(t,    n)&&    methodName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
46	[BUG]  [BUGGY]  if(methodName.equals( "BaseClassCall "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "BaseClassCall "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "BaseClassCall "))  {	  if(methodName.equals(n))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
47	[BUG]  [BUGGY]  if(methodName.equals( "baseClassCall "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "baseClassCall "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "baseClassCall "))  {	  if(methodName.equals(n))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
48	[BUG]  [BUGGY]  if(methodName!=  null  ||   "base_ ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  ||   "base_ ".equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  ||   "base_ ".equals(methodName))  {	  if(methodName    ==    null    ||       "base_   ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
49	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n)||  methodName.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n)||  methodName.equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n)||  methodName.equals(methodName))  {	  if(isBaseClassCall(t,    n)&&    methodName.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
50	[BUG]  [BUGGY]  if(!isBaseClassCall(t,  n)&&  methodName.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isBaseClassCall(t,  n)&&  methodName.equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isBaseClassCall(t,  n)&&  methodName.equals(methodName))  {	  if(isBaseClassCall(t,    n)&&    methodName.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
51	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n)&&  methodName.startsWith(methodName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n)&&  methodName.startsWith(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n)&&  methodName.startsWith(methodName))  {	  if(isBaseClassCall(t,    n)&&    methodName.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
52	[BUG]  [BUGGY]  if(!isBaseClassCall(methodName,  n))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isBaseClassCall(methodName,  n))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isBaseClassCall(methodName,  n))  {	  if(!isBaseClassCall(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
53	[BUG]  [BUGGY]  if(isBaseClassCall(methodName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(methodName))  {	  if(!isBaseClassCall(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
54	[BUG]  [BUGGY]  if(!isBaseClassCall(methodName)&&  n!=  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isBaseClassCall(methodName)&&  n!=  0)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isBaseClassCall(methodName)&&  n!=  0)  {	  if(!isBaseClassCall(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
55	[BUG]  [BUGGY]  if(isBaseClassCall(t)||  isBaseClassCall(n)||  methodName.equals( "base "))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t)||  isBaseClassCall(n)||  methodName.equals( "base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t)||  isBaseClassCall(n)||  methodName.equals( "base "))  {	  if(isBaseClassCall(t)||    isBaseClassCall(n)||   "base       ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
56	[BUG]  [BUGGY]  if(methodName.equals( "baseClass ")||  methodName.equals( "baseClass "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "baseClass ")||  methodName.equals( "baseClass "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "baseClass ")||  methodName.equals( "baseClass "))  {	  if(methodName.equals(   "baseClass   "))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
57	[BUG]  [BUGGY]  if(methodName.equals(baseName)&&  methodName.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals(baseName)&&  methodName.length()  ==  0)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals(baseName)&&  methodName.length()  ==  0)  {	  if(methodName.equals(baseName)||    methodName.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
58	[BUG]  [BUGGY]  if(methodName.equals(baseName)||  methodName.length()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals(baseName)||  methodName.length()  ==  1)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals(baseName)||  methodName.length()  ==  1)  {	  if(methodName.equals(baseName)||    methodName.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
59	[BUG]  [BUGGY]  if(!methodName.equals( "class "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!methodName.equals( "class "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!methodName.equals( "class "))  {	  if(!methodName.equals(n))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
60	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n)||  isExpr)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n)||  isExpr)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n)||  isExpr)  {	  if(isBaseClassCall(t,    n),    methodName)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
61	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n)||  methodName.equals( "base-method "))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n)||  methodName.equals( "base-method "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n)||  methodName.equals( "base-method "))  {	  if(isBaseClassCall(t,    n)||    methodName.equals(   "base   "))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
62	[BUG]  [BUGGY]  if(methodName.equals( "base ")||  n.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "base ")||  n.length()  ==  0)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "base ")||  n.length()  ==  0)  {	  if(   "base       ".equals(methodName)||    n.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
63	[BUG]  [BUGGY]  if(!isBaseClassCall(t))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isBaseClassCall(t))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isBaseClassCall(t))  {	  if(!isBaseClassCall(n))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
64	[BUG]  [BUGGY]  if(methodName.startsWith( ".base ")||  methodName.startsWith( ".base "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.startsWith( ".base ")||  methodName.startsWith( ".base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.startsWith( ".base ")||  methodName.startsWith( ".base "))  {	  if(methodName.startsWith(   "base   ")||    methodName.startsWith(   "base   "))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
65	[BUG]  [BUGGY]  if(methodName.startsWith( "base ")||  methodName.startsWith( ".base "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.startsWith( "base ")||  methodName.startsWith( ".base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.startsWith( "base ")||  methodName.startsWith( ".base "))  {	  if(methodName.startsWith(   "base   ")||    methodName.startsWith(   "base   "))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
66	[BUG]  [BUGGY]  if(methodName.startsWith( ".base ")||  methodName.startsWith( "base "))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.startsWith( ".base ")||  methodName.startsWith( "base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.startsWith( ".base ")||  methodName.startsWith( "base "))  {	  if(methodName.startsWith(   "base   ")||    methodName.startsWith(   "base   "))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
67	[BUG]  [BUGGY]  Method  t  =  name.getMethod();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  Method  t  =  name.getMethod();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	Method  t  =  name.getMethod();	  Method    t    =    methodName.getMethod();    	non-compiled	[CE]  orphaned  case	14	None	replace
68	[BUG]  [BUGGY]  Method  t  =  n.getMethod();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  Method  t  =  n.getMethod();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	Method  t  =  n.getMethod();	  Method    t    =    methodName.getMethod();    	non-compiled	[CE]  orphaned  case	14	None	replace
69	[BUG]  [BUGGY]  Method  t  =  methodName.getReturnType();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  Method  t  =  methodName.getReturnType();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	Method  t  =  methodName.getReturnType();	  Method    t    =    methodName.getMethod();    	non-compiled	[CE]  orphaned  case	14	None	replace
70	[BUG]  [BUGGY]  if(methodName.equals( "baseclass ")||  methodName.equals( "baseclass "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "baseclass ")||  methodName.equals( "baseclass "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "baseclass ")||  methodName.equals( "baseclass "))  {	  if(methodName.equals(   "baseclass   "))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
71	[BUG]  [BUGGY]  if( "baseclass ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if( "baseclass ".equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if( "baseclass ".equals(methodName))  {	  if(methodName.equals(   "baseclass   "))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
72	[BUG]  [BUGGY]  if( "baseClassCalls   ".equals(methodName)&&  n.startsWith(methodName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if( "baseClassCalls   ".equals(methodName)&&  n.startsWith(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if( "baseClassCalls   ".equals(methodName)&&  n.startsWith(methodName))  {	  if(   "baseClassCalls   ".equals(methodName)||    n.startsWith(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
73	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n)||  isBaseName(methodName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n)||  isBaseName(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n)||  isBaseName(methodName))  {	  if(isBaseClassCall(t,    n)&&    isBaseName(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
74	[BUG]  [BUGGY]  if(isExpr(t,  n)&&  isBaseName(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isExpr(t,  n)&&  isBaseName(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isExpr(t,  n)&&  isBaseName(methodName))  {	  if(isBaseClassCall(t,    n)&&    isBaseName(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
75	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n)&&  methodName.equals( "require "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n)&&  methodName.equals( "require "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n)&&  methodName.equals( "require "))  {	  if(isBaseClassCall(t,    n)||    methodName.equals(   "require   "))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
76	[BUG]  [BUGGY]  if(!isBaseClassCall(t)&&! "base   ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isBaseClassCall(t)&&! "base   ".equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isBaseClassCall(t)&&! "base   ".equals(methodName))  {	  if(!isBaseClassCall(n)&&!   "base       ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
77	[BUG]  [BUGGY]  if(!isBaseClassCall(t,  n)&&! "base   ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isBaseClassCall(t,  n)&&! "base   ".equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isBaseClassCall(t,  n)&&! "base   ".equals(methodName))  {	  if(!isBaseClassCall(n)&&!   "base       ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
78	[BUG]  [BUGGY]  String  n  =  methodName.getNext();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  String  n  =  methodName.getNext();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	String  n  =  methodName.getNext();	  String    n    =    name.getNext();    	non-compiled	[CE]  orphaned  case	15	None	replace
79	[BUG]  [BUGGY]  String  n  =  name.getNext().toString();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  String  n  =  name.getNext().toString();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	String  n  =  name.getNext().toString();	  String    n    =    name.getNext();    	non-compiled	[CE]  orphaned  case	15	None	replace
80	[BUG]  [BUGGY]  if(methodName!=  null  &&!isBaseClassCall(t,  n))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  &&!isBaseClassCall(t,  n))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  &&!isBaseClassCall(t,  n))  {	  if(!isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
81	[BUG]  [BUGGY]  if(!isBaseClassCall(t,  n)&&  methodName.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isBaseClassCall(t,  n)&&  methodName.length()  >  0)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isBaseClassCall(t,  n)&&  methodName.length()  >  0)  {	  if(!isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
82	[BUG]  [BUGGY]  if(!isBaseClassCall(t,  n),  methodName)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isBaseClassCall(t,  n),  methodName)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isBaseClassCall(t,  n),  methodName)  {	  if(!isBaseClassCall(t,    n))    {    	non-compiled	[CE]  	6	None	replace
83	[BUG]  [BUGGY]  if(!isBaseClassCall(t,  n)&&  methodName.startsWith( "class "))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isBaseClassCall(t,  n)&&  methodName.startsWith( "class "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isBaseClassCall(t,  n)&&  methodName.startsWith( "class "))  {	  if(!isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
84	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n)&&  methodName.startsWith( "base "))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n)&&  methodName.startsWith( "base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n)&&  methodName.startsWith( "base "))  {	  if(isBaseClassCall(t,    n)&&       "base   ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
85	[BUG]  [BUGGY]  n.setAssertionFailedError(methodName,  t);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  n.setAssertionFailedError(methodName,  t);  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	n.setAssertionFailedError(methodName,  t);	  n.setAssertionFailedError(methodName);    	non-compiled	[CE]  orphaned  case	44	None	replace
86	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n)||  methodName!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n)||  methodName!=  null)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n)||  methodName!=  null)  {	  if(isBaseClassCall(t,    n),    methodName)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
87	[BUG]  [BUGGY]  String  n  =  name.getQualifiedName().getString();  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  String  n  =  name.getQualifiedName().getString();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	String  n  =  name.getQualifiedName().getString();	  String    n    =    name.getNext().getString();    	non-compiled	[CE]  orphaned  case	13	None	replace
88	[BUG]  [BUGGY]  if(methodName!=  null  &&   "base_ ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  &&   "base_ ".equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  &&   "base_ ".equals(methodName))  {	  if(methodName!=    null    &&       "base   ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
89	[BUG]  [BUGGY]  if(methodName!=  null  &&   "baseClass ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  &&   "baseClass ".equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  &&   "baseClass ".equals(methodName))  {	  if(methodName!=    null    &&       "base   ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
90	[BUG]  [BUGGY]  Method  t  =  getMethod(methodName,  name);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  Method  t  =  getMethod(methodName,  name);  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	Method  t  =  getMethod(methodName,  name);	  Method    t    =    getMethod(methodName);    	non-compiled	[CE]  orphaned  case	33	None	replace
91	[BUG]  [BUGGY]  if(isBaseName(methodName)&&  isBaseClassCall(t,  n))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseName(methodName)&&  isBaseClassCall(t,  n))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseName(methodName)&&  isBaseClassCall(t,  n))  {	  if(isBaseClassCall(t,    n)&&    isBaseName(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
92	[BUG]  [BUGGY]  if(isBaseName(t,  n)&&  isBaseClassCall(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseName(t,  n)&&  isBaseClassCall(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseName(t,  n)&&  isBaseClassCall(methodName))  {	  if(isBaseClassCall(t,    n)&&    isBaseName(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
93	[BUG]  [BUGGY]  t  =  n.getCurrentName();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  t  =  n.getCurrentName();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	t  =  n.getCurrentName();	  t    =    n.getNext();    	non-compiled	[CE]  orphaned  case	16	None	replace
94	[BUG]  [BUGGY]  Method  t  =  isExpr?  methodName.toLowerCase()  :  methodName;  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  Method  t  =  isExpr?  methodName.toLowerCase()  :  methodName;  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	Method  t  =  isExpr?  methodName.toLowerCase()  :  methodName;	  Method    t    =    methodName.toLowerCase();    	non-compiled	[CE]  orphaned  case	34	None	replace
95	[BUG]  [BUGGY]  n.addMethod(methodName);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  n.addMethod(methodName);  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	n.addMethod(methodName);	  n.setMethodName(methodName);    	non-compiled	[CE]  orphaned  case	43	None	replace
96	[BUG]  [BUGGY]  n.setMethodName(methodName  + "' ");  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  n.setMethodName(methodName  + "' ");  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	n.setMethodName(methodName  + "' ");	  n.setMethodName(methodName);    	non-compiled	[CE]  orphaned  case	43	None	replace
97	[BUG]  [BUGGY]  if( "baseClassCalls ".equals(methodName)||  name.startsWith(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if( "baseClassCalls ".equals(methodName)||  name.startsWith(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if( "baseClassCalls ".equals(methodName)||  name.startsWith(methodName))  {	  if(   "base       ".equals(methodName)||    name.startsWith(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
98	[BUG]  [BUGGY]  if(methodName!=  null  &&!isBaseClassCall(methodName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  &&!isBaseClassCall(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  &&!isBaseClassCall(methodName))  {	  if(!isBaseClassCall(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
99	[BUG]  [BUGGY]  if(methodName!=  null  ||!isClassCall(methodName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  ||!isClassCall(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  ||!isClassCall(methodName))  {	  if(!isClassCall(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
100	[BUG]  [BUGGY]  if(methodName  ==  null  ||!isBaseClassCall(t,  n))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName  ==  null  ||!isBaseClassCall(t,  n))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName  ==  null  ||!isBaseClassCall(t,  n))  {	  if(!isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
101	[BUG]  [BUGGY]  if(methodName!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null)  {	  if(!isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
102	[BUG]  [BUGGY]  if( "baseClassCall   ".equals(methodName)&&  n.startsWith(methodName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if( "baseClassCall   ".equals(methodName)&&  n.startsWith(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if( "baseClassCall   ".equals(methodName)&&  n.startsWith(methodName))  {	  if(   "base       ".equals(methodName)&&    n.startsWith(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
103	[BUG]  [BUGGY]  if(methodName.startsWith( "base ")||  methodName.startsWith( ".class "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.startsWith( "base ")||  methodName.startsWith( ".class "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.startsWith( "base ")||  methodName.startsWith( ".class "))  {	  if(   "base       ".equals(methodName)&&    methodName.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
104	[BUG]  [BUGGY]  if(isExpressionCall(t,  n)&&  methodName.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isExpressionCall(t,  n)&&  methodName.equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isExpressionCall(t,  n)&&  methodName.equals(methodName))  {	  if(isBaseClassCall(t,    n)&&    methodName.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
105	[BUG]  [BUGGY]  if(methodName!=  null  &&!methodName.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  &&!methodName.equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  &&!methodName.equals(methodName))  {	  if(!methodName.equals(n))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
106	[BUG]  [BUGGY]  if(methodName!=  null  ||!methodName.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  ||!methodName.equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  ||!methodName.equals(methodName))  {	  if(!methodName.equals(n))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
107	[BUG]  [BUGGY]  if(methodName  ==  null  ||!methodName.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName  ==  null  ||!methodName.equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName  ==  null  ||!methodName.equals(methodName))  {	  if(!methodName.equals(n))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
108	[BUG]  [BUGGY]  if(methodName.equals( "base ")&&  isBaseClassCall(t,  n))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "base ")&&  isBaseClassCall(t,  n))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "base ")&&  isBaseClassCall(t,  n))  {	  if(n.equals(methodName)&&    isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
109	[BUG]  [BUGGY]  if(methodName.equals( "require ")&&  isBaseClassCall(t,  n))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "require ")&&  isBaseClassCall(t,  n))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "require ")&&  isBaseClassCall(t,  n))  {	  if(n.equals(methodName)&&    isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
110	[BUG]  [BUGGY]  if(!isConstructor()  &&!   "baseClass ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isConstructor()  &&!   "baseClass ".equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isConstructor()  &&!   "baseClass ".equals(methodName))  {	  if(!isConstructor()    &&!   "base       ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
111	[BUG]  [BUGGY]  n.setMethod(methodName);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  n.setMethod(methodName);  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	n.setMethod(methodName);	  n.setAssertionFailedError(methodName);    	non-compiled	[CE]  orphaned  case	44	None	replace
112	[BUG]  [BUGGY]  if(!isBaseClassCall(t,  n)&&  methodName.equals( "base "))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isBaseClassCall(t,  n)&&  methodName.equals( "base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isBaseClassCall(t,  n)&&  methodName.equals( "base "))  {	  if(isBaseClassCall(t,    n)&&    methodName.equals(   "base   "))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
113	[BUG]  [BUGGY]  if(methodName!=  null  &&  methodName.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  &&  methodName.equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  &&  methodName.equals(methodName))  {	  if(methodName.equals(n))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
114	[BUG]  [BUGGY]  if(methodName.equals( "class "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "class "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "class "))  {	  if(methodName.equals(n))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
115	[BUG]  [BUGGY]  String  n  =  name.getNext().getQualifiedName();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  String  n  =  name.getNext().getQualifiedName();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	String  n  =  name.getNext().getQualifiedName();	  String    n    =    name.getNext();    	non-compiled	[CE]  orphaned  case	15	None	replace
116	[BUG]  [BUGGY]  if(methodName.equals( "baseclass ")||  methodName.equals( "baseClass "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "baseclass ")||  methodName.equals( "baseClass "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "baseclass ")||  methodName.equals( "baseClass "))  {	  if(methodName.equals(   "baseclass   "))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
117	[BUG]  [BUGGY]  if(methodName!=  null  &&!methodName.equals( "base "))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  &&!methodName.equals( "base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  &&!methodName.equals( "base "))  {	  if(!methodName.equals(   "base   "))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
118	[BUG]  [BUGGY]  if(methodName.equals( "baseClass ")||  methodName.equals( "baseclass "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "baseClass ")||  methodName.equals( "baseclass "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "baseClass ")||  methodName.equals( "baseclass "))  {	  if(methodName.equals(   "baseClass   "))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
119	[BUG]  [BUGGY]  if(methodName.equals( "base ")||  methodName.equals( "class "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "base ")||  methodName.equals( "class "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "base ")||  methodName.equals( "class "))  {	  if(methodName.equals(   "base   "))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
120	[BUG]  [BUGGY]  if(methodName.startsWith( ".class ")||  methodName.startsWith( ".base "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.startsWith( ".class ")||  methodName.startsWith( ".base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.startsWith( ".class ")||  methodName.startsWith( ".base "))  {	  if(methodName.startsWith(   "base   ")||    methodName.startsWith(   "base   "))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
121	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n)||  isBaseClassCall(n)||   "base ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n)||  isBaseClassCall(n)||   "base ".equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n)||  isBaseClassCall(n)||   "base ".equals(methodName))  {	  if(isBaseClassCall(t)||    isBaseClassCall(n)||   "base       ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
122	[BUG]  [BUGGY]  if(methodName!=  null  &&  isBaseClassCall(t,  n)||  methodName.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  &&  isBaseClassCall(t,  n)||  methodName.length()  ==  0)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  &&  isBaseClassCall(t,  n)||  methodName.length()  ==  0)  {	  if(methodName!=    null    &&    isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
123	[BUG]  [BUGGY]  String  n  =  methodName!=  null?  name.getNext()  :  methodName;  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  String  n  =  methodName!=  null?  name.getNext()  :  methodName;  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	String  n  =  methodName!=  null?  name.getNext()  :  methodName;	  String    n    =    name.getNext();    	non-compiled	[CE]  orphaned  case	15	None	replace
124	[BUG]  [BUGGY]  String  n  =  methodName  ==  null?  name.getNext()  :  methodName;  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  String  n  =  methodName  ==  null?  name.getNext()  :  methodName;  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	String  n  =  methodName  ==  null?  name.getNext()  :  methodName;	  String    n    =    name.getNext();    	non-compiled	[CE]  orphaned  case	15	None	replace
125	[BUG]  [BUGGY]  String  n  =  methodName  ==  null? "null "  :  methodName.getNext();  [CE]  orphaned  case  [FE]                          AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  String  n  =  methodName  ==  null? "null "  :  methodName.getNext();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	String  n  =  methodName  ==  null? "null "  :  methodName.getNext();	  String    n    =    name.getNext();    	non-compiled	[CE]  orphaned  case	15	None	replace
126	[BUG]  [BUGGY]  Method  t  =  getMethod(methodName.getQualifiedName());  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  Method  t  =  getMethod(methodName.getQualifiedName());  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	Method  t  =  getMethod(methodName.getQualifiedName());	  Method    t    =    getMethod(methodName);    	non-compiled	[CE]  orphaned  case	33	None	replace
127	[BUG]  [BUGGY]  if(!isBaseClassCall(t,  n)&&!methodName.equals( "base "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isBaseClassCall(t,  n)&&!methodName.equals( "base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isBaseClassCall(t,  n)&&!methodName.equals( "base "))  {	  if(!isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
128	[BUG]  [BUGGY]  if(!isBaseClassCall(t,  n)&&!methodName.equals( "class "))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isBaseClassCall(t,  n)&&!methodName.equals( "class "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isBaseClassCall(t,  n)&&!methodName.equals( "class "))  {	  if(!isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
129	[BUG]  [BUGGY]  n  =  name.getParent();  [CE]  orphaned  case  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  n  =  name.getParent();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	n  =  name.getParent();	  n    =    name.getNext();    	non-compiled	[CE]  orphaned  case	45	None	replace
130	[BUG]  [BUGGY]  n  =  name.getNext().getNext();  [CE]  orphaned  case  [FE]                        AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  n  =  name.getNext().getNext();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	n  =  name.getNext().getNext();	  n    =    name.getNext();    	non-compiled	[CE]  orphaned  case	45	None	replace
131	[BUG]  [BUGGY]  if(!methodName.equals( "baseclass "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!methodName.equals( "baseclass "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!methodName.equals( "baseclass "))  {	  if(!methodName.equals(n))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
132	[BUG]  [BUGGY]  if(isBaseCall(t,  n)&&  methodName.equals( "base "))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseCall(t,  n)&&  methodName.equals( "base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseCall(t,  n)&&  methodName.equals( "base "))  {	  if(isBaseClassCall(t,    n)||    methodName.equals(   "base   "))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
133	[BUG]  [BUGGY]  if(methodName!=  null  &&!isClassCall(methodName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  &&!isClassCall(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  &&!isClassCall(methodName))  {	  if(!isClassCall(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
134	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n)&&  methodName.endsWith( "class "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n)&&  methodName.endsWith( "class "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n)&&  methodName.endsWith( "class "))  {	  if(isBaseClassCall(t,    n)&&    methodName.startsWith(   "class   "))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
135	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n)&&  methodName.endsWith( ".class "))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n)&&  methodName.endsWith( ".class "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n)&&  methodName.endsWith( ".class "))  {	  if(isBaseClassCall(t,    n)&&    methodName.startsWith(   "class   "))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
136	[BUG]  [BUGGY]  if(methodName.equals( "base_ ")&&  isBaseClassCall(t,  n))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "base_ ")&&  isBaseClassCall(t,  n))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "base_ ")&&  isBaseClassCall(t,  n))  {	  if(n.equals(methodName)&&    isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
137	[BUG]  [BUGGY]  if(isBaseClassCall(t,  n).equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(t,  n).equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(t,  n).equals(methodName))  {	  if(n.equals(methodName)&&    isBaseClassCall(t,    n))    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
138	[BUG]  [BUGGY]  if(methodName!=  null  &&  isBaseClassCall(t,  n)&&  methodName.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  &&  isBaseClassCall(t,  n)&&  methodName.length()  >  0)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  &&  isBaseClassCall(t,  n)&&  methodName.length()  >  0)  {	  if(isBaseClassCall(t,    n)&&    methodName.length()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
139	[BUG]  [BUGGY]  Method  t  =  methodName.toLowerCase(lenient);  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  Method  t  =  methodName.toLowerCase(lenient);  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	Method  t  =  methodName.toLowerCase(lenient);	  Method    t    =    methodName.toLowerCase();    	non-compiled	[CE]  orphaned  case	34	None	replace
140	[BUG]  [BUGGY]  if(methodName.startsWith( "class ")||  methodName.startsWith( "base "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.startsWith( "class ")||  methodName.startsWith( "base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.startsWith( "class ")||  methodName.startsWith( "base "))  {	  if(methodName.startsWith(   "base   ")||    methodName.startsWith(   "base   "))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
141	[BUG]  [BUGGY]  if(!isBaseClassCall(n)&&!methodName.equals( "base "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isBaseClassCall(n)&&!methodName.equals( "base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isBaseClassCall(n)&&!methodName.equals( "base "))  {	  if(!isBaseClassCall(n))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
142	[BUG]  [BUGGY]  if(!isBaseCall(t,  n))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isBaseCall(t,  n))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isBaseCall(t,  n))  {	  if(!isBaseClassCall(n))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
143	[BUG]  [BUGGY]  if(methodName.equals( "base ")||  methodName.equals( "require "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "base ")||  methodName.equals( "require "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "base ")||  methodName.equals( "require "))  {	  if(methodName.equals(   "base   "))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
144	[BUG]  [BUGGY]  if(isBaseClassCall(n))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(isBaseClassCall(n))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(isBaseClassCall(n))  {	  if(!isBaseClassCall(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
145	[BUG]  [BUGGY]  if(methodName.equals( "class ")||  methodName.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName.equals( "class ")||  methodName.length()  ==  0)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName.equals( "class ")||  methodName.length()  ==  0)  {	  if(methodName.equals(baseName)||    methodName.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
146	[BUG]  [BUGGY]  if(methodName!=  null  &&  isBaseClassCall(t,  n)&&  methodName.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  &&  isBaseClassCall(t,  n)&&  methodName.equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  &&  isBaseClassCall(t,  n)&&  methodName.equals(methodName))  {	  if(isBaseClassCall(t,    n)&&    methodName.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
147	[BUG]  [BUGGY]  n.addMethodName(methodName);  [CE]  orphaned  case  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  n.addMethodName(methodName);  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	n.addMethodName(methodName);	  n.setMethodName(methodName);    	non-compiled	[CE]  orphaned  case	43	None	replace
148	[BUG]  [BUGGY]  n.setMethodName(methodName;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  n.setMethodName(methodName;  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	n.setMethodName(methodName;	  n.setMethodName(methodName);    	non-compiled	[CE]  	43	None	replace
149	[BUG]  [BUGGY]  if(methodName!=  null  &&  methodName.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  &&  methodName.length()  >  0)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  &&  methodName.length()  >  0)  {	  if(methodName!=    null    &&       "base   ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
150	[BUG]  [BUGGY]  if(methodName!=  null  &&  methodName.startsWith( "base "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(methodName!=  null  &&  methodName.startsWith( "base "))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(methodName!=  null  &&  methodName.startsWith( "base "))  {	  if(methodName!=    null    &&       "base   ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
151	[BUG]  [BUGGY]  if(!isConstructor()  ||!   "base ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isConstructor()  ||!   "base ".equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isConstructor()  ||!   "base ".equals(methodName))  {	  if(!isConstructor()    &&!   "base       ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
152	[BUG]  [BUGGY]  if(!isConstructor()  &&! "base_   ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if(!isConstructor()  &&! "base_   ".equals(methodName))  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if(!isConstructor()  &&! "base_   ".equals(methodName))  {	  if(!isConstructor()    &&!   "base       ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
153	[BUG]  [BUGGY]  Method  t  =  methodName.getRawClass();  [CE]  orphaned  case  [FE]                    AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  Method  t  =  methodName.getRawClass();  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	Method  t  =  methodName.getRawClass();	  Method    t    =    methodName.getMethod();    	non-compiled	[CE]  orphaned  case	14	None	replace
154	[BUG]  [BUGGY]  if( "base_ ".equals(methodName)||  n.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      GOOG.equals(name.getString()))  {    String  methodName  =  name.getNext().getString();      [BUGGY]  if( "base_ ".equals(methodName)||  n.length()  ==  0)  {  [BUGGY]      processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.11704114719613057	158	158	1	replace	if( "base_ ".equals(methodName)||  n.length()  ==  0)  {	  if(   "base       ".equals(methodName)||    n.length()    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
