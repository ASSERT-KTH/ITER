bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Node  parent  =  n.getParent();  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  parent  =  n.getParent();	  Node    parent    =    left.getParent();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
2	[BUG]  [BUGGY]  Node  parent  =  left.getNext();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Node  parent  =  left.getNext();  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  parent  =  left.getNext();	  Node    parent    =    left.getParent();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
3	[BUG]  [BUGGY]  Node  parent  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Node  parent  =  n.getNext();  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  parent  =  n.getNext();	  Node    parent    =    left.getParent();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
4	[BUG]  [BUGGY]  }  else  if( "requires. ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  }  else  if( "requires. ".equals(methodName))  {  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	}  else  if( "requires. ".equals(methodName))  {	  }    else    if(   "requires   ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  Node  parent  =  arg.getNext();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Node  parent  =  arg.getNext();  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  parent  =  arg.getNext();	  Node    parent    =    arg.getParent();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
6	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MISSING_ERROR,  methodName));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  n,  MISSING_ERROR,  methodName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  MISSING_ERROR,  methodName));	  Context.report(JSError.make(t,    left,    MISSING_ERROR,    methodName));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  Context.reportError(JSError.make(t,  n,  MISSING_ERROR,  methodName));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.reportError(JSError.make(t,  n,  MISSING_ERROR,  methodName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.reportError(JSError.make(t,  n,  MISSING_ERROR,  methodName));	  Context.report(JSError.make(t,    left,    MISSING_ERROR,    methodName));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
8	[BUG]  [BUGGY]  Context.report(JSError.make(t,  arg,  MISSING_ERROR,  methodName));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  arg,  MISSING_ERROR,  methodName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  arg,  MISSING_ERROR,  methodName));	  Context.report(JSError.make(t,    left,    MISSING_ERROR,    methodName));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  left,  MISSING_ERROR,  methodName));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  n,  left,  MISSING_ERROR,  methodName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  left,  MISSING_ERROR,  methodName));	  Context.report(JSError.make(t,    left,    MISSING_ERROR,    methodName));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Node  left  =  n.getNext();  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  left  =  n.getNext();	  Node    left    =    arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  Node  left  =  t.getNext();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Node  left  =  t.getNext();  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  left  =  t.getNext();	  Node    left    =    arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
12	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  parent,  methodName));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  n,  parent,  methodName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  parent,  methodName));	  Context.report(JSError.make(t,    n,    left,    methodName));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
13	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  left,  sourceName));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  n,  left,  sourceName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  left,  sourceName));	  Context.report(JSError.make(t,    n,    left,    methodName));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
14	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  right,  methodName));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  n,  right,  methodName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  right,  methodName));	  Context.report(JSError.make(t,    n,    left,    methodName));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
15	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  left,  methodName,  sourceName));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  n,  left,  methodName,  sourceName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  left,  methodName,  sourceName));	  Context.report(JSError.make(t,    n,    left,    methodName));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
16	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  left  =  n.getLastChild();	  Node    left    =    arg.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
17	[BUG]  [BUGGY]  Node  left  =  arg.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Node  left  =  arg.getFirstChild();  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  left  =  arg.getFirstChild();	  Node    left    =    arg.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  parent.replaceChild(n,  arg);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  parent.replaceChild(n,  arg);  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	parent.replaceChild(n,  arg);	  parent.addChildToBack(arg);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
19	[BUG]  [BUGGY]  parent.addChildToBack(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  parent.addChildToBack(n);  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	parent.addChildToBack(n);	  parent.addChildToBack(arg);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  parent.addChildToBack(arg,  left);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  parent.addChildToBack(arg,  left);  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	parent.addChildToBack(arg,  left);	  parent.addChildToBack(arg);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
21	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  INVALID_REQUIRE_ERROR,  methodName));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  n,  INVALID_REQUIRE_ERROR,  methodName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  INVALID_REQUIRE_ERROR,  methodName));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
22	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MISSING_EXTENDS_ERROR,  methodName));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  n,  MISSING_EXTENDS_ERROR,  methodName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  MISSING_EXTENDS_ERROR,  methodName));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
23	[BUG]  [BUGGY]  Node  left  =  arg  ==  null?  null  :  arg.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Node  left  =  arg  ==  null?  null  :  arg.getNext();  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  left  =  arg  ==  null?  null  :  arg.getNext();	  Node    left    =    arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
24	[BUG]  [BUGGY]  Node  left  =  arg!=  null?  null  :  arg.getNext();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Node  left  =  arg!=  null?  null  :  arg.getNext();  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  left  =  arg!=  null?  null  :  arg.getNext();	  Node    left    =    arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
25	[BUG]  [BUGGY]  Context.report(JSError.make(t,  left,  n,  MISSING_ERROR,  methodName));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  left,  n,  MISSING_ERROR,  methodName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  left,  n,  MISSING_ERROR,  methodName));	  Context.report(JSError.make(t,    left,    MISSING_ERROR,    methodName));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
26	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  left,  MISSING_REQUIRE_ERROR,  methodName));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  n,  left,  MISSING_REQUIRE_ERROR,  methodName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  left,  MISSING_REQUIRE_ERROR,  methodName));	  Context.report(JSError.make(t,    n,    left,    methodName));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
27	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  left,  INVALID_TYPE));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  n,  left,  INVALID_TYPE));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  left,  INVALID_TYPE));	  Context.report(JSError.make(t,    n,    left,    methodName));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  left,  INVALID_METHOD_NAME));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  n,  left,  INVALID_METHOD_NAME));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  left,  INVALID_METHOD_NAME));	  Context.report(JSError.make(t,    n,    left,    methodName));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  parent.addChildToBack(left);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  parent.addChildToBack(left);  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	parent.addChildToBack(left);	  parent.addChildToBack(arg);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
30	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  MISSING_EXTENDS_TAG_WARNING,  methodName));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  n,  MISSING_EXTENDS_TAG_WARNING,  methodName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  MISSING_EXTENDS_TAG_WARNING,  methodName));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  INVALID_DEPRECATED_ERROR,  methodName));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  n,  INVALID_DEPRECATED_ERROR,  methodName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  INVALID_DEPRECATED_ERROR,  methodName));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  Node  parent  =  left.getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Node  parent  =  left.getLastChild();  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  parent  =  left.getLastChild();	  Node    parent    =    left.getParent();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
33	[BUG]  [BUGGY]  }  else  if( "requires... ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  }  else  if( "requires... ".equals(methodName))  {  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	}  else  if( "requires... ".equals(methodName))  {	  }    else    if(   "requires   ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
34	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  left  =  n.getFirstChild();	  Node    left    =    arg.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
35	[BUG]  [BUGGY]  Node  left  =  t.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Node  left  =  t.getFirstChild();  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  left  =  t.getFirstChild();	  Node    left    =    arg.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
36	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  parent,  INVALID_DEPRECATED_ERROR,  methodName));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  n,  parent,  INVALID_DEPRECATED_ERROR,  methodName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  parent,  INVALID_DEPRECATED_ERROR,  methodName));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
37	[BUG]  [BUGGY]  parent.addChildToFront(arg);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  parent.addChildToFront(arg);  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	parent.addChildToFront(arg);	  parent.addChildToBack(arg);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
38	[BUG]  [BUGGY]  Node  left  =  arg!=  null?  arg.getNext()  :  null;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Node  left  =  arg!=  null?  arg.getNext()  :  null;  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  left  =  arg!=  null?  arg.getNext()  :  null;	  Node    left    =    arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
39	[BUG]  [BUGGY]  Node  left  =  arg  ==  null?  arg.getNext()  :  null;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Node  left  =  arg  ==  null?  arg.getNext()  :  null;  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  left  =  arg  ==  null?  arg.getNext()  :  null;	  Node    left    =    arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
40	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  left,  STRING_LITERAL_EXPECTED_ERROR,  methodName));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  n,  left,  STRING_LITERAL_EXPECTED_ERROR,  methodName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  left,  STRING_LITERAL_EXPECTED_ERROR,  methodName));	  Context.report(JSError.make(t,    n,    left,    methodName));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
41	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  left,  STRING_LITERAL_EXPECTED_ERROR));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  n,  left,  STRING_LITERAL_EXPECTED_ERROR));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  left,  STRING_LITERAL_EXPECTED_ERROR));	  Context.report(JSError.make(t,    n,    left,    methodName));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
42	[BUG]  [BUGGY]  Context.report(JSError.make(t,  left,  STRING_LITERAL_EXPECTED_ERROR,  methodName));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;      [BUGGY]  Context.report(JSError.make(t,  left,  STRING_LITERAL_EXPECTED_ERROR,  methodName));  [BUGGY]      processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  left,  STRING_LITERAL_EXPECTED_ERROR,  methodName));	  Context.report(JSError.make(t,    left,    MISSING_ERROR,    methodName));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
