bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if  ( "requireCalls   ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;    [BUGGY]  }  else  if  ( "requireCalls   ".equals(methodName))  {  [BUGGY]    processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	}  else  if  ( "requireCalls   ".equals(methodName))  {	  }    else    if    (   "requireCall   ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  Node  left  =  arg.getNext();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;    [BUGGY]  Node  left  =  arg.getNext();  [BUGGY]    processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  left  =  arg.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  Node  left  =  arg.getLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;    [BUGGY]  Node  left  =  arg.getLastChild();  [BUGGY]    processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  left  =  arg.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  parent.addChildToBack(arg);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;    [BUGGY]  parent.addChildToBack(arg);  [BUGGY]    processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	parent.addChildToBack(arg);	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
5	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;    [BUGGY]  Context.reportCodeChange();  [BUGGY]    processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.reportCodeChange();	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
6	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  left,  methodName));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;    [BUGGY]  Context.report(JSError.make(t,  n,  left,  methodName));  [BUGGY]    processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  n,  left,  methodName));	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
7	[BUG]  [BUGGY]  Context.report(JSError.make(t,  left,  MISSING_ERROR,  methodName));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;    [BUGGY]  Context.report(JSError.make(t,  left,  MISSING_ERROR,  methodName));  [BUGGY]    processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Context.report(JSError.make(t,  left,  MISSING_ERROR,  methodName));	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
8	[BUG]  [BUGGY]  Node  parent  =  left.getParent();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;    [BUGGY]  Node  parent  =  left.getParent();  [BUGGY]    processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  parent  =  left.getParent();	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  Node  parent  =  arg.getParent();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;    [BUGGY]  Node  parent  =  arg.getParent();  [BUGGY]    processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	Node  parent  =  arg.getParent();	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  }  else  if( "requires ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;    [BUGGY]  }  else  if( "requires ".equals(methodName))  {  [BUGGY]    processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.12803687993289598	163	163	1	replace	}  else  if( "requires ".equals(methodName))  {	  }    else    if(   ".require   ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
