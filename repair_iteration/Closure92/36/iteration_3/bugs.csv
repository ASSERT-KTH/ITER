bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  MethodName  methodName  =  arg.getQualifiedName()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  MethodName  methodName  =  arg.getQualifiedName()  +  1;  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =  arg.getQualifiedName()  +  1;	  MethodName    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2	[BUG]  [BUGGY]  MethodName  methodName  =  arg.getQualifiedName()  +  2;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  MethodName  methodName  =  arg.getQualifiedName()  +  2;  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =  arg.getQualifiedName()  +  2;	  MethodName    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
3	[BUG]  [BUGGY]  if(diagnostic!=  null  ||  methodName.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic!=  null  ||  methodName.isQualifiedName())  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  ||  methodName.isQualifiedName())  {	  if(diagnostic!=    null    ||    diagnostic.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
4	[BUG]  [BUGGY]  if(methodName!=  null  ||  diagnostic.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(methodName!=  null  ||  diagnostic.isQualifiedName())  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(methodName!=  null  ||  diagnostic.isQualifiedName())  {	  if(diagnostic!=    null    ||    diagnostic.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
5	[BUG]  [BUGGY]  t.makeError(methodName,  desiredType,  diagnostic,  methodName.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  t.makeError(methodName,  desiredType,  diagnostic,  methodName.getQualifiedName());  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	t.makeError(methodName,  desiredType,  diagnostic,  methodName.getQualifiedName());	  t.makeError(methodName,    desiredType,    methodName.getQualifiedName());    return    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
6	[BUG]  [BUGGY]  t.makeError(methodName,  desiredType,  diagnostic,  methodName.getQualifiedName());  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  t.makeError(methodName,  desiredType,  diagnostic,  methodName.getQualifiedName());  return  false;  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	t.makeError(methodName,  desiredType,  diagnostic,  methodName.getQualifiedName());  return  false;	  t.makeError(methodName,    desiredType,    methodName.getQualifiedName());    return    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  MethodName  methodName  =(MethodName)arg.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  MethodName  methodName  =(MethodName)arg.getQualifiedName();  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =(MethodName)arg.getQualifiedName();	  MethodName    methodName    =(MethodName)arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
8	[BUG]  [BUGGY]  MethodName  methodName  =(MethodName)arg.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  MethodName  methodName  =(MethodName)arg.getFirstChild();  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =(MethodName)arg.getFirstChild();	  MethodName    methodName    =(MethodName)arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
9	[BUG]  [BUGGY]  MethodName  methodName  =(MethodName)arg.getPropertyName();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  MethodName  methodName  =(MethodName)arg.getPropertyName();  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =(MethodName)arg.getPropertyName();	  MethodName    methodName    =(MethodName)arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
10	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  methodName.isQualifiedName()  &&  methodName.getQualifiedName()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic!=  null  &&  methodName.isQualifiedName()  &&  methodName.getQualifiedName()  ==  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  methodName.isQualifiedName()  &&  methodName.getQualifiedName()  ==  null)  {	  if(diagnostic!=    null    &&    diagnostic.isQualifiedName()    &&    methodName.getQualifiedName()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
11	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  diagnostic.isQualifiedName()  ||  methodName.getQualifiedName()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic!=  null  &&  diagnostic.isQualifiedName()  ||  methodName.getQualifiedName()  ==  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  diagnostic.isQualifiedName()  ||  methodName.getQualifiedName()  ==  null)  {	  if(diagnostic!=    null    &&    diagnostic.isQualifiedName()    &&    methodName.getQualifiedName()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
12	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  methodName.isQualifiedName()  &&  diagnostic.getQualifiedName()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic!=  null  &&  methodName.isQualifiedName()  &&  diagnostic.getQualifiedName()  ==  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  methodName.isQualifiedName()  &&  diagnostic.getQualifiedName()  ==  null)  {	  if(diagnostic!=    null    &&    diagnostic.isQualifiedName()    &&    methodName.getQualifiedName()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
13	[BUG]  [BUGGY]  if(methodName  ==  null  ||  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(methodName  ==  null  ||  methodName.getQualifiedName()!=  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(methodName  ==  null  ||  methodName.getQualifiedName()!=  null)  {	  if(diagnostic    ==    null    ||    methodName.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
14	[BUG]  [BUGGY]  if(diagnostic  ==  null  &&  diagnostic.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic  ==  null  &&  diagnostic.getQualifiedName()!=  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic  ==  null  &&  diagnostic.getQualifiedName()!=  null)  {	  if(diagnostic!=    null    ||    diagnostic.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
15	[BUG]  [BUGGY]  if(chemo!=  null  ||  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(chemo!=  null  ||  methodName.getQualifiedName()!=  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(chemo!=  null  ||  methodName.getQualifiedName()!=  null)  {	  if(chemo!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
16	[BUG]  [BUGGY]  if(chemo!=  null  ||  methodName.getQualifiedName()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(chemo!=  null  ||  methodName.getQualifiedName()  ==  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(chemo!=  null  ||  methodName.getQualifiedName()  ==  null)  {	  if(chemo!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
17	[BUG]  [BUGGY]  if(methodName!=  null  &&  methodName.getQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(methodName!=  null  &&  methodName.getQualifiedName())  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(methodName!=  null  &&  methodName.getQualifiedName())  {	  if(diagnostic!=    null    &&    methodName.getQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
18	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  methodName.getQualifiedName().length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic!=  null  &&  methodName.getQualifiedName().length()  >  0)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  methodName.getQualifiedName().length()  >  0)  {	  if(diagnostic!=    null    &&    methodName.getQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
19	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  methodName.getQualifiedName().equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic!=  null  &&  methodName.getQualifiedName().equals(methodName))  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  methodName.getQualifiedName().equals(methodName))  {	  if(diagnostic!=    null    &&    methodName.getQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
20	[BUG]  [BUGGY]  System.err.println( "Missing  method: "  +  methodName.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  System.err.println( "Missing  method: "  +  methodName.getQualifiedName());  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	System.err.println( "Missing  method: "  +  methodName.getQualifiedName());	  System.err.println(   "Missing    method:   "    +    arg.getQualifiedName());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
21	[BUG]  [BUGGY]  System.err.println( "Missing  method: "  +  arg.getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  System.err.println( "Missing  method: "  +  arg.getName());  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	System.err.println( "Missing  method: "  +  arg.getName());	  System.err.println(   "Missing    method:   "    +    arg.getQualifiedName());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
22	[BUG]  [BUGGY]  System.err.println( "Missing  method: "  +  arg.getQualifiedName()  + "  as  possible ");  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  System.err.println( "Missing  method: "  +  arg.getQualifiedName()  + "  as  possible ");  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	System.err.println( "Missing  method: "  +  arg.getQualifiedName()  + "  as  possible ");	  System.err.println(   "Missing    method:   "    +    arg.getQualifiedName());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
23	[BUG]  [BUGGY]  System.err.println( "Missing  method  name: "  +  methodName.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  System.err.println( "Missing  method  name: "  +  methodName.getQualifiedName());  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	System.err.println( "Missing  method  name: "  +  methodName.getQualifiedName());	  System.err.println(   "Missing    method    name:   "    +    arg.getQualifiedName());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
24	[BUG]  [BUGGY]  System.err.println( "Missing  method  name: "  +  arg.getName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  System.err.println( "Missing  method  name: "  +  arg.getName());  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	System.err.println( "Missing  method  name: "  +  arg.getName());	  System.err.println(   "Missing    method    name:   "    +    arg.getQualifiedName());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
25	[BUG]  [BUGGY]  if(methodName  ==  null  &&  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(methodName  ==  null  &&  methodName.getQualifiedName()!=  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(methodName  ==  null  &&  methodName.getQualifiedName()!=  null)  {	  if(diagnostic    ==    null    &&    methodName.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
26	[BUG]  [BUGGY]  t.makeError(methodName,  desiredType,  pathName.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  t.makeError(methodName,  desiredType,  pathName.getQualifiedName());  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	t.makeError(methodName,  desiredType,  pathName.getQualifiedName());	  t.makeError(methodName,    desiredType,    methodName.getQualifiedName());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
27	[BUG]  [BUGGY]  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName());  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	t.makeError(methodName,  diagnostic,  methodName.getQualifiedName());	  t.makeError(methodName,    desiredType,    methodName.getQualifiedName());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
28	[BUG]  [BUGGY]  if(chemo!=  null  &&  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(chemo!=  null  &&  methodName.getQualifiedName()!=  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(chemo!=  null  &&  methodName.getQualifiedName()!=  null)  {	  if(methodName!=    null    &&    diagnostic.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  methodName.isQualifiedName()  &&  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic!=  null  &&  methodName.isQualifiedName()  &&  methodName.getQualifiedName()!=  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  methodName.isQualifiedName()  &&  methodName.getQualifiedName()!=  null)  {	  if(diagnostic!=    null    &&    diagnostic.isQualifiedName()    &&    methodName.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
30	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  diagnostic.isQualifiedName()  ||  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic!=  null  &&  diagnostic.isQualifiedName()  ||  methodName.getQualifiedName()!=  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  diagnostic.isQualifiedName()  ||  methodName.getQualifiedName()!=  null)  {	  if(diagnostic!=    null    &&    diagnostic.isQualifiedName()    &&    methodName.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
31	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  methodName.isQualifiedName()  &&  diagnostic.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic!=  null  &&  methodName.isQualifiedName()  &&  diagnostic.getQualifiedName()!=  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  methodName.isQualifiedName()  &&  diagnostic.getQualifiedName()!=  null)  {	  if(diagnostic!=    null    &&    diagnostic.isQualifiedName()    &&    methodName.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
32	[BUG]  [BUGGY]  if(methodName!=  null  &&  methodName.getQualifiedName()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(methodName!=  null  &&  methodName.getQualifiedName()  ==  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(methodName!=  null  &&  methodName.getQualifiedName()  ==  null)  {	  if(diagnostic!=    null    &&    methodName.getQualifiedName()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
33	[BUG]  [BUGGY]  if(diagnostic!=  null  ||  methodName.getQualifiedName()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic!=  null  ||  methodName.getQualifiedName()  ==  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  ||  methodName.getQualifiedName()  ==  null)  {	  if(diagnostic!=    null    &&    methodName.getQualifiedName()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
34	[BUG]  [BUGGY]  test(t,  arg.getNext(),  desiredType);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  test(t,  arg.getNext(),  desiredType);  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	test(t,  arg.getNext(),  desiredType);	  test(t,    arg.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
35	[BUG]  [BUGGY]  test(t,  arg.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  test(t,  arg.getQualifiedName());  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	test(t,  arg.getQualifiedName());	  test(t,    arg.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
36	[BUG]  [BUGGY]  test(t,  arg.getNext(),  diagnostic);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  test(t,  arg.getNext(),  diagnostic);  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	test(t,  arg.getNext(),  diagnostic);	  test(t,    arg.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
37	[BUG]  [BUGGY]  test(t,  arg.getNext()  +  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  test(t,  arg.getNext()  +  1);  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	test(t,  arg.getNext()  +  1);	  test(t,    arg.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
38	[BUG]  [BUGGY]  MethodName  methodName  =(methodName  ==  null)?  arg.getNext()  :  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  MethodName  methodName  =(methodName  ==  null)?  arg.getNext()  :  null;  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =(methodName  ==  null)?  arg.getNext()  :  null;	  MethodName    methodName    =    arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
39	[BUG]  [BUGGY]  MethodName  methodName  =  path.getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  MethodName  methodName  =  path.getNext();  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =  path.getNext();	  MethodName    methodName    =    arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
40	[BUG]  [BUGGY]  t.makeError(methodName,  desiredType,  diagnostic);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  t.makeError(methodName,  desiredType,  diagnostic);  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	t.makeError(methodName,  desiredType,  diagnostic);	  t.makeError(methodName,    desiredType,    diagnostic);    return    false;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
41	[BUG]  [BUGGY]  t.makeError(methodName,  diagnostic,  desiredType);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  t.makeError(methodName,  diagnostic,  desiredType);  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	t.makeError(methodName,  diagnostic,  desiredType);	  t.makeError(methodName,    desiredType,    diagnostic);    return    false;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
42	[BUG]  [BUGGY]  t.makeError(methodName,  desiredType,  diagnostic);  return  true;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  t.makeError(methodName,  desiredType,  diagnostic);  return  true;  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	t.makeError(methodName,  desiredType,  diagnostic);  return  true;	  t.makeError(methodName,    desiredType,    diagnostic);    return    false;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
43	[BUG]  [BUGGY]  if(methodName!=  null  &&  methodName.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(methodName!=  null  &&  methodName.isQualifiedName())  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(methodName!=  null  &&  methodName.isQualifiedName())  {	  if(diagnostic!=    null    &&    methodName.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
44	[BUG]  [BUGGY]  if(diagnostic  ==  null  &&  methodName.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic  ==  null  &&  methodName.isQualifiedName())  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic  ==  null  &&  methodName.isQualifiedName())  {	  if(diagnostic    ==    null    &&    diagnostic.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
45	[BUG]  [BUGGY]  if(diagnostic  ==  null  ||  methodName.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic  ==  null  ||  methodName.isQualifiedName())  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic  ==  null  ||  methodName.isQualifiedName())  {	  if(diagnostic    ==    null    ||    diagnostic.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
46	[BUG]  [BUGGY]  if(diagnostic  ==  null  ||  diagnostic.isQualifiedName()  ||  methodName.getQualifiedName().equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic  ==  null  ||  diagnostic.isQualifiedName()  ||  methodName.getQualifiedName().equals(methodName))  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic  ==  null  ||  diagnostic.isQualifiedName()  ||  methodName.getQualifiedName().equals(methodName))  {	  if(diagnostic    ==    null    ||    diagnostic.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
47	[BUG]  [BUGGY]  testError(t,  arg.getNext(),  desiredType);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  testError(t,  arg.getNext(),  desiredType);  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	testError(t,  arg.getNext(),  desiredType);	  testError(t,    arg.getNext());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
48	[BUG]  [BUGGY]  testError(t,  desiredType,  arg.getNext());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  testError(t,  desiredType,  arg.getNext());  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	testError(t,  desiredType,  arg.getNext());	  testError(t,    arg.getNext());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
49	[BUG]  [BUGGY]  testError(t,  arg.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  testError(t,  arg.getQualifiedName());  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	testError(t,  arg.getQualifiedName());	  testError(t,    arg.getNext());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
50	[BUG]  [BUGGY]  testError(t,  arg.getNext(),  diagnostic);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  testError(t,  arg.getNext(),  diagnostic);  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	testError(t,  arg.getNext(),  diagnostic);	  testError(t,    arg.getNext());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
51	[BUG]  [BUGGY]  t.makeError(methodName,  desiredType,  arg.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  t.makeError(methodName,  desiredType,  arg.getQualifiedName());  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	t.makeError(methodName,  desiredType,  arg.getQualifiedName());	  t.makeError(methodName,    desiredType,    methodName.getQualifiedName());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
52	[BUG]  [BUGGY]  t.makeError(methodName,  desiredType,  diagnostic.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  t.makeError(methodName,  desiredType,  diagnostic.getQualifiedName());  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	t.makeError(methodName,  desiredType,  diagnostic.getQualifiedName());	  t.makeError(methodName,    desiredType,    methodName.getQualifiedName());    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
53	[BUG]  [BUGGY]  MethodName  methodName  =(methodName  ==  null)?(MethodName)arg.getNext()  :  null;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  MethodName  methodName  =(methodName  ==  null)?(MethodName)arg.getNext()  :  null;  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =(methodName  ==  null)?(MethodName)arg.getNext()  :  null;	  MethodName    methodName    =(MethodName)arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
54	[BUG]  [BUGGY]  MethodName  methodName  =(methodName!=  null)?(MethodName)arg.getNext()  :  null;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  MethodName  methodName  =(methodName!=  null)?(MethodName)arg.getNext()  :  null;  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =(methodName!=  null)?(MethodName)arg.getNext()  :  null;	  MethodName    methodName    =(MethodName)arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
55	[BUG]  [BUGGY]  test(t,  methodName.getNext());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  test(t,  methodName.getNext());  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	test(t,  methodName.getNext());	  test(t,    arg.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
56	[BUG]  [BUGGY]  t.makeError(methodName,  desiredType,  arg.getQualifiedName());  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  t.makeError(methodName,  desiredType,  arg.getQualifiedName());  return  false;  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	t.makeError(methodName,  desiredType,  arg.getQualifiedName());  return  false;	  t.makeError(methodName,    desiredType,    methodName.getQualifiedName());    return    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
57	[BUG]  [BUGGY]  if(diagnostic!=  null)  {  t.makeError(methodName,  desiredType,  methodName.getQualifiedName());  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic!=  null)  {  t.makeError(methodName,  desiredType,  methodName.getQualifiedName());  return  false;  }  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null)  {  t.makeError(methodName,  desiredType,  methodName.getQualifiedName());  return  false;  }	  t.makeError(methodName,    desiredType,    methodName.getQualifiedName());    return    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
58	[BUG]  [BUGGY]  if(chemo  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(chemo  ==  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(chemo  ==  null)  {	  if(chemo!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
59	[BUG]  [BUGGY]  t.makeError(methodName,  diagnostic,  desiredType);  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  t.makeError(methodName,  diagnostic,  desiredType);  return  false;  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	t.makeError(methodName,  diagnostic,  desiredType);  return  false;	  t.makeError(methodName,    desiredType,    diagnostic);    return    false;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
60	[BUG]  [BUGGY]  if(dialog!=  null  &&  methodName.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(dialog!=  null  &&  methodName.isQualifiedName())  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(dialog!=  null  &&  methodName.isQualifiedName())  {	  if(methodName!=    null    &&    diagnostic.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
61	[BUG]  [BUGGY]  if(chemo!=  null  &&  methodName.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(chemo!=  null  &&  methodName.isQualifiedName())  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(chemo!=  null  &&  methodName.isQualifiedName())  {	  if(methodName!=    null    &&    diagnostic.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
62	[BUG]  [BUGGY]  MethodName  methodName  =(arg.getQualifiedName()  ==  null)?  null  :  arg.getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  MethodName  methodName  =(arg.getQualifiedName()  ==  null)?  null  :  arg.getNext();  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =(arg.getQualifiedName()  ==  null)?  null  :  arg.getNext();	  MethodName    methodName    =    arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
63	[BUG]  [BUGGY]  MethodName  methodName  =(arg.getQualifiedName()  ==  null)?  arg.getNext()  :  null;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  MethodName  methodName  =(arg.getQualifiedName()  ==  null)?  arg.getNext()  :  null;  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =(arg.getQualifiedName()  ==  null)?  arg.getNext()  :  null;	  MethodName    methodName    =    arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
64	[BUG]  [BUGGY]  MethodName  methodName  =(arg.getQualifiedName()!=  null)?  arg.getNext()  :  null;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  MethodName  methodName  =(arg.getQualifiedName()!=  null)?  arg.getNext()  :  null;  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =(arg.getQualifiedName()!=  null)?  arg.getNext()  :  null;	  MethodName    methodName    =    arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
65	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  methodName.getQualifiedName()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic!=  null  &&  methodName.getQualifiedName()  >  0)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  methodName.getQualifiedName()  >  0)  {	  if(diagnostic!=    null    &&    methodName.getQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
66	[BUG]  [BUGGY]  if(diagnostic  ==  null  &&  methodName.getQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic  ==  null  &&  methodName.getQualifiedName())  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic  ==  null  &&  methodName.getQualifiedName())  {	  if(diagnostic!=    null    &&    methodName.getQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
67	[BUG]  [BUGGY]  if(dialog!=  null  &&  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(dialog!=  null  &&  methodName.getQualifiedName()!=  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(dialog!=  null  &&  methodName.getQualifiedName()!=  null)  {	  if(methodName!=    null    &&    diagnostic.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
68	[BUG]  [BUGGY]  if(diagnostic  ==  null  &&  methodName.getQualifiedName()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic  ==  null  &&  methodName.getQualifiedName()  ==  null)  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic  ==  null  &&  methodName.getQualifiedName()  ==  null)  {	  if(diagnostic!=    null    &&    methodName.getQualifiedName()    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
69	[BUG]  [BUGGY]  if(chemo!=  null  &&  methodName.hasQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(chemo!=  null  &&  methodName.hasQualifiedName())  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(chemo!=  null  &&  methodName.hasQualifiedName())  {	  if(chemo!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
70	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  methodName.hasQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic!=  null  &&  methodName.hasQualifiedName())  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  methodName.hasQualifiedName())  {	  if(diagnostic!=    null    &&    methodName.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
71	[BUG]  [BUGGY]  test(t,  arg.getNext(),  methodName);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  test(t,  arg.getNext(),  methodName);  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	test(t,  arg.getNext(),  methodName);	  test(t,    arg.getNext());    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
72	[BUG]  [BUGGY]  MethodName  methodName  =(methodName!=  null)?  arg.getNext()  :  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  MethodName  methodName  =(methodName!=  null)?  arg.getNext()  :  null;  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =(methodName!=  null)?  arg.getNext()  :  null;	  MethodName    methodName    =    arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
73	[BUG]  [BUGGY]  MethodName  methodName  =(methodName  ==  null?  arg.getNext()  :  methodName);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  MethodName  methodName  =(methodName  ==  null?  arg.getNext()  :  methodName);  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =(methodName  ==  null?  arg.getNext()  :  methodName);	  MethodName    methodName    =    arg.getNext();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
74	[BUG]  [BUGGY]  MethodName  methodName  =(methodName  ==  null)?  arg.getQualifiedName()  :  methodName;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  MethodName  methodName  =(methodName  ==  null)?  arg.getQualifiedName()  :  methodName;  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =(methodName  ==  null)?  arg.getQualifiedName()  :  methodName;	  MethodName    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
75	[BUG]  [BUGGY]  t.makeError(diagnostic,  desiredType,  methodName);  return  false;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  t.makeError(diagnostic,  desiredType,  methodName);  return  false;  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	t.makeError(diagnostic,  desiredType,  methodName);  return  false;	  t.makeError(methodName,    desiredType,    diagnostic);    return    false;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
76	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  DiagnosticUtil.isQualifiedName(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  if(diagnostic!=  null  &&  DiagnosticUtil.isQualifiedName(methodName))  {  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  DiagnosticUtil.isQualifiedName(methodName))  {	  if(diagnostic    ==    null    &&    diagnostic.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
77	[BUG]  [BUGGY]  testError(t,  arg.getNext(),  methodName);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }      [BUGGY]  testError(t,  arg.getNext(),  methodName);  [BUGGY]      compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	testError(t,  arg.getNext(),  methodName);	  testError(t,    arg.getNext());    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
