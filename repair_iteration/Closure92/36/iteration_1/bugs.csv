bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(methodName!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  [BUGGY]  if(methodName!=  null)  {  [BUGGY]  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(methodName!=  null)  {	if  (diagnostic  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
2	[BUG]  [BUGGY]  if(methodName  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  [BUGGY]  if(methodName  ==  null)  {  [BUGGY]  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(methodName  ==  null)  {	if  (diagnostic  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
3	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  [BUGGY]    [BUGGY]  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	  	if  (diagnostic  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
4	[BUG]  [BUGGY]  if(diagnostic  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  [BUGGY]  if(diagnostic  ==  null)  {  [BUGGY]  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic  ==  null)  {	if  (diagnostic  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
5	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  [BUGGY]  if(diagnostic!=  null  &&  methodName.getQualifiedName()!=  null)  {  [BUGGY]  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  methodName.getQualifiedName()!=  null)  {	if  (diagnostic  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
6	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  diagnostic.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  [BUGGY]  if(diagnostic!=  null  &&  diagnostic.getQualifiedName()!=  null)  {  [BUGGY]  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  diagnostic.getQualifiedName()!=  null)  {	if  (diagnostic  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
7	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  diagnostic.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  [BUGGY]  if(diagnostic!=  null  &&  diagnostic.isQualifiedName())  {  [BUGGY]  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  diagnostic.isQualifiedName())  {	if  (diagnostic  !=  null)  {  	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
