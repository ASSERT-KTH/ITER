bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(methodName!=  null  &&  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(methodName!=  null  &&  methodName.getQualifiedName()!=  null)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(methodName!=  null  &&  methodName.getQualifiedName()!=  null)  {	  if(diagnostic!=    null    &&    methodName.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  if(diagnostic!=  null  ||  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(diagnostic!=  null  ||  methodName.getQualifiedName()!=  null)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  ||  methodName.getQualifiedName()!=  null)  {	  if(diagnostic!=    null    &&    methodName.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  methodName.getQualifiedName()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(diagnostic!=  null  &&  methodName.getQualifiedName()  ==  null)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  methodName.getQualifiedName()  ==  null)  {	  if(diagnostic!=    null    &&    methodName.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  t.makeError(methodName,  desiredType,  methodName.getQualifiedName());  return  false;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  t.makeError(methodName,  desiredType,  methodName.getQualifiedName());  return  false;  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	t.makeError(methodName,  desiredType,  methodName.getQualifiedName());  return  false;	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  t.makeError(methodName,  desiredType,  diagnostic);  return  false;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  t.makeError(methodName,  desiredType,  diagnostic);  return  false;  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	t.makeError(methodName,  desiredType,  diagnostic);  return  false;	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  testError(t,  arg.getNext());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  testError(t,  arg.getNext());  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	testError(t,  arg.getNext());	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  t.makeError(methodName,  desiredType,  methodName.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  t.makeError(methodName,  desiredType,  methodName.getQualifiedName());  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	t.makeError(methodName,  desiredType,  methodName.getQualifiedName());	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  methodName.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(diagnostic!=  null  &&  methodName.isQualifiedName())  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  methodName.isQualifiedName())  {	  if(diagnostic!=    null    &&    diagnostic.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  if(diagnostic!=  null  ||  diagnostic.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(diagnostic!=  null  ||  diagnostic.isQualifiedName())  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  ||  diagnostic.isQualifiedName())  {	  if(diagnostic!=    null    &&    diagnostic.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  if(methodName!=  null  &&  diagnostic.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(methodName!=  null  &&  diagnostic.isQualifiedName())  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(methodName!=  null  &&  diagnostic.isQualifiedName())  {	  if(diagnostic!=    null    &&    diagnostic.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  if(methodName!=  null  ||  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(methodName!=  null  ||  methodName.getQualifiedName()!=  null)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(methodName!=  null  ||  methodName.getQualifiedName()!=  null)  {	  if(methodName!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  if(diagnostic!=  null  ||  diagnostic.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(diagnostic!=  null  ||  diagnostic.getQualifiedName()!=  null)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  ||  diagnostic.getQualifiedName()!=  null)  {	  if(diagnostic!=    null    &&    diagnostic.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
13	[BUG]  [BUGGY]  if(methodName!=  null  &&  diagnostic.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(methodName!=  null  &&  diagnostic.getQualifiedName()!=  null)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(methodName!=  null  &&  diagnostic.getQualifiedName()!=  null)  {	  if(diagnostic!=    null    &&    diagnostic.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
14	[BUG]  [BUGGY]  if(diagnostic  ==  null  &&  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(diagnostic  ==  null  &&  methodName.getQualifiedName()!=  null)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic  ==  null  &&  methodName.getQualifiedName()!=  null)  {	  if(diagnostic!=    null    &&    diagnostic.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
15	[BUG]  [BUGGY]  MethodName  methodName  =  arg.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  MethodName  methodName  =  arg.getQualifiedName();  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =  arg.getQualifiedName();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
16	[BUG]  [BUGGY]  MethodName  methodName  =  arg.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  MethodName  methodName  =  arg.getNext();  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =  arg.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
17	[BUG]  [BUGGY]  MethodName  methodName  =(MethodName)arg.getNext();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  MethodName  methodName  =(MethodName)arg.getNext();  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	MethodName  methodName  =(MethodName)arg.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  test(t,  arg.getNext());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  test(t,  arg.getNext());  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	test(t,  arg.getNext());	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  if(diagnostic  ==  null  ||  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(diagnostic  ==  null  ||  methodName.getQualifiedName()!=  null)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic  ==  null  ||  methodName.getQualifiedName()!=  null)  {	  if(diagnostic    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  if(diagnostic  ==  null  &&  diagnostic.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(diagnostic  ==  null  &&  diagnostic.isQualifiedName())  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic  ==  null  &&  diagnostic.isQualifiedName())  {	  if(diagnostic!=    null    &&    diagnostic.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
21	[BUG]  [BUGGY]  if(chemo!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(chemo!=  null)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(chemo!=  null)  {	  if(methodName    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
22	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  diagnostic.isQualifiedName()  &&  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(diagnostic!=  null  &&  diagnostic.isQualifiedName()  &&  methodName.getQualifiedName()!=  null)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  diagnostic.isQualifiedName()  &&  methodName.getQualifiedName()!=  null)  {	  if(diagnostic!=    null    &&    diagnostic.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
23	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  methodName.getQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(diagnostic!=  null  &&  methodName.getQualifiedName())  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  methodName.getQualifiedName())  {	  if(diagnostic!=    null    &&    diagnostic.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
24	[BUG]  [BUGGY]  if(diagnostic!=  null  &&  diagnostic.isQualifiedName()  &&  methodName.getQualifiedName()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(diagnostic!=  null  &&  diagnostic.isQualifiedName()  &&  methodName.getQualifiedName()  ==  null)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic!=  null  &&  diagnostic.isQualifiedName()  &&  methodName.getQualifiedName()  ==  null)  {	  if(diagnostic!=    null    &&    diagnostic.isQualifiedName())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
25	[BUG]  [BUGGY]  if(diagnostic  ==  null  ||  diagnostic.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(diagnostic  ==  null  ||  diagnostic.getQualifiedName()!=  null)  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic  ==  null  ||  diagnostic.getQualifiedName()!=  null)  {	  if(diagnostic    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  if(diagnostic  ==  null  ||  diagnostic.isQualifiedName())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  if(diagnostic  ==  null  ||  diagnostic.isQualifiedName())  {  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	if(diagnostic  ==  null  ||  diagnostic.isQualifiedName())  {	  if(diagnostic    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  System.err.println( "Missing  method  name: "  +  arg.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  System.err.println( "Missing  method  name: "  +  arg.getQualifiedName());  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	System.err.println( "Missing  method  name: "  +  arg.getQualifiedName());	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
28	[BUG]  [BUGGY]  System.err.println( "Missing  method: "  +  arg.getQualifiedName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }    [BUGGY]  System.err.println( "Missing  method: "  +  arg.getQualifiedName());  [BUGGY]    compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	618	618	1	replace	System.err.println( "Missing  method: "  +  arg.getQualifiedName());	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
