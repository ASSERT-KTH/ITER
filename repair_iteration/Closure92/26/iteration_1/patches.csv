bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (verifyProvide(t,  left,  arg)&&  isExplicitlyProvided)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if  (verifyProvide(t,  left,  arg)&&  isExplicitlyProvided)  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if  (verifyProvide(t,  left,  arg)&&  isExplicitlyProvided)  {	  if    (verifyProvide(t,    left,    arg)||    isExplicitlyProvided)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  if(verifyProvide(t,  left,  arg)||  arg.getString().equals( "provide   "))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if(verifyProvide(t,  left,  arg)||  arg.getString().equals( "provide   "))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if(verifyProvide(t,  left,  arg)||  arg.getString().equals( "provide   "))  {	  if(verifyProvide(t,    left,    arg)&&    arg.getString().equals(   "provide   "))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
3	[BUG]  [BUGGY]  if(verifyProvide(t,  left,  arg)&&  arg.getString().equals( "provided "))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if(verifyProvide(t,  left,  arg)&&  arg.getString().equals( "provided "))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if(verifyProvide(t,  left,  arg)&&  arg.getString().equals( "provided "))  {	  if(verifyProvide(t,    left,    arg)&&    arg.getString().equals(   "provide   "))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
4	[BUG]  [BUGGY]  if(verifyProvide(t,  left,  arg)&&!NodeUtil.isFunctionDeclaration(left))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if(verifyProvide(t,  left,  arg)&&!NodeUtil.isFunctionDeclaration(left))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if(verifyProvide(t,  left,  arg)&&!NodeUtil.isFunctionDeclaration(left))  {	  if(verifyProvide(t,    left,    arg)&&!NodeUtil.isExpressionNode(left))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  if(verifyProvide(t,  left,  arg)&&!NodeUtil.isExpressionNode(n))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if(verifyProvide(t,  left,  arg)&&!NodeUtil.isExpressionNode(n))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if(verifyProvide(t,  left,  arg)&&!NodeUtil.isExpressionNode(n))  {	  if(verifyProvide(t,    left,    arg)&&!NodeUtil.isExpressionNode(left))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  if  (verifyProvide(t,  left,  arg)||  NodeUtil.isFunction(left))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if  (verifyProvide(t,  left,  arg)||  NodeUtil.isFunction(left))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if  (verifyProvide(t,  left,  arg)||  NodeUtil.isFunction(left))  {	  if    (verifyProvide(t,    left,    arg)&&    NodeUtil.isFunction(left))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  if  (verifyProvide(t,  left,  arg)||  NodeUtil.isExpressionNode(left))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if  (verifyProvide(t,  left,  arg)||  NodeUtil.isExpressionNode(left))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if  (verifyProvide(t,  left,  arg)||  NodeUtil.isExpressionNode(left))  {	  if    (verifyProvide(t,    left,    arg)&&    NodeUtil.isExpressionNode(left))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  if  (verifyProvide(left,  arg))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if  (verifyProvide(left,  arg))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if  (verifyProvide(left,  arg))  {	  if    (verifyProvide(n,    left,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  if  (verifyProvide(n,  parent,  arg))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if  (verifyProvide(n,  parent,  arg))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if  (verifyProvide(n,  parent,  arg))  {	  if    (verifyProvide(n,    left,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  if  (verifyProvide(n,  left,  arg)||  isExpr)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if  (verifyProvide(n,  left,  arg)||  isExpr)  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if  (verifyProvide(n,  left,  arg)||  isExpr)  {	  if    (verifyProvide(n,    left,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  if  (verifyProvide(n,  left,  arg)&&!isExplicitlyProvided)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if  (verifyProvide(n,  left,  arg)&&!isExplicitlyProvided)  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if  (verifyProvide(n,  left,  arg)&&!isExplicitlyProvided)  {	  if    (verifyProvide(n,    left,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  if  (verifyProvide(t,  left,  arg)&&  isExpr)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if  (verifyProvide(t,  left,  arg)&&  isExpr)  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if  (verifyProvide(t,  left,  arg)&&  isExpr)  {	  if    (verifyProvide(t,    left,    arg)||    isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  arg);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  NodeTraversal.traverse(compiler,  left,  arg);  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	NodeTraversal.traverse(compiler,  left,  arg);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  ProcessClosurePrimitives());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  NodeTraversal.traverse(compiler,  left,  new  ProcessClosurePrimitives());  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	NodeTraversal.traverse(compiler,  left,  new  ProcessClosurePrimitives());	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
15	[BUG]  [BUGGY]  Node  providedNames  =  left.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  Node  providedNames  =  left.getFirstChild();  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	Node  providedNames  =  left.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
16	[BUG]  [BUGGY]  Node  parent  =  left.getParent();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  Node  parent  =  left.getParent();  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	Node  parent  =  left.getParent();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
17	[BUG]  [BUGGY]  if(verifyProvide(t,  left,  arg)||  arg.getModule()  ==  Token.VAR  &&  arg.getString().equals( "provide   "))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if(verifyProvide(t,  left,  arg)||  arg.getModule()  ==  Token.VAR  &&  arg.getString().equals( "provide   "))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if(verifyProvide(t,  left,  arg)||  arg.getModule()  ==  Token.VAR  &&  arg.getString().equals( "provide   "))  {	  if(verifyProvide(t,    left,    arg)&&    arg.getModule()    ==    Token.VAR    &&    arg.getString().equals(   "provide   "))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  if(verifyProvide(t,  left,  arg)&&  arg.getModule()  ==  Token.VAR  &&  arg.getString().equals( "provided "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if(verifyProvide(t,  left,  arg)&&  arg.getModule()  ==  Token.VAR  &&  arg.getString().equals( "provided "))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if(verifyProvide(t,  left,  arg)&&  arg.getModule()  ==  Token.VAR  &&  arg.getString().equals( "provided "))  {	  if(verifyProvide(t,    left,    arg)&&    arg.getModule()    ==    Token.VAR    &&    arg.getString().equals(   "provide   "))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  if  (verifyProvide(t,  left,  arg)&&  NodeUtil.isName(left))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if  (verifyProvide(t,  left,  arg)&&  NodeUtil.isName(left))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if  (verifyProvide(t,  left,  arg)&&  NodeUtil.isName(left))  {	  if    (verifyProvide(t,    left,    arg)&&    NodeUtil.isFunction(left))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
20	[BUG]  [BUGGY]  if(verifyProvide(t,  left,  arg)&&  arg.getModule()!=  Token.VAR  &&  arg.getString().equals( "provide "))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if(verifyProvide(t,  left,  arg)&&  arg.getModule()!=  Token.VAR  &&  arg.getString().equals( "provide "))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if(verifyProvide(t,  left,  arg)&&  arg.getModule()!=  Token.VAR  &&  arg.getString().equals( "provide "))  {	  if(verifyProvide(t,    left,    arg)&&    arg.getModule()    ==    Token.VAR    &&    arg.getString().equals(   "provide   "))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  if(verifyProvide(t,  left,  arg)||!NodeUtil.isForIn(left))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if(verifyProvide(t,  left,  arg)||!NodeUtil.isForIn(left))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if(verifyProvide(t,  left,  arg)||!NodeUtil.isForIn(left))  {	  if(verifyProvide(t,    left,    arg)||!NodeUtil.isExpressionNode(left))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
22	[BUG]  [BUGGY]  if  (verifyProvide(t,  left,  arg)&&  NodeUtil.isForIn(left))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if  (verifyProvide(t,  left,  arg)&&  NodeUtil.isForIn(left))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if  (verifyProvide(t,  left,  arg)&&  NodeUtil.isForIn(left))  {	  if    (verifyProvide(t,    left,    arg)&&    NodeUtil.isExpressionNode(left))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
23	[BUG]  [BUGGY]  if(verifyProvide(t,  left,  arg)&&!NodeUtil.mayHaveSideEffects(left))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if(verifyProvide(t,  left,  arg)&&!NodeUtil.mayHaveSideEffects(left))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if(verifyProvide(t,  left,  arg)&&!NodeUtil.mayHaveSideEffects(left))  {	  if(verifyProvide(t,    left,    arg)&&!NodeUtil.isExpressionNode(left))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
24	[BUG]  [BUGGY]  if(verifyProvide(t,  left,  arg)&&!NodeUtil.isForIn(left))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if(verifyProvide(t,  left,  arg)&&!NodeUtil.isForIn(left))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if(verifyProvide(t,  left,  arg)&&!NodeUtil.isForIn(left))  {	  if(verifyProvide(t,    left,    arg)&&!NodeUtil.isExpressionNode(left))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
25	[BUG]  [BUGGY]  if(verifyProvide(t,  left,  arg)&&  arg.getString().equals( "provider "))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if(verifyProvide(t,  left,  arg)&&  arg.getString().equals( "provider "))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if(verifyProvide(t,  left,  arg)&&  arg.getString().equals( "provider "))  {	  if(verifyProvide(t,    left,    arg)&&    arg.getString().equals(   "provide   "))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  if  (verifyProvide(t,  left,  arg)||  requiresLevel)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if  (verifyProvide(t,  left,  arg)||  requiresLevel)  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if  (verifyProvide(t,  left,  arg)||  requiresLevel)  {	  if    (verifyProvide(t,    left,    arg)||    isExplicitlyProvided)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  arg,  new  ProcessClosurePrimitives());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  NodeTraversal.traverse(compiler,  arg,  new  ProcessClosurePrimitives());  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	NodeTraversal.traverse(compiler,  arg,  new  ProcessClosurePrimitives());	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  left,  this);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  NodeTraversal.traverse(compiler,  left,  this);  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	NodeTraversal.traverse(compiler,  left,  this);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
29	[BUG]  [BUGGY]  if  (verifyProvide(t,  left,  arg)||  explicit)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if  (verifyProvide(t,  left,  arg)||  explicit)  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if  (verifyProvide(t,  left,  arg)||  explicit)  {	  if    (verifyProvide(t,    left,    arg)||    isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
30	[BUG]  [BUGGY]  if  (verifyProvide(t,  left,  arg)||  isExpr  ||  parent)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if  (verifyProvide(t,  left,  arg)||  isExpr  ||  parent)  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if  (verifyProvide(t,  left,  arg)||  isExpr  ||  parent)  {	  if    (verifyProvide(t,    left,    arg)||    isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
31	[BUG]  [BUGGY]  if  (verifyProvide(n,  left,  arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if  (verifyProvide(n,  left,  arg.getString()))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if  (verifyProvide(n,  left,  arg.getString()))  {	  if    (verifyProvide(n,    left,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  if  (verifyProvide(n,  left,  arg)&&  NodeUtil.isExpressionNode(left))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if  (verifyProvide(n,  left,  arg)&&  NodeUtil.isExpressionNode(left))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if  (verifyProvide(n,  left,  arg)&&  NodeUtil.isExpressionNode(left))  {	  if    (verifyProvide(n,    left,    arg))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
33	[BUG]  [BUGGY]  if  (verifyProvide(t,  left,  arg)&&  NodeUtil.isExpressionNode(parent))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if  (verifyProvide(t,  left,  arg)&&  NodeUtil.isExpressionNode(parent))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if  (verifyProvide(t,  left,  arg)&&  NodeUtil.isExpressionNode(parent))  {	  if    (verifyProvide(t,    left,    arg)&&    NodeUtil.isExpressionNode(left))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
34	[BUG]  [BUGGY]  if(verifyProvide(t,  left,  arg)&&!NodeUtil.isFunction(left))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if(verifyProvide(t,  left,  arg)&&!NodeUtil.isFunction(left))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if(verifyProvide(t,  left,  arg)&&!NodeUtil.isFunction(left))  {	  if(verifyProvide(t,    left,    arg)&&!NodeUtil.isExpressionNode(left))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
35	[BUG]  [BUGGY]  if(verifyProvide(t,  left,  arg)||!NodeUtil.isFunction(left))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if(verifyProvide(t,  left,  arg)||!NodeUtil.isFunction(left))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if(verifyProvide(t,  left,  arg)||!NodeUtil.isFunction(left))  {	  if(verifyProvide(t,    left,    arg)||!NodeUtil.isExpressionNode(left))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  arg,  this);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  NodeTraversal.traverse(compiler,  arg,  this);  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	NodeTraversal.traverse(compiler,  arg,  this);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
37	[BUG]  [BUGGY]  Node  providedName  =  arg.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  Node  providedName  =  arg.getFirstChild();  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	Node  providedName  =  arg.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
38	[BUG]  [BUGGY]  if(verifyProvide(t,  left,  arg)&&  arg.getModule()  ==  Token.VAR  ||  arg.getString().equals( "provide   "))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();    [BUGGY]  if(verifyProvide(t,  left,  arg)&&  arg.getModule()  ==  Token.VAR  ||  arg.getString().equals( "provide   "))  {  [BUGGY]    String  ns  =  arg.getString();  if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	279	279	1	replace	if(verifyProvide(t,  left,  arg)&&  arg.getModule()  ==  Token.VAR  ||  arg.getString().equals( "provide   "))  {	  if(verifyProvide(t,    left,    arg)&&    arg.getModule()    ==    Token.VAR    &&    arg.getString().equals(   "provide   "))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
