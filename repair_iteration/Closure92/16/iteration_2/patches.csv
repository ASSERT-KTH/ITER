bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  ns  =  left.getQualifiedName()  +  1;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getQualifiedName()  +  1;  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getQualifiedName()  +  1;	  String    ns    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  ')'  expected	11	None	replace
2	[BUG]  [BUGGY]  String  ns  =  left.getString()  + ": "  +  arg.getQualifiedName();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getString()  + ": "  +  arg.getQualifiedName();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getString()  + ": "  +  arg.getQualifiedName();	  String    ns    =    left.getString()    +   ":   "    +    arg.getString();    	non-compiled	[CE]  ')'  expected	15	None	replace
3	[BUG]  [BUGGY]  String  ns  =  arg.getString()  + ": "  +  left.getString();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  arg.getString()  + ": "  +  left.getString();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  arg.getString()  + ": "  +  left.getString();	  String    ns    =    left.getString()    +   ":   "    +    arg.getString();    	non-compiled	[CE]  ')'  expected	15	None	replace
4	[BUG]  [BUGGY]  String  ns  =  left.getString()  + ": "  +  arg.getValue();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getString()  + ": "  +  arg.getValue();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getString()  + ": "  +  arg.getValue();	  String    ns    =    left.getString()    +   ":   "    +    arg.getString();    	non-compiled	[CE]  ')'  expected	15	None	replace
5	[BUG]  [BUGGY]  Node  ns  =  parent.getLastChild();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  ns  =  parent.getLastChild();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  ns  =  parent.getLastChild();	  Node    ns    =    left.getLastChild();    	non-compiled	[CE]  ')'  expected	6	None	replace
6	[BUG]  [BUGGY]  String  ns  =  left.getQualifiedName().trim();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getQualifiedName().trim();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getQualifiedName().trim();	  String    ns    =    left.getQualifiedName();    	non-compiled	[CE]  ')'  expected	10	None	replace
7	[BUG]  [BUGGY]  Node  ns  =  left.getLastChild().getNext();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  ns  =  left.getLastChild().getNext();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  ns  =  left.getLastChild().getNext();	  Node    ns    =    left.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	13	None	replace
8	[BUG]  [BUGGY]  Node  ns  =  n.getFirstChild().getNext();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  ns  =  n.getFirstChild().getNext();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  ns  =  n.getFirstChild().getNext();	  Node    ns    =    left.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	13	None	replace
9	[BUG]  [BUGGY]  Node  ns  =  left.getString();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  ns  =  left.getString();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  ns  =  left.getString();	  Node    ns    =    left.getNext();    	non-compiled	[CE]  ')'  expected	8	None	replace
10	[BUG]  [BUGGY]  String  ns  =  left.getLastChild().getName();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getLastChild().getName();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getLastChild().getName();	  String    ns    =    left.getFirstChild().getName();    	non-compiled	[CE]  ')'  expected	14	None	replace
11	[BUG]  [BUGGY]  String  ns  =  left.getFirstChild().getString();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getFirstChild().getString();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getFirstChild().getString();	  String    ns    =    left.getFirstChild().getName();    	non-compiled	[CE]  ')'  expected	14	None	replace
12	[BUG]  [BUGGY]  String  ns  =  left.getFirstChild().getQualifiedName();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getFirstChild().getQualifiedName();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getFirstChild().getQualifiedName();	  String    ns    =    left.getFirstChild().getName();    	non-compiled	[CE]  ')'  expected	14	None	replace
13	[BUG]  [BUGGY]  String  ns  =  n.getFirstChild().getName();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  n.getFirstChild().getName();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  n.getFirstChild().getName();	  String    ns    =    left.getFirstChild().getName();    	non-compiled	[CE]  ')'  expected	14	None	replace
14	[BUG]  [BUGGY]  String  ns  =  left.getFirstChild();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getFirstChild();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getFirstChild();	  String    ns    =    left.getName();    	non-compiled	[CE]  ')'  expected	9	None	replace
15	[BUG]  [BUGGY]  Node  ns  =  arg.getFirstChild();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  ns  =  arg.getFirstChild();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  ns  =  arg.getFirstChild();	  Node    ns    =    left.getFirstChild();    	non-compiled	[CE]  ')'  expected	5	None	replace
16	[BUG]  [BUGGY]  String  ns  =  left.getString()  + ": "  +  arg.getModule();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getString()  + ": "  +  arg.getModule();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getString()  + ": "  +  arg.getModule();	  String    ns    =    left.getString()    +   ":   ";    	non-compiled	[CE]  ')'  expected	2	None	replace
17	[BUG]  [BUGGY]  Node  parent  =  left.getNext();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  parent  =  left.getNext();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  parent  =  left.getNext();	  Node    parent    =    left.getParent();    	non-compiled	[CE]  ')'  expected	7	None	replace
18	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  parent  =  n.getParent();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  parent  =  n.getParent();	  Node    parent    =    left.getParent();    	non-compiled	[CE]  ')'  expected	7	None	replace
19	[BUG]  [BUGGY]  Node  parent  =  left.getFirstChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  parent  =  left.getFirstChild();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  parent  =  left.getFirstChild();	  Node    parent    =    left.getParent();    	non-compiled	[CE]  ')'  expected	7	None	replace
20	[BUG]  [BUGGY]  String  ns  =  arg.getQualifiedName().trim()  +  1;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  arg.getQualifiedName().trim()  +  1;  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  arg.getQualifiedName().trim()  +  1;	  String    ns    =    arg.getQualifiedName().trim();    	non-compiled	[CE]  ')'  expected	12	None	replace
21	[BUG]  [BUGGY]  String  ns  =  arg.getQualifiedName().substring(0,  arg.getQualifiedName().length());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  arg.getQualifiedName().substring(0,  arg.getQualifiedName().length());  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  arg.getQualifiedName().substring(0,  arg.getQualifiedName().length());	  String    ns    =    arg.getQualifiedName().trim();    	non-compiled	[CE]  ')'  expected	12	None	replace
22	[BUG]  [BUGGY]  Node  ns  =  left.getParent();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  ns  =  left.getParent();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  ns  =  left.getParent();	  Node    ns    =    left.getNext();    	non-compiled	[CE]  ')'  expected	8	None	replace
23	[BUG]  [BUGGY]  String  ns  =  left.getString()  + ": "  +  arg;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getString()  + ": "  +  arg;  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getString()  + ": "  +  arg;	  String    ns    =    left.getString()    +   ":   ";    	non-compiled	[CE]  ')'  expected	2	None	replace
24	[BUG]  [BUGGY]  String  ns  =  left.getString()  + ": "  +  name;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getString()  + ": "  +  name;  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getString()  + ": "  +  name;	  String    ns    =    left.getString()    +   ":   ";    	non-compiled	[CE]  ')'  expected	2	None	replace
25	[BUG]  [BUGGY]  String  ns  =  left.getString()  + ": "+n.getString();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getString()  + ": "+n.getString();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getString()  + ": "+n.getString();	  String    ns    =    left.getString()    +   ":   ";    	non-compiled	[CE]  ')'  expected	2	None	replace
26	[BUG]  [BUGGY]  String  ns  =  left.getString()  + ": "  +  arg.toString();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getString()  + ": "  +  arg.toString();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getString()  + ": "  +  arg.toString();	  String    ns    =    left.getString()    +   ":   "    +    arg.getString();    	non-compiled	[CE]  ')'  expected	15	None	replace
27	[BUG]  [BUGGY]  Node  ns  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  ns  =  n.getFirstChild();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  ns  =  n.getFirstChild();	  Node    ns    =    left.getFirstChild();    	non-compiled	[CE]  ')'  expected	5	None	replace
28	[BUG]  [BUGGY]  Node  parent  =  arg.getParent();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  parent  =  arg.getParent();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  parent  =  arg.getParent();	  Node    parent    =    left.getParent();    	non-compiled	[CE]  ')'  expected	7	None	replace
29	[BUG]  [BUGGY]  String  ns  =(arg.getQualifiedName()  ==  null)?  arg.getQualifiedName()  :  arg.getQualifiedName();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =(arg.getQualifiedName()  ==  null)?  arg.getQualifiedName()  :  arg.getQualifiedName();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =(arg.getQualifiedName()  ==  null)?  arg.getQualifiedName()  :  arg.getQualifiedName();	  String    ns    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  ')'  expected	11	None	replace
30	[BUG]  [BUGGY]  String  ns  =(arg.getQualifiedName()  ==  null)?  arg.getQualifiedName()  :  NON_STRING_PASSED_NODE;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =(arg.getQualifiedName()  ==  null)?  arg.getQualifiedName()  :  NON_STRING_PASSED_NODE;  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =(arg.getQualifiedName()  ==  null)?  arg.getQualifiedName()  :  NON_STRING_PASSED_NODE;	  String    ns    =    arg.getQualifiedName()    +    1;    	non-compiled	[CE]  ')'  expected	11	None	replace
31	[BUG]  [BUGGY]  String  ns  =  left.getString()  + ",  requires  level: ";  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getString()  + ",  requires  level: ";  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getString()  + ",  requires  level: ";	  String    ns    =    left.getString()    +   ".:   ";    	non-compiled	[CE]  ')'  expected	3	None	replace
32	[BUG]  [BUGGY]  Node  ns  =  left.getFirstChild().getParent();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  ns  =  left.getFirstChild().getParent();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  ns  =  left.getFirstChild().getParent();	  Node    ns    =    left.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	13	None	replace
33	[BUG]  [BUGGY]  Node  ns  =  left.getfirstChild();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  ns  =  left.getfirstChild();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  ns  =  left.getfirstChild();	  Node    ns    =    left.getLastChild();    	non-compiled	[CE]  ')'  expected	6	None	replace
34	[BUG]  [BUGGY]  String  ns  =  left.getString()  + ": "  +  arg.getName();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getString()  + ": "  +  arg.getName();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getString()  + ": "  +  arg.getName();	  String    ns    =    left.getString()    +   ":   "    +    arg.getString();    	non-compiled	[CE]  ')'  expected	15	None	replace
35	[BUG]  [BUGGY]  Node  ns  =  arg.getFirstChild().getNext();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  ns  =  arg.getFirstChild().getNext();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  ns  =  arg.getFirstChild().getNext();	  Node    ns    =    left.getFirstChild().getNext();    	non-compiled	[CE]  ')'  expected	13	None	replace
36	[BUG]  [BUGGY]  String  ns  =  left.getString()  + ". ";  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getString()  + ". ";  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getString()  + ". ";	  String    ns    =    left.getString()    +   ".:   ";    	non-compiled	[CE]  ')'  expected	3	None	replace
37	[BUG]  [BUGGY]  String  ns  =  arg.getFirstChild().getName();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  arg.getFirstChild().getName();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  arg.getFirstChild().getName();	  String    ns    =    left.getFirstChild().getName();    	non-compiled	[CE]  ')'  expected	14	None	replace
38	[BUG]  [BUGGY]  Node  parent  =  arg.getNext();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  parent  =  arg.getNext();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  parent  =  arg.getNext();	  Node    parent    =    left.getParent();    	non-compiled	[CE]  ')'  expected	7	None	replace
39	[BUG]  [BUGGY]  Node  ns  =  n.getLastChild();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  ns  =  n.getLastChild();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  ns  =  n.getLastChild();	  Node    ns    =    left.getLastChild();    	non-compiled	[CE]  ')'  expected	6	None	replace
40	[BUG]  [BUGGY]  Node  ns  =  arg.getLastChild();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  Node  ns  =  arg.getLastChild();  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	Node  ns  =  arg.getLastChild();	  Node    ns    =    left.getLastChild();    	non-compiled	[CE]  ')'  expected	6	None	replace
41	[BUG]  [BUGGY]  String  ns  =  left.getString()  + ".prototype. ";  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  processProvideCall(NodeTraversal  t,  Node  n,  Node  parent)  {  Node  left  =  n.getFirstChild();  Node  arg  =  left.getNext();  if  (verifyProvide(t,  left,  arg))  {      [BUGGY]  String  ns  =  left.getString()  + ".prototype. ";  [BUGGY]      if  (providedNames.containsKey(ns))  {  ProvidedName  previouslyProvided  =  providedNames.get(ns);  if  (!previouslyProvided.isExplicitlyProvided())  {  previouslyProvided.addProvide(parent,  t.getModule(),  true);  }  else  {  compiler.report(  t.makeError(n,  DUPLICATE_NAMESPACE_ERROR,  ns));  }  }  else  {  registerAnyProvidedPrefixes(ns,  parent,  t.getModule());  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  processProvideCall  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  previouslyProvided  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  ns  typeDecl  JSModuleGraph  moduleGraph  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1386750490563073	280	280	1	replace	String  ns  =  left.getString()  + ".prototype. ";	  String    ns    =    left.getString()    +   ":   ";    	non-compiled	[CE]  ')'  expected	2	None	replace
