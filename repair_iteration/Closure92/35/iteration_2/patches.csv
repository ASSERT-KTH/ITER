bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  diagnostic  =  INVALID_ARGUMENT_ERROR;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  INVALID_ARGUMENT_ERROR;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  INVALID_ARGUMENT_ERROR;	  if(methodName.equals(arg.getString())||    methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName.equals(arg.getNext())&&  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  methodName.equals(arg.getNext())&&  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	DiagnosticType  diagnostic  =  methodName.equals(arg.getNext())&&  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }	  if(methodName.equals(arg.getString())||    methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  INVALID_ARGUMENT_ERROR;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  INVALID_ARGUMENT_ERROR;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	DiagnosticType  diagnostic  =  INVALID_ARGUMENT_ERROR;	  if(methodName.equals(arg.getString())||    methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
4	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName.equals(arg.getNext())||  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  methodName.equals(arg.getNext())||  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	DiagnosticType  diagnostic  =  methodName.equals(arg.getNext())||  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }	  if(methodName.equals(arg.getString())||    methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
5	[BUG]  [BUGGY]  }  else  if(methodName.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getType()!=  desiredType)  {	  }    else    if(methodName.getNext()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg.getType())&&  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg.getType())&&  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg.getType())&&  methodName.equals(arg.getString()))  {	  }    else    if(methodName.equals(arg.getType())||    methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
7	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg.getNext())&&  methodName.equals(arg.getType())||  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg.getNext())&&  methodName.equals(arg.getType())||  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg.getNext())&&  methodName.equals(arg.getType())||  methodName.equals(arg.getString()))  {	  }    else    if(methodName.equals(arg.getType())||    methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
8	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg.getNext())||  methodName.equals(arg.getType()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg.getNext())||  methodName.equals(arg.getType()))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg.getNext())||  methodName.equals(arg.getType()))  {	  }    else    if(methodName.equals(arg.getType())||    methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
9	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  methodName.getType()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  methodName.getType()  ==  desiredType)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getType()  ==  desiredType  ||  methodName.getType()  ==  desiredType)  {	  }    else    if(methodName.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
10	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  methodName.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  methodName.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getType()  ==  desiredType  ||  methodName.getType()!=  desiredType)  {	  }    else    if(methodName.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
11	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg.getNext())&&  desiredType  ==  TOO_MANY_ARGUMENTS_ERROR)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg.getNext())&&  desiredType  ==  TOO_MANY_ARGUMENTS_ERROR)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg.getNext())&&  desiredType  ==  TOO_MANY_ARGUMENTS_ERROR)  {	  }    else    if(methodName.equals(arg.getNext())&&    desiredType!=    INVALID_ARGUMENT_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
12	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg.getNext())&&  desiredType!=  TOO_MANY_ARGUMENTS_ERROR)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg.getNext())&&  desiredType!=  TOO_MANY_ARGUMENTS_ERROR)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg.getNext())&&  desiredType!=  TOO_MANY_ARGUMENTS_ERROR)  {	  }    else    if(methodName.equals(arg.getNext())&&    desiredType!=    INVALID_ARGUMENT_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
13	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg.getString())&&  desiredType!=  INVALID_ARGUMENT_ERROR)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg.getString())&&  desiredType!=  INVALID_ARGUMENT_ERROR)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg.getString())&&  desiredType!=  INVALID_ARGUMENT_ERROR)  {	  }    else    if(methodName.equals(arg.getNext())&&    desiredType!=    INVALID_ARGUMENT_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
14	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg.getNext())&&  desiredType  ==  INVALID_ARGUMENT_ERROR)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg.getNext())&&  desiredType  ==  INVALID_ARGUMENT_ERROR)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg.getNext())&&  desiredType  ==  INVALID_ARGUMENT_ERROR)  {	  }    else    if(methodName.equals(arg.getNext())&&    desiredType!=    INVALID_ARGUMENT_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
15	[BUG]  [BUGGY]  diagnostic  =  DEFAULT_TYPE_ERROR;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  DEFAULT_TYPE_ERROR;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  DEFAULT_TYPE_ERROR;	  if(diagnostic!=    null)    {    diagnostic    =    DEFAULT_TYPE_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
16	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  DEFAULT_TYPE_ERROR;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  DEFAULT_TYPE_ERROR;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	DiagnosticType  diagnostic  =  DEFAULT_TYPE_ERROR;	  if(diagnostic!=    null)    {    diagnostic    =    DEFAULT_TYPE_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
17	[BUG]  [BUGGY]  diagnos  =  DEFAULT_TYPE_ERROR;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnos  =  DEFAULT_TYPE_ERROR;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnos  =  DEFAULT_TYPE_ERROR;	  if(diagnostic!=    null)    {    diagnostic    =    DEFAULT_TYPE_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
18	[BUG]  [BUGGY]  diagnose  =  DEFAULT_TYPE_ERROR;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnose  =  DEFAULT_TYPE_ERROR;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnose  =  DEFAULT_TYPE_ERROR;	  if(diagnostic!=    null)    {    diagnostic    =    DEFAULT_TYPE_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
19	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getType()  ==  desiredType  ||  methodName.equals(arg.getString()))  {	  }    else    if(arg.getType()    ==    desiredType    ||    methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  arg.getString().equals(methodName.getString()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  arg.getString().equals(methodName.getString()))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getType()  ==  desiredType  ||  arg.getString().equals(methodName.getString()))  {	  }    else    if(arg.getType()    ==    desiredType    ||    methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
21	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  arg.getString().equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  arg.getString().equals(methodName))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getType()  ==  desiredType  ||  arg.getString().equals(methodName))  {	  }    else    if(arg.getType()    ==    desiredType    ||    methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
22	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  typeName)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  typeName)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getType()  ==  typeName)  {	  }    else    if(arg.getType()    ==    typeName)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
23	[BUG]  [BUGGY]  }  else  if(typeName.getType()  ==  arg.getType())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(typeName.getType()  ==  arg.getType())  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(typeName.getType()  ==  arg.getType())  {	  }    else    if(arg.getType()    ==    typeName)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
24	[BUG]  [BUGGY]  }  else  if(arg.getType()  ==  typeName  ||  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()  ==  typeName  ||  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(arg.getType()  ==  typeName  ||  methodName.equals(arg.getString()))  {	  }    else    if(arg.getType()    ==    typeName)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
25	[BUG]  [BUGGY]  }  else  if(womedType  ==  arg.getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(womedType  ==  arg.getNext())  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(womedType  ==  arg.getNext())  {	  }    else    if(womedType!=    arg.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
26	[BUG]  [BUGGY]  }  else  if(womedType  ==  arg.getNext()  ||  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(womedType  ==  arg.getNext()  ||  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(womedType  ==  arg.getNext()  ||  methodName.equals(arg.getString()))  {	  }    else    if(womedType!=    arg.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
27	[BUG]  [BUGGY]  }  else  if(wantedType!=  arg.getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(wantedType!=  arg.getNext())  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(wantedType!=  arg.getNext())  {	  }    else    if(womedType!=    arg.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
28	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName.equals(arg.getNext())?  diagnostic  :  INVALID_ARGUMENT_ERROR;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  methodName.equals(arg.getNext())?  diagnostic  :  INVALID_ARGUMENT_ERROR;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	DiagnosticType  diagnostic  =  methodName.equals(arg.getNext())?  diagnostic  :  INVALID_ARGUMENT_ERROR;	  if(methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
29	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName.equals(arg.getNext())?  INVALID_ARGUMENT_ERROR  :  INVALID_ARGUMENT_ERROR;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  methodName.equals(arg.getNext())?  INVALID_ARGUMENT_ERROR  :  INVALID_ARGUMENT_ERROR;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	DiagnosticType  diagnostic  =  methodName.equals(arg.getNext())?  INVALID_ARGUMENT_ERROR  :  INVALID_ARGUMENT_ERROR;	  if(methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
30	[BUG]  [BUGGY]  diagnos  =  INVALID_ARGUMENT_ERROR;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnos  =  INVALID_ARGUMENT_ERROR;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnos  =  INVALID_ARGUMENT_ERROR;	  if(diagnostic!=    null)    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
31	[BUG]  [BUGGY]  diagnose  =  INVALID_ARGUMENT_ERROR;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnose  =  INVALID_ARGUMENT_ERROR;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnose  =  INVALID_ARGUMENT_ERROR;	  if(diagnostic!=    null)    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
32	[BUG]  [BUGGY]  }  else  if(arg.getNext()  ==  desiredType  ||  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getNext()  ==  desiredType  ||  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(arg.getNext()  ==  desiredType  ||  methodName.equals(arg.getString()))  {	  }    else    if(arg.getNext()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  diagnostic  =  INVALID_ARGUMENT;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  INVALID_ARGUMENT;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  INVALID_ARGUMENT;	  if(methodName.equals(arg.getString())||    methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    else    if(arg.getNext()!=    null)    {    diagnostic    =    INVALID_ARGUMENT    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
34	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  new  DiagnosticType(methodName,  arg.getNext());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  new  DiagnosticType(methodName,  arg.getNext());  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	DiagnosticType  diagnostic  =  new  DiagnosticType(methodName,  arg.getNext());	  if(methodName.equals(arg.getString())||    methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    else    if(arg.getNext()!=    null)    {    diagnostic    =    INVALID_ARGUMENT    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
35	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  INVALID_ARGUMENT;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  INVALID_ARGUMENT;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	DiagnosticType  diagnostic  =  INVALID_ARGUMENT;	  if(methodName.equals(arg.getString())||    methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    else    if(arg.getNext()!=    null)    {    diagnostic    =    INVALID_ARGUMENT    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
36	[BUG]  [BUGGY]  MethodName  methodName  =  arg.getString();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  MethodName  methodName  =  arg.getString();  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	MethodName  methodName  =  arg.getString();	  if(methodName.equals(arg.getString()))    {    methodName    =    arg.getString();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
37	[BUG]  [BUGGY]  methodName  =  arg.getString();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  methodName  =  arg.getString();  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	methodName  =  arg.getString();	  if(methodName.equals(arg.getString()))    {    methodName    =    arg.getString();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
38	[BUG]  [BUGGY]  MethodName  methodName  =  arg.getMethodName();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  MethodName  methodName  =  arg.getMethodName();  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	MethodName  methodName  =  arg.getMethodName();	  if(methodName.equals(arg.getString()))    {    methodName    =    arg.getString();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
39	[BUG]  [BUGGY]  diagnostic  =  methodName;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  methodName;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  methodName;	  if(methodName.equals(arg.getString()))    {    diagnostic    =    methodName;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
40	[BUG]  [BUGGY]  DiagnosticType  methodName  =  methodName.equals(arg.getString())?  diagnostic  :  null;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  methodName  =  methodName.equals(arg.getString())?  diagnostic  :  null;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	DiagnosticType  methodName  =  methodName.equals(arg.getString())?  diagnostic  :  null;	  if(methodName.equals(arg.getString()))    {    diagnostic    =    methodName;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
41	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  methodName;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	DiagnosticType  diagnostic  =  methodName;	  if(methodName.equals(arg.getString()))    {    diagnostic    =    methodName;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
42	[BUG]  [BUGGY]  DiagnosticType  methodName  =  methodName.equals(arg.getString());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  methodName  =  methodName.equals(arg.getString());  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	DiagnosticType  methodName  =  methodName.equals(arg.getString());	  if(methodName.equals(arg.getString()))    {    diagnostic    =    methodName;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
43	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	DiagnosticType  diagnostic  =  INVALID_ARGUMENT_ERROR;  }	  if(diagnostic!=    null)    {    DiagnosticType    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
44	[BUG]  [BUGGY]  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()!=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()!=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()!=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }	  if(methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    else    if(arg.getNext()!=    null)    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()!=  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()!=  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()!=  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }	  if(methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    else    if(arg.getNext()!=    null)    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
46	[BUG]  [BUGGY]  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()  ==  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()  ==  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()  ==  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }	  if(methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    else    if(arg.getNext()!=    null)    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
47	[BUG]  [BUGGY]  methodName  =  methodName.getString();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  methodName  =  methodName.getString();  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	methodName  =  methodName.getString();	  if(methodName!=    null)    {    methodName    =    arg.getString();    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
48	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  type)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  type)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getType()  ==  type)  {	  }    else    if(methodName.getNext()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
49	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg)&&  arg.getNext()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg)&&  arg.getNext()  ==  desiredType)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg)&&  arg.getNext()  ==  desiredType)  {	  }    else    if(methodName.equals(arg)&&    arg.getNext()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
50	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg)||  arg.getNext()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg)||  arg.getNext()!=  desiredType)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg)||  arg.getNext()!=  desiredType)  {	  }    else    if(methodName.equals(arg)&&    arg.getNext()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
51	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg)&&  arg.getParent()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg)&&  arg.getParent()!=  desiredType)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg)&&  arg.getParent()!=  desiredType)  {	  }    else    if(methodName.equals(arg)&&    arg.getNext()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
52	[BUG]  [BUGGY]  diagnostic  =  MethodName.getNativeType(UNKNOWN_TYPE);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  MethodName.getNativeType(UNKNOWN_TYPE);  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  MethodName.getNativeType(UNKNOWN_TYPE);	  diagnostic    =    desiredType;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
53	[BUG]  [BUGGY]  diagnostic  =  desiredType  &&  methodName.equals(arg.getString());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  desiredType  &&  methodName.equals(arg.getString());  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  desiredType  &&  methodName.equals(arg.getString());	  diagnostic    =    desiredType;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
54	[BUG]  [BUGGY]  diagnostic  =  desiredType  &&  methodName.equals(arg.methodName);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  desiredType  &&  methodName.equals(arg.methodName);  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  desiredType  &&  methodName.equals(arg.methodName);	  diagnostic    =    desiredType;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
55	[BUG]  [BUGGY]  diagnostic  =  DEFAULT_THIS_ERROR;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  DEFAULT_THIS_ERROR;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  DEFAULT_THIS_ERROR;	  diagnostic    =    desiredType;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
56	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg.getString())||  methodName.equals(arg.getType()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg.getString())||  methodName.equals(arg.getType()))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg.getString())||  methodName.equals(arg.getType()))  {	  }    else    if(methodName.equals(arg.getType())||    methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
57	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg.getNext())||  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg.getNext())||  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg.getNext())||  methodName.equals(arg.getString()))  {	  }    else    if(methodName.equals(arg.getType())||    methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
58	[BUG]  [BUGGY]  DiagnosticType  methodName  =  methodName.equals(arg.getNext())&&  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  methodName  =  methodName.equals(arg.getNext())&&  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	DiagnosticType  methodName  =  methodName.equals(arg.getNext())&&  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }	  if(methodName.equals(arg.getString())||    methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
59	[BUG]  [BUGGY]  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()!=  null)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()!=  null)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()!=  null)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }	  if(methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    else    if(arg.getNext()!=    null)    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
60	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg.getString()))  {	  }    else    if(arg.getType()    ==    desiredType    ||    methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
61	[BUG]  [BUGGY]  }  else  if(typeName  ==  arg.getType())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(typeName  ==  arg.getType())  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(typeName  ==  arg.getType())  {	  }    else    if(arg.getType()    ==    typeName)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
62	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg.getNext())&&  diagnostic!=  INVALID_ARGUMENT_ERROR)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg.getNext())&&  diagnostic!=  INVALID_ARGUMENT_ERROR)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg.getNext())&&  diagnostic!=  INVALID_ARGUMENT_ERROR)  {	  }    else    if(methodName.equals(arg.getNext())&&    desiredType!=    INVALID_ARGUMENT_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
63	[BUG]  [BUGGY]  }  else  if(methodName  ==  null  ||  arg.getNext()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName  ==  null  ||  arg.getNext()  ==  desiredType)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName  ==  null  ||  arg.getNext()  ==  desiredType)  {	  }    else    if(arg.getNext()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
64	[BUG]  [BUGGY]  MethodName  m  =  arg.getString();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  MethodName  m  =  arg.getString();  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	MethodName  m  =  arg.getString();	  if(methodName.equals(arg.getString()))    {    methodName    =    arg.getString();    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
65	[BUG]  [BUGGY]  safeNames.add(methodName);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  safeNames.add(methodName);  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	safeNames.add(methodName);	  if(diagnostic!=    null)    {    DiagnosticType    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
66	[BUG]  [BUGGY]  safeNameMapping.put(methodName,  diagnostic);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  safeNameMapping.put(methodName,  diagnostic);  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	safeNameMapping.put(methodName,  diagnostic);	  if(diagnostic!=    null)    {    DiagnosticType    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
67	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  Token.FUNCTION  ||  methodName.getNext()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  Token.FUNCTION  ||  methodName.getNext()  ==  desiredType)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getType()  ==  Token.FUNCTION  ||  methodName.getNext()  ==  desiredType)  {	  }    else    if(methodName.getNext()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
68	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  Token.NAME  ||  methodName.getNext()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  Token.NAME  ||  methodName.getNext()  ==  desiredType)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getType()  ==  Token.NAME  ||  methodName.getNext()  ==  desiredType)  {	  }    else    if(methodName.getNext()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
69	[BUG]  [BUGGY]  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;	  if(methodName.equals(arg.getString())||    methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    else    if(arg.getNext()!=    null)    {    diagnostic    =    INVALID_ARGUMENT    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
70	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  arg.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  arg.getNext()!=  null)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getType()  ==  desiredType  ||  arg.getNext()!=  null)  {	  }    else    if(methodName.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
71	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  methodName.getString().equals( "invalid "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  methodName.getString().equals( "invalid "))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getType()  ==  desiredType  ||  methodName.getString().equals( "invalid "))  {	  }    else    if(methodName.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
72	[BUG]  [BUGGY]  }  else  if(methodName.getParent()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getParent()!=  desiredType)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getParent()!=  desiredType)  {	  }    else    if(methodName.getNext()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
73	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName.equals(arg.getNext())?  INVALID_ARGUMENT_ERROR  :  INVALID_ARGUMENTS_ERROR;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  methodName.equals(arg.getNext())?  INVALID_ARGUMENT_ERROR  :  INVALID_ARGUMENTS_ERROR;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	DiagnosticType  diagnostic  =  methodName.equals(arg.getNext())?  INVALID_ARGUMENT_ERROR  :  INVALID_ARGUMENTS_ERROR;	  if(methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
74	[BUG]  [BUGGY]  }  else  if(womedType!=  arg.getNext()  ||  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(womedType!=  arg.getNext()  ||  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(womedType!=  arg.getNext()  ||  methodName.equals(arg.getString()))  {	  }    else    if(womedType!=    arg.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
75	[BUG]  [BUGGY]  }  else  if(womedType!=  arg.getType())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(womedType!=  arg.getType())  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(womedType!=  arg.getType())  {	  }    else    if(womedType!=    arg.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
76	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg)&&  arg.getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg)&&  arg.getNext()!=  null)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg)&&  arg.getNext()!=  null)  {	  }    else    if(methodName.equals(arg)&&    arg.getNext()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
77	[BUG]  [BUGGY]  }  else  if(methodName.getString().endsWith( "__ ")||  methodName.getNext()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getString().endsWith( "__ ")||  methodName.getNext()!=  desiredType)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getString().endsWith( "__ ")||  methodName.getNext()!=  desiredType)  {	  }    else    if(methodName.getNext()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
78	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  methodName.getString().equals( "infinity "))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  methodName.getString().equals( "infinity "))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getType()  ==  desiredType  ||  methodName.getString().equals( "infinity "))  {	  }    else    if(methodName.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  methodName.getString().endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  methodName.getString().endsWith( "__ "))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getType()  ==  desiredType  ||  methodName.getString().endsWith( "__ "))  {	  }    else    if(methodName.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
80	[BUG]  [BUGGY]  DiagnosticType  methodName  =  methodName.equals(arg.getString())?  t.getModule()  :  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  methodName  =  methodName.equals(arg.getString())?  t.getModule()  :  null;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	DiagnosticType  methodName  =  methodName.equals(arg.getString())?  t.getModule()  :  null;	  if(methodName.equals(arg.getString()))    {    diagnostic    =    methodName;    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
81	[BUG]  [BUGGY]  diagnostic  =  methodName.restrictByNotNullOrUndefined();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  methodName.restrictByNotNullOrUndefined();  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  methodName.restrictByNotNullOrUndefined();	  diagnostic    =    desiredType;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
82	[BUG]  [BUGGY]  diagnostic  =  methodName.restrictByNotNullOrUndefined()?  desiredType  :  methodName;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  methodName.restrictByNotNullOrUndefined()?  desiredType  :  methodName;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  methodName.restrictByNotNullOrUndefined()?  desiredType  :  methodName;	  diagnostic    =    desiredType;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
83	[BUG]  [BUGGY]  diagnostic  =  methodName.restrictByNotNullOrUndefined()? "null "  :  desiredType;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  methodName.restrictByNotNullOrUndefined()? "null "  :  desiredType;  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  methodName.restrictByNotNullOrUndefined()? "null "  :  desiredType;	  diagnostic    =    desiredType;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
84	[BUG]  [BUGGY]  parent.replaceChild(arg,  new  Node(Token.EXPR_RESULT,  methodName));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  parent.replaceChild(arg,  new  Node(Token.EXPR_RESULT,  methodName));  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	parent.replaceChild(arg,  new  Node(Token.EXPR_RESULT,  methodName));	  if(diagnostic!=    null)    {    DiagnosticType    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
85	[BUG]  [BUGGY]  parent.replaceChild(arg,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  parent.replaceChild(arg,  new  Node(Token.EMPTY));  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	parent.replaceChild(arg,  new  Node(Token.EMPTY));	  if(diagnostic!=    null)    {    DiagnosticType    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
86	[BUG]  [BUGGY]  }  else  if(womedType!=  arg.getNext()  &&  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(womedType!=  arg.getNext()  &&  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(womedType!=  arg.getNext()  &&  methodName.equals(arg.getString()))  {	  }    else    if(womedType!=    arg.getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
87	[BUG]  [BUGGY]  }  else  if(arg.getType()!=  typeName)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()!=  typeName)  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(arg.getType()!=  typeName)  {	  }    else    if(arg.getType()    ==    typeName)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
88	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg.getNext()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg.getNext()))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg.getNext()))  {	  }    else    if(arg.getNext()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
89	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  methodName.equals(arg.getString())&&  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  methodName.equals(arg.getString())&&  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	DiagnosticType  diagnostic  =  methodName.equals(arg.getString())&&  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }	  if(methodName.equals(arg.getString())||    methodName.equals(arg.getString()))    {    diagnostic    =    INVALID_ARGUMENT_ERROR;    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
90	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg.getNext())&&  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.equals(arg.getNext())&&  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg.getNext())&&  methodName.equals(arg.getString()))  {	  }    else    if(methodName.equals(arg.getType())||    methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
91	[BUG]  [BUGGY]  }  else  if(methodName.getNext()  ==  desiredType  ||  methodName.getString().endsWith( "__ "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getNext()  ==  desiredType  ||  methodName.getString().endsWith( "__ "))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getNext()  ==  desiredType  ||  methodName.getString().endsWith( "__ "))  {	  }    else    if(methodName.getNext()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
92	[BUG]  [BUGGY]  }  else  if(methodName.getNext()  ==  desiredType  ||  methodName.getString().equals( "infinity "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getNext()  ==  desiredType  ||  methodName.getString().equals( "infinity "))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getNext()  ==  desiredType  ||  methodName.getString().equals( "infinity "))  {	  }    else    if(methodName.getNext()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
93	[BUG]  [BUGGY]  }  else  if(arg.getType()  ==  desiredType  &&  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()  ==  desiredType  &&  methodName.equals(arg.getString()))  {  [BUGGY]      diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(arg.getType()  ==  desiredType  &&  methodName.equals(arg.getString()))  {	  }    else    if(arg.getType()    ==    desiredType    ||    methodName.equals(arg.getString()))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
