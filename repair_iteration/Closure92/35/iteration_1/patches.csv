bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(methodName.equals(arg.getString())||  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  if(methodName.equals(arg.getString())||  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	if(methodName.equals(arg.getString())||  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  if(methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()!=  null)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  if(methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()!=  null)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	if(methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()!=  null)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  if(methodName.equals(arg.getString())||  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()!=  null)  {  diagnostic  =  INVALID_ARGUMENT  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  if(methodName.equals(arg.getString())||  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()!=  null)  {  diagnostic  =  INVALID_ARGUMENT  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	if(methodName.equals(arg.getString())||  methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if(arg.getNext()!=  null)  {  diagnostic  =  INVALID_ARGUMENT	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  if(methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  if(methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	if(methodName.equals(arg.getString()))  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
5	[BUG]  [BUGGY]  }  else  if(methodName.getNext()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  }  else  if(methodName.getNext()!=  desiredType)  {  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getNext()!=  desiredType)  {	  }    else    if(arg.getNext()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  }  else  if(arg.getNext()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  }  else  if(arg.getNext()  ==  desiredType)  {  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(arg.getNext()  ==  desiredType)  {	  }    else    if(arg.getNext()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  }  else  if(methodName.getNext()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  }  else  if(methodName.getNext()  ==  desiredType)  {  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getNext()  ==  desiredType)  {	  }    else    if(arg.getNext()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  }  else  if(methodName.getType()  ==  desiredType)  {  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.getType()  ==  desiredType)  {	  }    else    if(arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]  }  else  if(arg.getType()  ==  desiredType  ||  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  }  else  if(arg.getType()  ==  desiredType  ||  methodName.equals(arg.getString()))  {  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(arg.getType()  ==  desiredType  ||  methodName.equals(arg.getString()))  {	  }    else    if(arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
10	[BUG]  [BUGGY]  diagnostic  =  desiredType;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  diagnostic  =  desiredType;  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	diagnostic  =  desiredType;	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  if(diagnostic!=  null)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  if(diagnostic!=  null)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	if(diagnostic!=  null)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;  }	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
12	[BUG]  [BUGGY]  if(diagnostic!=  null)  {  DiagnosticType  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  if(diagnostic!=  null)  {  DiagnosticType  diagnostic  =  INVALID_ARGUMENT_ERROR;  }  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	if(diagnostic!=  null)  {  DiagnosticType  diagnostic  =  INVALID_ARGUMENT_ERROR;  }	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
13	[BUG]  [BUGGY]  if(diagnostic!=  null)  {  diagnostic  =  DEFAULT_TYPE_ERROR;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  if(diagnostic!=  null)  {  diagnostic  =  DEFAULT_TYPE_ERROR;  }  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	if(diagnostic!=  null)  {  diagnostic  =  DEFAULT_TYPE_ERROR;  }	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
14	[BUG]  [BUGGY]  }  else  if(arg.getType()  ==  typeName)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  }  else  if(arg.getType()  ==  typeName)  {  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(arg.getType()  ==  typeName)  {	  }    else    if(arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
15	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg)&&  arg.getNext()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  }  else  if(methodName.equals(arg)&&  arg.getNext()!=  desiredType)  {  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg)&&  arg.getNext()!=  desiredType)  {	  }    else    if(arg.getNext()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
16	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg.getNext())&&  desiredType!=  INVALID_ARGUMENT_ERROR)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  }  else  if(methodName.equals(arg.getNext())&&  desiredType!=  INVALID_ARGUMENT_ERROR)  {  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg.getNext())&&  desiredType!=  INVALID_ARGUMENT_ERROR)  {	  }    else    if(arg.getNext()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
17	[BUG]  [BUGGY]  }  else  if(womedType!=  arg.getNext())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  }  else  if(womedType!=  arg.getNext())  {  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(womedType!=  arg.getNext())  {	  }    else    if(arg.getNext()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  if(methodName.equals(arg.getString()))  {  methodName  =  arg.getString();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  if(methodName.equals(arg.getString()))  {  methodName  =  arg.getString();  }  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	if(methodName.equals(arg.getString()))  {  methodName  =  arg.getString();  }	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
19	[BUG]  [BUGGY]  if(methodName!=  null)  {  methodName  =  arg.getString();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  if(methodName!=  null)  {  methodName  =  arg.getString();  }  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	if(methodName!=  null)  {  methodName  =  arg.getString();  }	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
20	[BUG]  [BUGGY]  if(methodName.equals(arg.getString()))  {  diagnostic  =  methodName;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  if(methodName.equals(arg.getString()))  {  diagnostic  =  methodName;  }  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	if(methodName.equals(arg.getString()))  {  diagnostic  =  methodName;  }	      	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
21	[BUG]  [BUGGY]  }  else  if(methodName.equals(arg.getType())||  methodName.equals(arg.getString()))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;    [BUGGY]  }  else  if(methodName.equals(arg.getType())||  methodName.equals(arg.getString()))  {  [BUGGY]    diagnostic  =  INVALID_ARGUMENT_ERROR;  }  else  if  (arg.getNext()  !=  null)  {  diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13245323570650439	613	613	1	replace	}  else  if(methodName.equals(arg.getType())||  methodName.equals(arg.getString()))  {	  }    else    if(arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
