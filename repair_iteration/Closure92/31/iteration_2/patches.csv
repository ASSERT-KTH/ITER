bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  desiredType;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  desiredType;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  diagnostic  =  desiredType;	  DiagnosticType    diagnostic    =    INVALID_PROVIDE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  BASE_CLASS_ERROR;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  BASE_CLASS_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  diagnostic  =  BASE_CLASS_ERROR;	  DiagnosticType    diagnostic    =    INVALID_PROVIDE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  LATE_PROVIDE_ERROR;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  LATE_PROVIDE_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  diagnostic  =  LATE_PROVIDE_ERROR;	  DiagnosticType    diagnostic    =    INVALID_PROVIDE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  MISSING_ARGUMENTS_ERROR;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  MISSING_ARGUMENTS_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  diagnostic  =  MISSING_ARGUMENTS_ERROR;	  DiagnosticType    diagnostic    =    INVALID_PROVIDE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  &&  methodName.getQualifiedName().equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  &&  methodName.getQualifiedName().equals(methodName))  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(methodName.getType()  ==  desiredType  &&  methodName.getQualifiedName().equals(methodName))  {	  }    else    if(arg.getType()    ==    desiredType    &&    methodName.getQualifiedName().equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
6	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  &&  methodName.getQualifiedName().equals(arg.getQualifiedName()))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  &&  methodName.getQualifiedName().equals(arg.getQualifiedName()))  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(methodName.getType()  ==  desiredType  &&  methodName.getQualifiedName().equals(arg.getQualifiedName()))  {	  }    else    if(arg.getType()    ==    desiredType    &&    methodName.getQualifiedName().equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
7	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  &&  methodName.getQualifiedName().equals(new  String[]  {  methodName  }  ))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  &&  methodName.getQualifiedName().equals(new  String[]  {  methodName  }  ))  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(methodName.getType()  ==  desiredType  &&  methodName.getQualifiedName().equals(new  String[]  {  methodName  }  ))  {	  }    else    if(arg.getType()    ==    desiredType    &&    methodName.getQualifiedName().equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
8	[BUG]  [BUGGY]  DiagnosticType  methodName  =  arg.getQualifiedName()  +  1;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  methodName  =  arg.getQualifiedName()  +  1;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  methodName  =  arg.getQualifiedName()  +  1;	  DiagnosticType    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
9	[BUG]  [BUGGY]  DiagnosticType  methodName  =  methodName.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  methodName  =  methodName.getQualifiedName();  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  methodName  =  methodName.getQualifiedName();	  DiagnosticType    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
10	[BUG]  [BUGGY]  DiagnosticType  methodName  =  diagnostic.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  methodName  =  diagnostic.getQualifiedName();  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  methodName  =  diagnostic.getQualifiedName();	  DiagnosticType    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
11	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  desiredType?  arg.getInitialValue()  :  diagnostic;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  desiredType?  arg.getInitialValue()  :  diagnostic;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  diagnostic  =  desiredType?  arg.getInitialValue()  :  diagnostic;	  DiagnosticType    diagnostic    =    arg.getInitialValue();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
12	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  desiredType.getInitialValue();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  desiredType.getInitialValue();  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  diagnostic  =  desiredType.getInitialValue();	  DiagnosticType    diagnostic    =    arg.getInitialValue();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
13	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  desiredType  ||  arg.getInitialValue()!=  null;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  desiredType  ||  arg.getInitialValue()!=  null;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  diagnostic  =  desiredType  ||  arg.getInitialValue()!=  null;	  DiagnosticType    diagnostic    =    arg.getInitialValue();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
14	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  desiredType?  arg.getInitialValue()  :  null;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  desiredType?  arg.getInitialValue()  :  null;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  diagnostic  =  desiredType?  arg.getInitialValue()  :  null;	  DiagnosticType    diagnostic    =    arg.getInitialValue();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
15	[BUG]  [BUGGY]  }  else  if(arg.getType()  ==  desiredType  ||  arg.getType()  ==  TOO_MANY_ARGUMENTS_ERROR)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()  ==  desiredType  ||  arg.getType()  ==  TOO_MANY_ARGUMENTS_ERROR)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(arg.getType()  ==  desiredType  ||  arg.getType()  ==  TOO_MANY_ARGUMENTS_ERROR)  {	  }    else    if(arg.getType()    ==    TOO_MANY_ARGUMENTS_ERROR    ||    arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
16	[BUG]  [BUGGY]  }  else  if(arg.getType()!=  desiredType  ||  arg.getType()  ==  TOO_MANY_ARGUMENTS_ERROR)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()!=  desiredType  ||  arg.getType()  ==  TOO_MANY_ARGUMENTS_ERROR)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(arg.getType()!=  desiredType  ||  arg.getType()  ==  TOO_MANY_ARGUMENTS_ERROR)  {	  }    else    if(arg.getType()    ==    TOO_MANY_ARGUMENTS_ERROR    ||    arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
17	[BUG]  [BUGGY]  }  else  if(arg.getType()  ==  desiredType  ||  arg.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()  ==  desiredType  ||  arg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(arg.getType()  ==  desiredType  ||  arg.getType()  ==  Token.FUNCTION)  {	  }    else    if(arg.getType()    ==    TOO_MANY_ARGUMENTS_ERROR    ||    arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
18	[BUG]  [BUGGY]  }  else  if(arg.getType()  ==  desiredType  ||  arg.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()  ==  desiredType  ||  arg.getType()  ==  Token.NAME)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(arg.getType()  ==  desiredType  ||  arg.getType()  ==  Token.NAME)  {	  }    else    if(arg.getType()    ==    TOO_MANY_ARGUMENTS_ERROR    ||    arg.getType()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
19	[BUG]  [BUGGY]  diagnostic  =  MISSING_PROVIDE_ERROR;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  MISSING_PROVIDE_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	diagnostic  =  MISSING_PROVIDE_ERROR;	  diagnostic    =    INVALID_PROVIDE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  diagnostic  =  DUPLICATE_NAMESPACE_ERROR;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  DUPLICATE_NAMESPACE_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	diagnostic  =  DUPLICATE_NAMESPACE_ERROR;	  diagnostic    =    INVALID_PROVIDE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
21	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  requiredType)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  requiredType)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(methodName.getType()  ==  requiredType)  {	  }    else    if(arg.getType()    ==    requiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
22	[BUG]  [BUGGY]  }  else  if(arg.getType()  >=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()  >=  desiredType)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(arg.getType()  >=  desiredType)  {	  }    else    if(arg.getType()    ==    requiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
23	[BUG]  [BUGGY]  }  else  if(wangedType  ==  INVALID_PROVIDE_ERROR  ||  desiredType  ==  TOO_MANY_ARGUMENTS_ERROR)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(wangedType  ==  INVALID_PROVIDE_ERROR  ||  desiredType  ==  TOO_MANY_ARGUMENTS_ERROR)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(wangedType  ==  INVALID_PROVIDE_ERROR  ||  desiredType  ==  TOO_MANY_ARGUMENTS_ERROR)  {	  }    else    if(wangedType    ==    INVALID_PROVIDE_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
24	[BUG]  [BUGGY]  }  else  if(unwrappedType  ==  INVALID_PROVIDE_ERROR)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(unwrappedType  ==  INVALID_PROVIDE_ERROR)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(unwrappedType  ==  INVALID_PROVIDE_ERROR)  {	  }    else    if(wangedType    ==    INVALID_PROVIDE_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
25	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  DUPLICATE_NAMESPACE_ERROR;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  DUPLICATE_NAMESPACE_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  diagnostic  =  DUPLICATE_NAMESPACE_ERROR;	  diagnostic    =    BASE_CLASS_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
26	[BUG]  [BUGGY]  diagnostic  =  DUPLICATE_NAMESPACE_ERROR?  BASE_CLASS_ERROR  :  DUPLICATE_NAMESPACE_ERROR;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  DUPLICATE_NAMESPACE_ERROR?  BASE_CLASS_ERROR  :  DUPLICATE_NAMESPACE_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	diagnostic  =  DUPLICATE_NAMESPACE_ERROR?  BASE_CLASS_ERROR  :  DUPLICATE_NAMESPACE_ERROR;	  diagnostic    =    BASE_CLASS_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
27	[BUG]  [BUGGY]  DiagnosticType  methodName  =  arg.getLastChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  methodName  =  arg.getLastChild();  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  methodName  =  arg.getLastChild();	  DiagnosticType    methodName    =    arg.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
28	[BUG]  [BUGGY]  DiagnosticType  methodName  =  arg.getNext();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  methodName  =  arg.getNext();  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  methodName  =  arg.getNext();	  DiagnosticType    methodName    =    arg.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
29	[BUG]  [BUGGY]  }  else  if(arg.getType()  ==  desiredType  ||  arg.getType()!=  TOO_MANY_ARGUMENTS_ERROR)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()  ==  desiredType  ||  arg.getType()!=  TOO_MANY_ARGUMENTS_ERROR)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(arg.getType()  ==  desiredType  ||  arg.getType()!=  TOO_MANY_ARGUMENTS_ERROR)  {	  }    else    if(arg.getType()    ==    TOO_MANY_ARGUMENTS_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  result.add(t.makeError(methodName,  desiredType,  diagnostic));  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  result.add(t.makeError(methodName,  desiredType,  diagnostic));  return  false;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	result.add(t.makeError(methodName,  desiredType,  diagnostic));  return  false;	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    MISSING_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
31	[BUG]  [BUGGY]  result.add(t.makeError(methodName,  desiredType,  MISSING_PROVIDE_ERROR));  return  false;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  result.add(t.makeError(methodName,  desiredType,  MISSING_PROVIDE_ERROR));  return  false;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	result.add(t.makeError(methodName,  desiredType,  MISSING_PROVIDE_ERROR));  return  false;	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    MISSING_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
32	[BUG]  [BUGGY]  Error(t.makeError(methodName,  desiredType,  MISSING_PROVIDE_ERROR));  return  false;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  Error(t.makeError(methodName,  desiredType,  MISSING_PROVIDE_ERROR));  return  false;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	Error(t.makeError(methodName,  desiredType,  MISSING_PROVIDE_ERROR));  return  false;	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    MISSING_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
33	[BUG]  [BUGGY]  Error(t.makeError(methodName,  desiredType,  diagnostic));  return  false;  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  Error(t.makeError(methodName,  desiredType,  diagnostic));  return  false;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	Error(t.makeError(methodName,  desiredType,  diagnostic));  return  false;	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    MISSING_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
34	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  methodName.getQualifiedName()!=  null)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(methodName.getType()  ==  desiredType  ||  methodName.getQualifiedName()!=  null)  {	  }    else    if(arg.getType()    ==    desiredType    ||    methodName.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
35	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  arg.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  ||  arg.getQualifiedName()!=  null)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(methodName.getType()  ==  desiredType  ||  arg.getQualifiedName()!=  null)  {	  }    else    if(arg.getType()    ==    desiredType    ||    methodName.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
36	[BUG]  [BUGGY]  }  else  if(arg.getType()  ==  desiredType  &&  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()  ==  desiredType  &&  methodName.getQualifiedName()!=  null)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(arg.getType()  ==  desiredType  &&  methodName.getQualifiedName()!=  null)  {	  }    else    if(arg.getType()    ==    desiredType    ||    methodName.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
37	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  MISSING_PROVIDE_ERROR;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  MISSING_PROVIDE_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  diagnostic  =  MISSING_PROVIDE_ERROR;	  diagnostic    =    LATE_PROVIDE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
38	[BUG]  [BUGGY]  diagnostic  =  MISSING_PROVIDE_ERROR?  desiredType  :  LATE_PROVIDE_ERROR;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  MISSING_PROVIDE_ERROR?  desiredType  :  LATE_PROVIDE_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	diagnostic  =  MISSING_PROVIDE_ERROR?  desiredType  :  LATE_PROVIDE_ERROR;	  diagnostic    =    LATE_PROVIDE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
39	[BUG]  [BUGGY]  diagnostic  =  desiredType;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  desiredType;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	diagnostic  =  desiredType;	  diagnostic    =    INVALID_ARGUMENT_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
40	[BUG]  [BUGGY]  }  else  if(wangedType  ==  TOO_MANY_ARGUMENTS_ERROR  &&  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(wangedType  ==  TOO_MANY_ARGUMENTS_ERROR  &&  arg.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(wangedType  ==  TOO_MANY_ARGUMENTS_ERROR  &&  arg.getType()!=  desiredType)  {	  }    else    if(wangedType    ==    TOO_MANY_ARGUMENTS_ERROR    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
41	[BUG]  [BUGGY]  DiagnosticType  methodName  =  arg.getLastChild().getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  methodName  =  arg.getLastChild().getNext();  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  methodName  =  arg.getLastChild().getNext();	  DiagnosticType    methodName    =    arg.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
42	[BUG]  [BUGGY]  DiagnosticType  methodName  =  arg.getFirstChild().getString();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  methodName  =  arg.getFirstChild().getString();  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  methodName  =  arg.getFirstChild().getString();	  DiagnosticType    methodName    =    arg.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
43	[BUG]  [BUGGY]  DiagnosticType  methodName  =  arg.getFirstChild().getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  methodName  =  arg.getFirstChild().getQualifiedName();  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  methodName  =  arg.getFirstChild().getQualifiedName();	  DiagnosticType    methodName    =    arg.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
44	[BUG]  [BUGGY]  }  else  if(wangedType  ==  BASE_CLASS_ERROR)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(wangedType  ==  BASE_CLASS_ERROR)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(wangedType  ==  BASE_CLASS_ERROR)  {	  }    else    if(wangedType    ==    TOO_MANY_ARGUMENTS_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
45	[BUG]  [BUGGY]  if(requireNode)  {  if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  INVALID_PROVIDE_ERROR));  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  if(requireNode)  {  if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  INVALID_PROVIDE_ERROR));  return  false;  }  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	if(requireNode)  {  if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  INVALID_PROVIDE_ERROR));  return  false;  }	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    INVALID_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
46	[BUG]  [BUGGY]  result.add(t.makeError(methodName,  desiredType,  INVALID_PROVIDE_ERROR));  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  result.add(t.makeError(methodName,  desiredType,  INVALID_PROVIDE_ERROR));  return  false;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	result.add(t.makeError(methodName,  desiredType,  INVALID_PROVIDE_ERROR));  return  false;	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    INVALID_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
47	[BUG]  [BUGGY]  if(requireNode)  {  if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  BASE_CLASS_ERROR));  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  if(requireNode)  {  if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  BASE_CLASS_ERROR));  return  false;  }  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	if(requireNode)  {  if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  BASE_CLASS_ERROR));  return  false;  }	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    INVALID_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
48	[BUG]  [BUGGY]  if(requireNode)  {  if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  TOO_MANY_ARGUMENTS_ERROR));  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  if(requireNode)  {  if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  TOO_MANY_ARGUMENTS_ERROR));  return  false;  }  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	if(requireNode)  {  if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  TOO_MANY_ARGUMENTS_ERROR));  return  false;  }	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    INVALID_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
49	[BUG]  [BUGGY]  }  else  if(arg.getParent()  ==  desiredType)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getParent()  ==  desiredType)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(arg.getParent()  ==  desiredType)  {	  }    else    if(methodName.getNext()    ==    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
50	[BUG]  [BUGGY]  }  else  if(arg.getType()!=  requiredType)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()!=  requiredType)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(arg.getType()!=  requiredType)  {	  }    else    if(arg.getType()    ==    requiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
51	[BUG]  [BUGGY]  }  else  if(arg.getType()!=  desiredType  &&  methodName.getQualifiedName().equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()!=  desiredType  &&  methodName.getQualifiedName().equals(methodName))  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(arg.getType()!=  desiredType  &&  methodName.getQualifiedName().equals(methodName))  {	  }    else    if(arg.getType()    ==    desiredType    &&    methodName.getQualifiedName().equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
52	[BUG]  [BUGGY]  }  else  if(arg.getType()  ==  desiredType  ||  methodName.getQualifiedName().equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()  ==  desiredType  ||  methodName.getQualifiedName().equals(methodName))  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(arg.getType()  ==  desiredType  ||  methodName.getQualifiedName().equals(methodName))  {	  }    else    if(arg.getType()    ==    desiredType    &&    methodName.getQualifiedName().equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
53	[BUG]  [BUGGY]  }  else  if(arg.getType()!=  desiredType  ||  methodName.getQualifiedName().equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()!=  desiredType  ||  methodName.getQualifiedName().equals(methodName))  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(arg.getType()!=  desiredType  ||  methodName.getQualifiedName().equals(methodName))  {	  }    else    if(arg.getType()    ==    desiredType    &&    methodName.getQualifiedName().equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
54	[BUG]  [BUGGY]  if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  BASE_CLASS_ERROR));  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  BASE_CLASS_ERROR));  return  false;  }  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  BASE_CLASS_ERROR));  return  false;  }	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    INVALID_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
55	[BUG]  [BUGGY]  }  else  if(womedType  ==  TOO_MANY_ARGUMENTS_ERROR)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(womedType  ==  TOO_MANY_ARGUMENTS_ERROR)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(womedType  ==  TOO_MANY_ARGUMENTS_ERROR)  {	  }    else    if(wangedType    ==    TOO_MANY_ARGUMENTS_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
56	[BUG]  [BUGGY]  diagnostic  =  MISSING_PROVIDE_ERROR?  LATE_PROVIDE_ERROR  :  INVALID_PROVIDE_ERROR;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  MISSING_PROVIDE_ERROR?  LATE_PROVIDE_ERROR  :  INVALID_PROVIDE_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	diagnostic  =  MISSING_PROVIDE_ERROR?  LATE_PROVIDE_ERROR  :  INVALID_PROVIDE_ERROR;	  diagnostic    =    LATE_PROVIDE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
57	[BUG]  [BUGGY]  if(diagnostic  ==  null)  {  compiler.report(t.makeError(methodName,  desiredType,  BASE_CLASS_ERROR));  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  if(diagnostic  ==  null)  {  compiler.report(t.makeError(methodName,  desiredType,  BASE_CLASS_ERROR));  return  false;  }  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	if(diagnostic  ==  null)  {  compiler.report(t.makeError(methodName,  desiredType,  BASE_CLASS_ERROR));  return  false;  }	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    MISSING_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
58	[BUG]  [BUGGY]  if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  diagnostic));  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  diagnostic));  return  false;  }  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  diagnostic));  return  false;  }	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    MISSING_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
59	[BUG]  [BUGGY]  diagnostic  =  FUNCTION_NAMESPACE_ERROR;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  FUNCTION_NAMESPACE_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	diagnostic  =  FUNCTION_NAMESPACE_ERROR;	  diagnostic    =    BASE_CLASS_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
60	[BUG]  [BUGGY]  }  else  if(wangedType  ==  TOO_MANY_ARGUMENTS_ERROR  ||  desiredType  ==  INVALID_PROVIDE_ERROR)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(wangedType  ==  TOO_MANY_ARGUMENTS_ERROR  ||  desiredType  ==  INVALID_PROVIDE_ERROR)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(wangedType  ==  TOO_MANY_ARGUMENTS_ERROR  ||  desiredType  ==  INVALID_PROVIDE_ERROR)  {	  }    else    if(wangedType    ==    INVALID_PROVIDE_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
61	[BUG]  [BUGGY]  }  else  if(arg.getParent()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getParent()!=  desiredType)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(arg.getParent()!=  desiredType)  {	  }    else    if(methodName.getNext()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
62	[BUG]  [BUGGY]  }  else  if(unknownType  ==  TOO_MANY_ARGUMENTS_ERROR  ||  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(unknownType  ==  TOO_MANY_ARGUMENTS_ERROR  ||  arg.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(unknownType  ==  TOO_MANY_ARGUMENTS_ERROR  ||  arg.getType()!=  desiredType)  {	  }    else    if(wangedType    ==    TOO_MANY_ARGUMENTS_ERROR    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
63	[BUG]  [BUGGY]  }  else  if(arg.getType()!=  desiredType  ||  methodName.getQualifiedName()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()!=  desiredType  ||  methodName.getQualifiedName()  ==  null)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(arg.getType()!=  desiredType  ||  methodName.getQualifiedName()  ==  null)  {	  }    else    if(arg.getType()    ==    desiredType    ||    methodName.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
64	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  MISSING_ARGUMENT;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  MISSING_ARGUMENT;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  diagnostic  =  MISSING_ARGUMENT;	  DiagnosticType    diagnostic    =    INVALID_PROVIDE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
65	[BUG]  [BUGGY]  DiagnosticType  methodName  =  arg.getQualifiedName()  +  2;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  methodName  =  arg.getQualifiedName()  +  2;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  methodName  =  arg.getQualifiedName()  +  2;	  DiagnosticType    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
66	[BUG]  [BUGGY]  diagnostic  =  DUPLICATE_PROVIDE_ERROR;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  DUPLICATE_PROVIDE_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	diagnostic  =  DUPLICATE_PROVIDE_ERROR;	  diagnostic    =    BASE_CLASS_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
67	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  LATE_PROVIDE_ERROR?  desiredType  :  INVALID_PROVIDE_ERROR;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  LATE_PROVIDE_ERROR?  desiredType  :  INVALID_PROVIDE_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  diagnostic  =  LATE_PROVIDE_ERROR?  desiredType  :  INVALID_PROVIDE_ERROR;	  DiagnosticType    diagnostic    =    INVALID_PROVIDE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
68	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  MISSING_ARGUMENT_ERROR;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  MISSING_ARGUMENT_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  diagnostic  =  MISSING_ARGUMENT_ERROR;	  DiagnosticType    diagnostic    =    INVALID_PROVIDE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
69	[BUG]  [BUGGY]  }  else  if(arg.getType()  >>  desiredType)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()  >>  desiredType)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(arg.getType()  >>  desiredType)  {	  }    else    if(arg.getType()    ==    TOO_MANY_ARGUMENTS_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
70	[BUG]  [BUGGY]  DiagnosticType  methodName  =  t.getQualifiedName();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  methodName  =  t.getQualifiedName();  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  methodName  =  t.getQualifiedName();	  DiagnosticType    methodName    =    arg.getQualifiedName();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
71	[BUG]  [BUGGY]  }  else  if(wangedType!=  TOO_MANY_ARGUMENTS_ERROR)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(wangedType!=  TOO_MANY_ARGUMENTS_ERROR)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(wangedType!=  TOO_MANY_ARGUMENTS_ERROR)  {	  }    else    if(wangedType    ==    TOO_MANY_ARGUMENTS_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
72	[BUG]  [BUGGY]  }  else  if(wangedType  ==  TOO_MANY_ARGUMENTS_ERROR  &&  methodName.getQualifiedName()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(wangedType  ==  TOO_MANY_ARGUMENTS_ERROR  &&  methodName.getQualifiedName()!=  desiredType)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(wangedType  ==  TOO_MANY_ARGUMENTS_ERROR  &&  methodName.getQualifiedName()!=  desiredType)  {	  }    else    if(wangedType    ==    TOO_MANY_ARGUMENTS_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
73	[BUG]  [BUGGY]  Error(t,  methodName,  desiredType,  MISSING_PROVIDE_ERROR));  return  false;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  Error(t,  methodName,  desiredType,  MISSING_PROVIDE_ERROR));  return  false;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	Error(t,  methodName,  desiredType,  MISSING_PROVIDE_ERROR));  return  false;	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    MISSING_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
74	[BUG]  [BUGGY]  if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  INVALID_ARGUMENT_ERROR));  return  false;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  INVALID_ARGUMENT_ERROR));  return  false;  }  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	if(diagnostic!=  null)  {  compiler.report(t.makeError(methodName,  desiredType,  INVALID_ARGUMENT_ERROR));  return  false;  }	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    MISSING_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
75	[BUG]  [BUGGY]  DiagnosticType  methodName  =  arg.getFirstChild().getParent();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  methodName  =  arg.getFirstChild().getParent();  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  methodName  =  arg.getFirstChild().getParent();	  DiagnosticType    methodName    =    arg.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
76	[BUG]  [BUGGY]  }  else  if(womedType  ==  TOO_MANY_ARGUMENTS_ERROR  &&  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(womedType  ==  TOO_MANY_ARGUMENTS_ERROR  &&  arg.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(womedType  ==  TOO_MANY_ARGUMENTS_ERROR  &&  arg.getType()!=  desiredType)  {	  }    else    if(wangedType    ==    TOO_MANY_ARGUMENTS_ERROR    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
77	[BUG]  [BUGGY]  }  else  if(unwantedType  ==  TOO_MANY_ARGUMENTS_ERROR  ||  arg.getType()!=  desiredType)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(unwantedType  ==  TOO_MANY_ARGUMENTS_ERROR  ||  arg.getType()!=  desiredType)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(unwantedType  ==  TOO_MANY_ARGUMENTS_ERROR  ||  arg.getType()!=  desiredType)  {	  }    else    if(wangedType    ==    TOO_MANY_ARGUMENTS_ERROR    ||    arg.getType()!=    desiredType)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
78	[BUG]  [BUGGY]  }  else  if(wangedType  ==  INVALID_PROVIDE_ERROR  ||  desiredType  ==  INVALID_PROVIDE_ERROR)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(wangedType  ==  INVALID_PROVIDE_ERROR  ||  desiredType  ==  INVALID_PROVIDE_ERROR)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(wangedType  ==  INVALID_PROVIDE_ERROR  ||  desiredType  ==  INVALID_PROVIDE_ERROR)  {	  }    else    if(wangedType    ==    INVALID_PROVIDE_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
79	[BUG]  [BUGGY]  }  else  if(wangedType  ==  INVALID_PROVIDE_ERROR  ||  desiredType  ==  BASE_CLASS_ERROR)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(wangedType  ==  INVALID_PROVIDE_ERROR  ||  desiredType  ==  BASE_CLASS_ERROR)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(wangedType  ==  INVALID_PROVIDE_ERROR  ||  desiredType  ==  BASE_CLASS_ERROR)  {	  }    else    if(wangedType    ==    INVALID_PROVIDE_ERROR)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
80	[BUG]  [BUGGY]  }  else  if(arg.getType()!=  desiredType  ||  methodName.getQualifiedName()!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(arg.getType()!=  desiredType  ||  methodName.getQualifiedName()!=  null)  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(arg.getType()!=  desiredType  ||  methodName.getQualifiedName()!=  null)  {	  }    else    if(arg.getType()    ==    desiredType    ||    methodName.getQualifiedName()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
81	[BUG]  [BUGGY]  diagnostic  =  MISSING_PROVIDE_ERROR?  MISSING_PROVIDE_ERROR  :  LATE_PROVIDE_ERROR;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  diagnostic  =  MISSING_PROVIDE_ERROR?  MISSING_PROVIDE_ERROR  :  LATE_PROVIDE_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	diagnostic  =  MISSING_PROVIDE_ERROR?  MISSING_PROVIDE_ERROR  :  LATE_PROVIDE_ERROR;	  diagnostic    =    LATE_PROVIDE_ERROR;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
82	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  desiredType?  arg.getInitialValue()  :  DUPLICATE_NAMESPACE_ERROR;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  desiredType?  arg.getInitialValue()  :  DUPLICATE_NAMESPACE_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  diagnostic  =  desiredType?  arg.getInitialValue()  :  DUPLICATE_NAMESPACE_ERROR;	  DiagnosticType    diagnostic    =    arg.getInitialValue();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
83	[BUG]  [BUGGY]  DiagnosticType  diagnostic  =  desiredType?  arg.getInitialValue()  :  INVALID_PROVIDE_ERROR;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  DiagnosticType  diagnostic  =  desiredType?  arg.getInitialValue()  :  INVALID_PROVIDE_ERROR;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	DiagnosticType  diagnostic  =  desiredType?  arg.getInitialValue()  :  INVALID_PROVIDE_ERROR;	  DiagnosticType    diagnostic    =    arg.getInitialValue();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
84	[BUG]  [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  &&  methodName.getQualifiedName().equals(new  ProvidedName(node)))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  }  else  if(methodName.getType()  ==  desiredType  &&  methodName.getQualifiedName().equals(new  ProvidedName(node)))  {  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	}  else  if(methodName.getType()  ==  desiredType  &&  methodName.getQualifiedName().equals(new  ProvidedName(node)))  {	  }    else    if(arg.getType()    ==    desiredType    &&    methodName.getQualifiedName().equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
85	[BUG]  [BUGGY]  if(requireNode)  {  compiler.report(t.makeError(methodName,  desiredType,  INVALID_PROVIDE_ERROR));  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  if(requireNode)  {  compiler.report(t.makeError(methodName,  desiredType,  INVALID_PROVIDE_ERROR));  return  false;  }  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	if(requireNode)  {  compiler.report(t.makeError(methodName,  desiredType,  INVALID_PROVIDE_ERROR));  return  false;  }	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    INVALID_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
86	[BUG]  [BUGGY]  Error.makeError(t,  methodName,  desiredType,  INVALID_PROVIDE_ERROR));  return  false;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  Error.makeError(t,  methodName,  desiredType,  INVALID_PROVIDE_ERROR));  return  false;  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	Error.makeError(t,  methodName,  desiredType,  INVALID_PROVIDE_ERROR));  return  false;	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    INVALID_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
87	[BUG]  [BUGGY]  if(requireNode)  {  compiler.report(t.makeError(methodName,  desiredType,  BASE_CLASS_ERROR));  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  if(requireNode)  {  compiler.report(t.makeError(methodName,  desiredType,  BASE_CLASS_ERROR));  return  false;  }  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	if(requireNode)  {  compiler.report(t.makeError(methodName,  desiredType,  BASE_CLASS_ERROR));  return  false;  }	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    INVALID_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
88	[BUG]  [BUGGY]  if(requireNode)  {  compiler.report(t.makeError(methodName,  desiredType,  INVALID_PROVIDE_ERROR));  return  true;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  verifyArgument(NodeTraversal  t,  Node  methodName,  Node  arg,  int  desiredType)  {  DiagnosticType  diagnostic  =  null;  if  (arg  ==  null)  {  diagnostic  =  NULL_ARGUMENT_ERROR;  }  else  if  (arg.getType()  !=  desiredType)  {  diagnostic  =  INVALID_ARGUMENT_ERROR;      [BUGGY]  if(requireNode)  {  compiler.report(t.makeError(methodName,  desiredType,  INVALID_PROVIDE_ERROR));  return  true;  }  [BUGGY]      diagnostic  =  TOO_MANY_ARGUMENTS_ERROR;  }  if  (diagnostic  !=  null)  {  compiler.report(  t.makeError(methodName,  diagnostic,  methodName.getQualifiedName()));  return  false;  }  return  true;  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  verifyArgument  [RETURN_TYPE]  boolean  NodeTraversal  t  Node  methodName  Node  arg  int  desiredType  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  Node  arg  baseClassNode  callGoogNow  callNode  callee  candidateDefinition  className  date  enclosingFnNameNode  enclosingParent  explicitNode  expr  externs  firstNode  googNow  key  left  maybeInheritsExpr  methodName  methodNameNode  n  name  node  parent  replacementNode  requireNode  root  scopeRoot  thisArg  value  String  GOOG  enclosingQname  ending  extraMessage  googNowQName  inputName  methodName  name  namespace  ns  part  typeDecl  value  JSModuleGraph  moduleGraph  int  desiredType  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  diagnostic  error  JSModule  explicitModule  firstModule  minimumModule  module  providedModule  List  typeDecls  unrecognizedRequires  Map  cssNames  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1336306209562122	615	615	1	replace	if(requireNode)  {  compiler.report(t.makeError(methodName,  desiredType,  INVALID_PROVIDE_ERROR));  return  true;  }	  if(diagnostic!=    null)    {    compiler.report(    t.makeError(methodName,    desiredType,    INVALID_PROVIDE_ERROR));    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
