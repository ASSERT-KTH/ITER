bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  processProvideCall(t,  n,  left,  parent);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processProvideCall(t,  n,  left,  parent);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  left,  parent);	  processProvideCall(t,    n,    left);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  processRequireCall(t,  n,  parent);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processRequireCall(t,  n,  parent);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  parent);	  processProvideCall(t,    n,    left);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  processConstructorCall(t,  n,  parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processConstructorCall(t,  n,  parent);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processConstructorCall(t,  n,  parent);	  processProvideCall(t,    n,    left);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
4	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  expr,  left);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processProvideCall(t,  n,  parent,  expr,  left);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  expr,  left);	  processProvideCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  child);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processProvideCall(t,  n,  parent,  child);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  child);	  processProvideCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  processRequireCall(t,  n,  parent,  left);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processRequireCall(t,  n,  parent,  left);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  parent,  left);	  processProvideCall(t,    n,    parent,    left);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
7	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  left,  isExpr);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processProvideCall(t,  n,  parent,  left,  isExpr);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  left,  isExpr);	  processProvideCall(t,    n,    parent,    left);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
8	[BUG]  [BUGGY]  processRequireCall(t,  n,  parent,  requiredLevel);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processRequireCall(t,  n,  parent,  requiredLevel);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  parent,  requiredLevel);	  processProvideCall(t,    n,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
9	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  checkLevel);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processProvideCall(t,  n,  parent,  checkLevel);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  checkLevel);	  processProvideCall(t,    n,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
10	[BUG]  [BUGGY]  processProvideCall(t,  n,  left,  parent,  requiredLevel);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processProvideCall(t,  n,  left,  parent,  requiredLevel);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  left,  parent,  requiredLevel);	  processProvideCall(t,    n,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
11	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Node  left  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Node  left  =  n.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
13	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  Node  left  =  n.getNext();  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Node  left  =  n.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  Context.reportCodeChange();  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Context.reportCodeChange();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  left);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processLocalFunctionCall(t,  n,  parent,  left);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  left);	  processLocalFunctionCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
16	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  expr);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processLocalFunctionCall(t,  n,  parent,  expr);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  expr);	  processLocalFunctionCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
17	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  left);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processLocalFunctionCall(t,  n,  left);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  left);	  processLocalFunctionCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
18	[BUG]  [BUGGY]  State  state  =  n.getState();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  State  state  =  n.getState();  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	State  state  =  n.getState();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  processProviderCall(t,  n,  parent);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processProviderCall(t,  n,  parent);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProviderCall(t,  n,  parent);	  processLocalFunctionCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  getLevel());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processProvideCall(t,  n,  parent,  getLevel());  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  getLevel());	  processProvideCall(t,    n,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
21	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  rewriteNewDateGoogNow);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processProvideCall(t,  n,  parent,  rewriteNewDateGoogNow);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  rewriteNewDateGoogNow);	  processProvideCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  pn);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processProvideCall(t,  n,  parent,  pn);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  pn);	  processProvideCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  processProvideCall(t,  n,  left,  parent,  expr);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processProvideCall(t,  n,  left,  parent,  expr);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  left,  parent,  expr);	  processProvideCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  processInferredProvideCall(t,  n,  left);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processInferredProvideCall(t,  n,  left);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processInferredProvideCall(t,  n,  left);	  processProvideCall(t,    n,    left);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
25	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  left.getLastChild());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processProvideCall(t,  n,  parent,  left.getLastChild());  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  left.getLastChild());	  processProvideCall(t,    n,    parent,    left);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
26	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  left.getFirstChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processProvideCall(t,  n,  parent,  left.getFirstChild());  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  left.getFirstChild());	  processProvideCall(t,    n,    parent,    left);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
27	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  provider);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processLocalFunctionCall(t,  n,  parent,  provider);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  provider);	  processLocalFunctionCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  child);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processLocalFunctionCall(t,  n,  parent,  child);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  child);	  processLocalFunctionCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  processExportCall(t,  n,  parent,  requiredLevel);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processExportCall(t,  n,  parent,  requiredLevel);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processExportCall(t,  n,  parent,  requiredLevel);	  processProvideCall(t,    n,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
30	[BUG]  [BUGGY]  State  state  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  State  state  =  n.getFirstChild();  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	State  state  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  Context.codeBug();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  Context.codeBug();  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Context.codeBug();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
32	[BUG]  [BUGGY]  n.removeChild(left);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  n.removeChild(left);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	n.removeChild(left);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
33	[BUG]  [BUGGY]  processExportCall(t,  n,  parent);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processExportCall(t,  n,  parent);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processExportCall(t,  n,  parent);	  processProvideCall(t,    n,    left);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
34	[BUG]  [BUGGY]  processRequireCall(t,  n,  parent,  expr);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processRequireCall(t,  n,  parent,  expr);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  parent,  expr);	  processProvideCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
35	[BUG]  [BUGGY]  processExportCall(t,  n,  parent,  expr);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processExportCall(t,  n,  parent,  expr);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processExportCall(t,  n,  parent,  expr);	  processProvideCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
36	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  expr,  isExpr);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {    [BUGGY]  processProvideCall(t,  n,  parent,  expr,  isExpr);  [BUGGY]    }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  expr,  isExpr);	  processProvideCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
