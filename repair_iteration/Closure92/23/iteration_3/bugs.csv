bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  processRequireCall(t,  n,  parent,  expr,  left);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processRequireCall(t,  n,  parent,  expr,  left);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  parent,  expr,  left);	  processRequireCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
2	[BUG]  [BUGGY]  processConstructorCall(t,  n,  parent,  expr);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processConstructorCall(t,  n,  parent,  expr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processConstructorCall(t,  n,  parent,  expr);	  processRequireCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
3	[BUG]  [BUGGY]  processRequireCall(t,  n,  parent,  expr,  isExpr);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processRequireCall(t,  n,  parent,  expr,  isExpr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  parent,  expr,  isExpr);	  processRequireCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
4	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  requiresLevel);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  requiresLevel);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  requiresLevel);	  processProvideCall(t,    n,    parent,    checkLevel);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
5	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  needsLevel);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  needsLevel);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  needsLevel);	  processProvideCall(t,    n,    parent,    checkLevel);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
6	[BUG]  [BUGGY]  processRequireCall(t,  n,  left,  parent,  requiredLevel);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processRequireCall(t,  n,  left,  parent,  requiredLevel);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  left,  parent,  requiredLevel);	  processProvideCall(t,    n,    left,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  processConstructorCall(t,  n,  parent,  left);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processConstructorCall(t,  n,  parent,  left);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processConstructorCall(t,  n,  parent,  left);	  processConstructorCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  processConstructorCall(t,  n,  left);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processConstructorCall(t,  n,  left);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processConstructorCall(t,  n,  left);	  processConstructorCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  child,  MISSING_PROVIDE_ERROR);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  child,  MISSING_PROVIDE_ERROR);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  child,  MISSING_PROVIDE_ERROR);	  processProvideCall(t,    n,    parent,    child);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  child,  expr);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  child,  expr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  child,  expr);	  processProvideCall(t,    n,    parent,    child);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  child,  left);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  child,  left);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  child,  left);	  processProvideCall(t,    n,    parent,    child);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
12	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  provider,  expr);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  provider,  expr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  provider,  expr);	  processLocalFunctionCall(t,    n,    parent,    provider);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
13	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  expr,  left);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  expr,  left);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  expr,  left);	  processLocalFunctionCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
14	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  expr,  isExpr);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  expr,  isExpr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  expr,  isExpr);	  processLocalFunctionCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
15	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  pn,  left);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  pn,  left);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  pn,  left);	  processProvideCall(t,    n,    parent,    pn);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
16	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  pn,  expr);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  pn,  expr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  pn,  expr);	  processProvideCall(t,    n,    parent,    pn);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
17	[BUG]  [BUGGY]  processRequireCall(t,  n,  parent,  pn);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processRequireCall(t,  n,  parent,  pn);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  parent,  pn);	  processProvideCall(t,    n,    parent,    pn);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
18	[BUG]  [BUGGY]  processExportCall(t,  n,  parent,  left);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processExportCall(t,  n,  parent,  left);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processExportCall(t,  n,  parent,  left);	  processExportCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
19	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  rewriteNewDateGoogNow,  left);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  rewriteNewDateGoogNow,  left);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  rewriteNewDateGoogNow,  left);	  processProvideCall(t,    n,    parent,    rewriteNewDateGoogNow);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
20	[BUG]  [BUGGY]  processProvideCall(t,  n,  left,  parent,  rewriteNewDateGoogNow);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  left,  parent,  rewriteNewDateGoogNow);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  left,  parent,  rewriteNewDateGoogNow);	  processProvideCall(t,    n,    parent,    rewriteNewDateGoogNow);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
21	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  rewriteNewDateGoogNow,  expr);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  rewriteNewDateGoogNow,  expr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  rewriteNewDateGoogNow,  expr);	  processProvideCall(t,    n,    parent,    rewriteNewDateGoogNow);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
22	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  left,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  left,  parent);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  left,  parent);	  processLocalFunctionCall(t,    n,    left);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
23	[BUG]  [BUGGY]  processProvideCall(t,  n,  left,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  left,  parent.getFirstChild());  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  left,  parent.getFirstChild());	  processProvideCall(t,    n,    parent,    left.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
24	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  left.getString());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  left.getString());  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  left.getString());	  processProvideCall(t,    n,    parent,    left.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
25	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  left,  expr);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  left,  expr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  left,  expr);	  processProvideCall(t,    n,    left,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
26	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  right,  expr);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  right,  expr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  right,  expr);	  processProvideCall(t,    n,    left,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
27	[BUG]  [BUGGY]  processProvideCall(t,  n,  left,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  left,  parent.getLastChild());  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  left,  parent.getLastChild());	  processProvideCall(t,    n,    parent,    left.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
28	[BUG]  [BUGGY]  processRequireCall(t,  n,  parent,  left.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processRequireCall(t,  n,  parent,  left.getLastChild());  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  parent,  left.getLastChild());	  processProvideCall(t,    n,    parent,    left.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
29	[BUG]  [BUGGY]  Context.report(n,  XMODULE_REQUIRE_ERROR);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  Context.report(n,  XMODULE_REQUIRE_ERROR);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Context.report(n,  XMODULE_REQUIRE_ERROR);	  Context.codeBug();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
30	[BUG]  [BUGGY]  Context.report(n,  INVALID_PROVIDE_ERROR);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  Context.report(n,  INVALID_PROVIDE_ERROR);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Context.report(n,  INVALID_PROVIDE_ERROR);	  Context.codeBug();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
31	[BUG]  [BUGGY]  processExportCall(t,  n,  parent,  expr,  left);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processExportCall(t,  n,  parent,  expr,  left);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processExportCall(t,  n,  parent,  expr,  left);	  processExportCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
32	[BUG]  [BUGGY]  processExportCall(t,  n,  parent,  expr,  isExpr);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processExportCall(t,  n,  parent,  expr,  isExpr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processExportCall(t,  n,  parent,  expr,  isExpr);	  processExportCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
33	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_STRING_PASSED_TO_SET_CSS_NAME));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_STRING_PASSED_TO_SET_CSS_NAME));  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Context.report(JSError.make(t,  n,  NON_STRING_PASSED_TO_SET_CSS_NAME));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
34	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  INVALID_PROVIDE_ERROR,  methodName));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  Context.report(JSError.make(t,  n,  INVALID_PROVIDE_ERROR,  methodName));  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Context.report(JSError.make(t,  n,  INVALID_PROVIDE_ERROR,  methodName));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
35	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  DUPLICATE_PROVIDE_ERROR,  methodName));  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  Context.report(JSError.make(t,  n,  DUPLICATE_PROVIDE_ERROR,  methodName));  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Context.report(JSError.make(t,  n,  DUPLICATE_PROVIDE_ERROR,  methodName));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
36	[BUG]  [BUGGY]  processRequireCall(t,  n,  left,  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processRequireCall(t,  n,  left,  parent);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  left,  parent);	  processRequireCall(t,    n,    parent,    left);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  processProviderCall(t,  n,  parent,  left);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProviderCall(t,  n,  parent,  left);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProviderCall(t,  n,  parent,  left);	  processProviderCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
38	[BUG]  [BUGGY]  processProviderCall(t,  n,  left);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProviderCall(t,  n,  left);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProviderCall(t,  n,  left);	  processProviderCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
39	[BUG]  [BUGGY]  processProviderCall(t,  n,  parent,  expr);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProviderCall(t,  n,  parent,  expr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProviderCall(t,  n,  parent,  expr);	  processProviderCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
40	[BUG]  [BUGGY]  processProviderCall(t,  n,  parent,  child);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProviderCall(t,  n,  parent,  child);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProviderCall(t,  n,  parent,  child);	  processProviderCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
41	[BUG]  [BUGGY]  Node  left  =  parent.getNext();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  Node  left  =  parent.getNext();  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Node  left  =  parent.getNext();	  Node    left    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
42	[BUG]  [BUGGY]  Node  left  =  n.getNext()  ||  parent.getType()  ==  Token.FUNCTION;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  Node  left  =  n.getNext()  ||  parent.getType()  ==  Token.FUNCTION;  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Node  left  =  n.getNext()  ||  parent.getType()  ==  Token.FUNCTION;	  Node    left    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
43	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  expr,  MISSING_PROVIDE_ERROR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  expr,  MISSING_PROVIDE_ERROR);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  expr,  MISSING_PROVIDE_ERROR);	  processProvideCall(t,    n,    parent,    expr,    isExpr);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
44	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  expr,  isExpr,  left);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  expr,  isExpr,  left);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  expr,  isExpr,  left);	  processProvideCall(t,    n,    parent,    expr,    isExpr);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
45	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  expr,  methodName);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  expr,  methodName);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  expr,  methodName);	  processProvideCall(t,    n,    parent,    expr,    isExpr);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
46	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  expr,  isRequire);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  expr,  isRequire);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  expr,  isRequire);	  processProvideCall(t,    n,    parent,    expr,    isExpr);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
47	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  child,  sourceName);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  child,  sourceName);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  child,  sourceName);	  processLocalFunctionCall(t,    n,    parent,    child);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
48	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  child,  expr);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  child,  expr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  child,  expr);	  processLocalFunctionCall(t,    n,    parent,    child);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
49	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  child,  moduleGraph);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  child,  moduleGraph);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  child,  moduleGraph);	  processLocalFunctionCall(t,    n,    parent,    child);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
50	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  left,  isExpr);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  left,  isExpr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  left,  isExpr);	  processLocalFunctionCall(t,    n,    parent,    left);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
51	[BUG]  [BUGGY]  Node  left  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  Node  left  =  parent.getFirstChild();  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Node  left  =  parent.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
52	[BUG]  [BUGGY]  State  state  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  State  state  =  n.getLastChild();  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	State  state  =  n.getLastChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
53	[BUG]  [BUGGY]  State  state  =  left.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  State  state  =  left.getFirstChild();  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	State  state  =  left.getFirstChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
54	[BUG]  [BUGGY]  State  state  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  State  state  =  parent.getFirstChild();  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	State  state  =  parent.getFirstChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
55	[BUG]  [BUGGY]  processRequireCall(t,  n,  parent,  checkLevel);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processRequireCall(t,  n,  parent,  checkLevel);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  parent,  checkLevel);	  processRequireCall(t,    n,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
56	[BUG]  [BUGGY]  processRequireCall(t,  n,  left,  requiredLevel);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processRequireCall(t,  n,  left,  requiredLevel);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  left,  requiredLevel);	  processRequireCall(t,    n,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
57	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  n.removeChild(parent);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	n.removeChild(parent);	  n.removeChild(left);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
58	[BUG]  [BUGGY]  n.removeChild(left,  parent);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  n.removeChild(left,  parent);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	n.removeChild(left,  parent);	  n.removeChild(left);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
59	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  getLevel(),  MISSING_PROVIDE_ERROR);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  getLevel(),  MISSING_PROVIDE_ERROR);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  getLevel(),  MISSING_PROVIDE_ERROR);	  processProvideCall(t,    n,    parent,    getLevel());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
60	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  getLevel(),  INVALID_PROVIDE_ERROR);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  getLevel(),  INVALID_PROVIDE_ERROR);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  getLevel(),  INVALID_PROVIDE_ERROR);	  processProvideCall(t,    n,    parent,    getLevel());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
61	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  getLevel()  -  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  getLevel()  -  1);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  getLevel()  -  1);	  processProvideCall(t,    n,    parent,    getLevel());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
62	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  left,  methodName);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  left,  methodName);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  left,  methodName);	  processProvideCall(t,    n,    parent,    left,    isExpr);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
63	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  left,  dot);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  left,  dot);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  left,  dot);	  processProvideCall(t,    n,    parent,    left,    isExpr);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
64	[BUG]  [BUGGY]  Node  left  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  Node  left  =  parent.getLastChild();  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Node  left  =  parent.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
65	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  expr,  left,  isExpr);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  expr,  left,  isExpr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  expr,  left,  isExpr);	  processProvideCall(t,    n,    parent,    expr,    left);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
66	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  expr,  left,  exportSymbol);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  expr,  left,  exportSymbol);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  expr,  left,  exportSymbol);	  processProvideCall(t,    n,    parent,    expr,    left);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
67	[BUG]  [BUGGY]  processInferredProvideCall(t,  n,  parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processInferredProvideCall(t,  n,  parent);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processInferredProvideCall(t,  n,  parent);	  processInferredProvideCall(t,    n,    left);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
68	[BUG]  [BUGGY]  processInferredProvideCall(t,  n,  left,  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processInferredProvideCall(t,  n,  left,  parent);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processInferredProvideCall(t,  n,  left,  parent);	  processInferredProvideCall(t,    n,    left);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
69	[BUG]  [BUGGY]  processExportCall(t,  n,  parent,  checkLevel);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processExportCall(t,  n,  parent,  checkLevel);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processExportCall(t,  n,  parent,  checkLevel);	  processExportCall(t,    n,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
70	[BUG]  [BUGGY]  processExportCall(t,  n,  parent,  level);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processExportCall(t,  n,  parent,  level);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processExportCall(t,  n,  parent,  level);	  processExportCall(t,    n,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
71	[BUG]  [BUGGY]  State  state  =  left.getState();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  State  state  =  left.getState();  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	State  state  =  left.getState();	  State    state    =    n.getState();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
72	[BUG]  [BUGGY]  State  state  =  t.getState();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  State  state  =  t.getState();  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	State  state  =  t.getState();	  State    state    =    n.getState();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
73	[BUG]  [BUGGY]  State  state  =  parent.getState();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  State  state  =  parent.getState();  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	State  state  =  parent.getState();	  State    state    =    n.getState();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
74	[BUG]  [BUGGY]  Node  left  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  Node  left  =  n.getParent();  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Node  left  =  n.getParent();	  Node    left    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
75	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  left.getNext());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  left.getNext());  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  left.getNext());	  processProvideCall(t,    n,    parent,    left.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
76	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  child,  isExpr);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  child,  isExpr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  child,  isExpr);	  processLocalFunctionCall(t,    n,    parent,    child);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
77	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  child,  expression);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  child,  expression);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  child,  expression);	  processLocalFunctionCall(t,    n,    parent,    child);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
78	[BUG]  [BUGGY]  n.replaceChild(left,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  n.replaceChild(left,  parent);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	n.replaceChild(left,  parent);	  n.removeChild(left);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
79	[BUG]  [BUGGY]  n.addChildToFront(parent);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  n.addChildToFront(parent);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	n.addChildToFront(parent);	  n.removeChild(left);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
80	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_STRING_PASSED_TO_SET_CSS_NAME,  methodName));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_STRING_PASSED_TO_SET_CSS_NAME,  methodName));  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Context.report(JSError.make(t,  n,  NON_STRING_PASSED_TO_SET_CSS_NAME,  methodName));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
81	[BUG]  [BUGGY]  processInferredFunctionCall(t,  n,  left);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processInferredFunctionCall(t,  n,  left);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processInferredFunctionCall(t,  n,  left);	  processLocalFunctionCall(t,    n,    left);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
82	[BUG]  [BUGGY]  processProvideCall(t,  n,  left,  parent,  pn);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  left,  parent,  pn);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  left,  parent,  pn);	  processProvideCall(t,    n,    left,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
83	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  requiredLevel);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  requiredLevel);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  requiredLevel);	  processRequireCall(t,    n,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
84	[BUG]  [BUGGY]  processConstructorCall(t,  n,  parent,  requiredLevel);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processConstructorCall(t,  n,  parent,  requiredLevel);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processConstructorCall(t,  n,  parent,  requiredLevel);	  processRequireCall(t,    n,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
85	[BUG]  [BUGGY]  processExportCall(t,  n,  parent,  left.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processExportCall(t,  n,  parent,  left.getLastChild());  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processExportCall(t,  n,  parent,  left.getLastChild());	  processProvideCall(t,    n,    parent,    left.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
86	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  rewriteDateGoogNow);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  rewriteDateGoogNow);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  rewriteDateGoogNow);	  processProvideCall(t,    n,    parent,    rewriteNewDateGoogNow);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
87	[BUG]  [BUGGY]  processInferredProvideCall(t,  n,  parent,  rewriteNewDateGoogNow);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processInferredProvideCall(t,  n,  parent,  rewriteNewDateGoogNow);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processInferredProvideCall(t,  n,  parent,  rewriteNewDateGoogNow);	  processProvideCall(t,    n,    parent,    rewriteNewDateGoogNow);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
88	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  expr,  typeDecl);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  expr,  typeDecl);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  expr,  typeDecl);	  processProvideCall(t,    n,    parent,    expr,    isExpr);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
89	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  provider,  isExpr);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  provider,  isExpr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  provider,  isExpr);	  processProvideCall(t,    n,    parent,    expr,    isExpr);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
90	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  pn,  isExpr);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  pn,  isExpr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  pn,  isExpr);	  processProvideCall(t,    n,    parent,    pn);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
91	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  pn,  sourceName);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  pn,  sourceName);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  pn,  sourceName);	  processProvideCall(t,    n,    parent,    pn);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
92	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  provider);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  provider);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  provider);	  processLocalFunctionCall(t,    n,    parent,    provider);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
93	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  provider,  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  provider,  parent);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  provider,  parent);	  processLocalFunctionCall(t,    n,    parent,    provider);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
94	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  pn);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  pn);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  pn);	  processLocalFunctionCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
95	[BUG]  [BUGGY]  processInferredFunctionCall(t,  n,  parent,  expr);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processInferredFunctionCall(t,  n,  parent,  expr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processInferredFunctionCall(t,  n,  parent,  expr);	  processLocalFunctionCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
96	[BUG]  [BUGGY]  State  state  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  State  state  =  n.getNext();  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	State  state  =  n.getNext();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
97	[BUG]  [BUGGY]  processProvideCall(t,  n,  left,  parent,  isExpr);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  left,  parent,  isExpr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  left,  parent,  isExpr);	  processProvideCall(t,    n,    parent,    left,    isExpr);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
98	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  left,  false);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  left,  false);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  left,  false);	  processProvideCall(t,    n,    parent,    left,    isExpr);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
99	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  left,  requiredLevel);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  left,  requiredLevel);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  left,  requiredLevel);	  processProvideCall(t,    n,    left,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
100	[BUG]  [BUGGY]  processProvideCall(t,  n,  left,  parent,  checkLevel);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  left,  parent,  checkLevel);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  left,  parent,  checkLevel);	  processProvideCall(t,    n,    left,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
101	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  DUPLICATE_PROVIDE_ERROR);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  DUPLICATE_PROVIDE_ERROR);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  DUPLICATE_PROVIDE_ERROR);	  processProvideCall(t,    n,    left,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
102	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  child,  inputName);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  child,  inputName);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  child,  inputName);	  processProvideCall(t,    n,    parent,    child);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
103	[BUG]  [BUGGY]  processExportCall(t,  n,  parent,  pn);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processExportCall(t,  n,  parent,  pn);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processExportCall(t,  n,  parent,  pn);	  processExportCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
104	[BUG]  [BUGGY]  processProvideAssignmentCall(t,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideAssignmentCall(t,  n,  parent);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideAssignmentCall(t,  n,  parent);	  processConstructorCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
105	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPP));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPP));  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Context.report(JSError.make(t,  n,  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPP));	  Context.codeBug();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
106	[BUG]  [BUGGY]  processProvideCall(t,  n,  left,  expr,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  left,  expr,  parent);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  left,  expr,  parent);	  processProvideCall(t,    n,    parent,    expr,    left);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
107	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  expr,  left.getString());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  expr,  left.getString());  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  expr,  left.getString());	  processProvideCall(t,    n,    parent,    expr,    left);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
108	[BUG]  [BUGGY]  processExportCall(t,  n,  parent,  state);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processExportCall(t,  n,  parent,  state);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processExportCall(t,  n,  parent,  state);	  processExportCall(t,    n,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
109	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  expr,  left,  exportName);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  expr,  left,  exportName);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  expr,  left,  exportName);	  processProvideCall(t,    n,    parent,    expr,    left);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
110	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  child,  isExpr);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  child,  isExpr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  child,  isExpr);	  processProvideCall(t,    n,    parent,    child);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
111	[BUG]  [BUGGY]  processRequireCall(t,  n,  parent,  child);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processRequireCall(t,  n,  parent,  child);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  parent,  child);	  processProvideCall(t,    n,    parent,    child);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
112	[BUG]  [BUGGY]  processRequireCall(t,  n,  parent,  rewriteNewDateGoogNow);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processRequireCall(t,  n,  parent,  rewriteNewDateGoogNow);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  parent,  rewriteNewDateGoogNow);	  processProvideCall(t,    n,    parent,    rewriteNewDateGoogNow);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
113	[BUG]  [BUGGY]  Node  left  =  t.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  Node  left  =  t.getLastChild();  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Node  left  =  t.getLastChild();	  Node    left    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
114	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  child,  provider);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  child,  provider);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  child,  provider);	  processLocalFunctionCall(t,    n,    parent,    child);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
115	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  child,  requiredLevel);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  child,  requiredLevel);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  child,  requiredLevel);	  processLocalFunctionCall(t,    n,    parent,    child);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
116	[BUG]  [BUGGY]  processRequireCall(t,  n,  parent,  left.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processRequireCall(t,  n,  parent,  left.getFirstChild());  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  parent,  left.getFirstChild());	  processProvideCall(t,    n,    parent,    left.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
117	[BUG]  [BUGGY]  processExportCall(t,  n,  parent,  expr,  sourceName);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processExportCall(t,  n,  parent,  expr,  sourceName);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processExportCall(t,  n,  parent,  expr,  sourceName);	  processExportCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
118	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_STRING_PASSED_TO_SET_CSS_NAMESPACE_ERROR,  methodName));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_STRING_PASSED_TO_SET_CSS_NAMESPACE_ERROR,  methodName));  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Context.report(JSError.make(t,  n,  NON_STRING_PASSED_TO_SET_CSS_NAMESPACE_ERROR,  methodName));	  Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
119	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  Node  left  =  n.getFirstChild().getNext();  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Node  left  =  n.getFirstChild().getNext();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
120	[BUG]  [BUGGY]  Context.report(JSError.make(t,  n,  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPP,  methodName));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  Context.report(JSError.make(t,  n,  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPP,  methodName));  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	Context.report(JSError.make(t,  n,  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPP,  methodName));	  Context.codeBug();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
121	[BUG]  [BUGGY]  processConstructorCall(t,  n,  parent,  provider);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processConstructorCall(t,  n,  parent,  provider);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processConstructorCall(t,  n,  parent,  provider);	  processConstructorCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
122	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  parent);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  parent);	  processProvideCall(t,    n,    left,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
123	[BUG]  [BUGGY]  ProcessClosurePrimitives.add(t,  n,  parent,  left.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  ProcessClosurePrimitives.add(t,  n,  parent,  left.getFirstChild());  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	ProcessClosurePrimitives.add(t,  n,  parent,  left.getFirstChild());	  processProvideCall(t,    n,    parent,    left.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
124	[BUG]  [BUGGY]  processRequireCall(t,  n,  parent,  left,  isExpr);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processRequireCall(t,  n,  parent,  left,  isExpr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  parent,  left,  isExpr);	  processProvideCall(t,    n,    parent,    left,    isExpr);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
125	[BUG]  [BUGGY]  processExportCall(t,  n,  parent,  left,  isExpr);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processExportCall(t,  n,  parent,  left,  isExpr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processExportCall(t,  n,  parent,  left,  isExpr);	  processProvideCall(t,    n,    parent,    left,    isExpr);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
126	[BUG]  [BUGGY]  processConstructorCall(t,  n,  parent,  left,  isExpr);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processConstructorCall(t,  n,  parent,  left,  isExpr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processConstructorCall(t,  n,  parent,  left,  isExpr);	  processProvideCall(t,    n,    parent,    left,    isExpr);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
127	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  provider,  isExpr);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  provider,  isExpr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  provider,  isExpr);	  processLocalFunctionCall(t,    n,    parent,    provider);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
128	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  provider,  child);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  provider,  child);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  provider,  child);	  processLocalFunctionCall(t,    n,    parent,    provider);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
129	[BUG]  [BUGGY]  processFunctionCall(t,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processFunctionCall(t,  n,  parent);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processFunctionCall(t,  n,  parent);	  processLocalFunctionCall(t,    n,    left);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
130	[BUG]  [BUGGY]  ProcessClosurePrimitives.add(t,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  ProcessClosurePrimitives.add(t,  n,  parent);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	ProcessClosurePrimitives.add(t,  n,  parent);	  processLocalFunctionCall(t,    n,    left);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
131	[BUG]  [BUGGY]  processInferredRequireCall(t,  n,  parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processInferredRequireCall(t,  n,  parent);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processInferredRequireCall(t,  n,  parent);	  processInferredProvideCall(t,    n,    left);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
132	[BUG]  [BUGGY]  processRequireCall(t,  n,  parent,  expr,  requiredLevel);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processRequireCall(t,  n,  parent,  expr,  requiredLevel);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processRequireCall(t,  n,  parent,  expr,  requiredLevel);	  processRequireCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
133	[BUG]  [BUGGY]  processFunctionCall(t,  n,  parent,  expr);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processFunctionCall(t,  n,  parent,  expr);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processFunctionCall(t,  n,  parent,  expr);	  processLocalFunctionCall(t,    n,    parent,    expr);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
134	[BUG]  [BUGGY]  State  state  =  t.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  State  state  =  t.getFirstChild();  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	State  state  =  t.getFirstChild();	  State    state    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
135	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  n);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  n);	  processLocalFunctionCall(t,    n,    parent,    left);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
136	[BUG]  [BUGGY]  processLocalFunctionCall(t,  n,  parent,  n,  left);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processLocalFunctionCall(t,  n,  parent,  n,  left);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processLocalFunctionCall(t,  n,  parent,  n,  left);	  processLocalFunctionCall(t,    n,    parent,    left);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
137	[BUG]  [BUGGY]  processFunctionCall(t,  n,  parent,  left);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processFunctionCall(t,  n,  parent,  left);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processFunctionCall(t,  n,  parent,  left);	  processLocalFunctionCall(t,    n,    parent,    left);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
138	[BUG]  [BUGGY]  n.removeChild(child);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  n.removeChild(child);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	n.removeChild(child);	  n.removeChild(left);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
139	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  requiredLevel,  methodName);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  requiredLevel,  methodName);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  requiredLevel,  methodName);	  processProvideCall(t,    n,    left,    parent,    requiredLevel);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
140	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  getLevel(),  NON_GLOBAL_PROVIDE_ERROR);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  getLevel(),  NON_GLOBAL_PROVIDE_ERROR);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  getLevel(),  NON_GLOBAL_PROVIDE_ERROR);	  processProvideCall(t,    n,    parent,    getLevel());    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
141	[BUG]  [BUGGY]  processProvideCall(t,  n,  parent,  requireLevel);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);  }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {      [BUGGY]  processProvideCall(t,  n,  parent,  requireLevel);  [BUGGY]      }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  if  (dot  ==  -1)  {  exportedVariables.add(arg.getString());  }  else  {  exportedVariables.add(arg.getString().substring(0,  dot));  }  }  [CLASS]  ProcessClosurePrimitives  1  ProvidedName  UnrecognizedRequire  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Set  exportedVariables  NodeTraversal  t  CheckLevel  requiresLevel  ProvidedName  pn  Node  arg  candidateDefinition  explicitNode  externs  firstNode  left  n  name  node  parent  replacementNode  requireNode  root  String  GOOG  inputName  methodName  name  namespace  typeDecl  JSModuleGraph  moduleGraph  int  dot  AbstractCompiler  compiler  boolean  explicit  isExpr  rewriteNewDateGoogNow  DiagnosticType  BASE_CLASS_ERROR  DUPLICATE_NAMESPACE_ERROR  FUNCTION_NAMESPACE_ERROR  INVALID_ARGUMENT_ERROR  INVALID_PROVIDE_ERROR  LATE_PROVIDE_ERROR  MISSING_PROVIDE_ERROR  NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR  NULL_ARGUMENT_ERROR  TOO_MANY_ARGUMENTS_ERROR  XMODULE_REQUIRE_ERROR  error  CodingConvention  convention  JSModule  explicitModule  firstModule  minimumModule  module  List  typeDecls  unrecognizedRequires  Map  providedNames  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13736056394868904	166	166	1	replace	processProvideCall(t,  n,  parent,  requireLevel);	  processProvideCall(t,    n,    parent,    checkLevel);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
