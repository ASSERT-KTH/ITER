bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);    [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT));  [BUGGY]    processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	parent.addChildToBack(new  Node(Token.EXPR_RESULT));	      	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  int  exportSymbol  =  arg.getInput().indexOf('.');  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);    [BUGGY]  int  exportSymbol  =  arg.getInput().indexOf('.');  [BUGGY]    processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  exportSymbol  =  arg.getInput().indexOf('.');	      	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  left));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);    [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  left));  [BUGGY]    processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	parent.addChildToBack(new  Node(Token.EXPR_RESULT,  left));	      	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
4	[BUG]  [BUGGY]  Node  left  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);    [BUGGY]  Node  left  =  n.getNext();  [BUGGY]    processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	Node  left  =  n.getNext();	      	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
5	[BUG]  [BUGGY]  }  else  if( "provideCalls ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);    [BUGGY]  }  else  if( "provideCalls ".equals(methodName))  {  [BUGGY]    processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	}  else  if( "provideCalls ".equals(methodName))  {	  }    else    if    (   "exportSymbol   ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  }  else  if  ( "provideCall ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);    [BUGGY]  }  else  if  ( "provideCall ".equals(methodName))  {  [BUGGY]    processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	}  else  if  ( "provideCall ".equals(methodName))  {	  }    else    if    (   "reportSymbol   ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
7	[BUG]  [BUGGY]  }  else  if  ( "reportProvideCall   ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);    [BUGGY]  }  else  if  ( "reportProvideCall   ".equals(methodName))  {  [BUGGY]    processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	}  else  if  ( "reportProvideCall   ".equals(methodName))  {	  }    else    if    (   "reportSymbol   ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
8	[BUG]  [BUGGY]  int  left  =  left.getFirstChild().indexOf('.');  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);    [BUGGY]  int  left  =  left.getFirstChild().indexOf('.');  [BUGGY]    processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  left  =  left.getFirstChild().indexOf('.');	      	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
9	[BUG]  [BUGGY]  int  left  =  left.getLastChild().indexOf('.');  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);    [BUGGY]  int  left  =  left.getLastChild().indexOf('.');  [BUGGY]    processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  left  =  left.getLastChild().indexOf('.');	      	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
10	[BUG]  [BUGGY]  int  left  =  left.getLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);    [BUGGY]  int  left  =  left.getLastChild();  [BUGGY]    processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  left  =  left.getLastChild();	      	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
11	[BUG]  [BUGGY]  int  methodName  =  arg.getString().indexOf('.');  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);    [BUGGY]  int  methodName  =  arg.getString().indexOf('.');  [BUGGY]    processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  methodName  =  arg.getString().indexOf('.');	      	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  Node  left  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);    [BUGGY]  Node  left  =  n.getFirstChild();  [BUGGY]    processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	Node  left  =  n.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
13	[BUG]  [BUGGY]  int  methodName  =  arg.getString().lastIndexOf('.');  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);    [BUGGY]  int  methodName  =  arg.getString().lastIndexOf('.');  [BUGGY]    processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  methodName  =  arg.getString().lastIndexOf('.');	      	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
14	[BUG]  [BUGGY]  }  else  if( "provideCalls  dot   ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    }  else  if  (!isExpr)  {  break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);    [BUGGY]  }  else  if( "provideCalls  dot   ".equals(methodName))  {  [BUGGY]    processProvideCall(t,  n,  parent);  }  else  if  (   "exportSymbol   ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	}  else  if( "provideCalls  dot   ".equals(methodName))  {	  }    else    if    (   "reportSymbol   ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
