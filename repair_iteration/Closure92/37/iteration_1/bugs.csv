bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  }  else  if  (!isExpr)  {  break;  }  else  if  ( "require ".equals(methodName))  {  processRequireCall(t,  n,  parent);  [BUGGY]    [BUGGY]  processProvideCall(t,  n,  parent);  }  else  if  ( "exportSymbol ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	  	}  else  if  ( "provide ".equals(methodName))  {  	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
2	[BUG]  [BUGGY]  }  else  if  ( "reportSymbol ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  }  else  if  (!isExpr)  {  break;  }  else  if  ( "require ".equals(methodName))  {  processRequireCall(t,  n,  parent);  [BUGGY]  }  else  if  ( "reportSymbol ".equals(methodName))  {  [BUGGY]  processProvideCall(t,  n,  parent);  }  else  if  ( "exportSymbol ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	}  else  if  ( "reportSymbol ".equals(methodName))  {	}  else  if  ( "provide ".equals(methodName))  {  	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
3	[BUG]  [BUGGY]  }  else  if  ( "exportSymbol ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  }  else  if  (!isExpr)  {  break;  }  else  if  ( "require ".equals(methodName))  {  processRequireCall(t,  n,  parent);  [BUGGY]  }  else  if  ( "exportSymbol ".equals(methodName))  {  [BUGGY]  processProvideCall(t,  n,  parent);  }  else  if  ( "exportSymbol ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	}  else  if  ( "exportSymbol ".equals(methodName))  {	}  else  if  ( "provide ".equals(methodName))  {  	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
