bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  dot));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  dot));  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	parent.addChildToBack(new  Node(Token.EXPR_RESULT,  dot));	  parent.addChildToBack(new    Node(Token.EXPR_RESULT));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  n));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  n));  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	parent.addChildToBack(new  Node(Token.EXPR_RESULT,  n));	  parent.addChildToBack(new    Node(Token.EXPR_RESULT));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  arg.getString()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  arg.getString()));  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	parent.addChildToBack(new  Node(Token.EXPR_RESULT,  arg.getString()));	  parent.addChildToBack(new    Node(Token.EXPR_RESULT));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
4	[BUG]  [BUGGY]  int  methodName  =  arg.getString().lastIndexOf('.',  0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  methodName  =  arg.getString().lastIndexOf('.',  0);  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  methodName  =  arg.getString().lastIndexOf('.',  0);	  int    methodName    =    arg.getString().lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
5	[BUG]  [BUGGY]  int  methodName  =  arg.getString().lastIndexOf('.',  -1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  methodName  =  arg.getString().lastIndexOf('.',  -1);  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  methodName  =  arg.getString().lastIndexOf('.',  -1);	  int    methodName    =    arg.getString().lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
6	[BUG]  [BUGGY]  int  methodName  =  arg.getString().indexOf('.',  0);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  methodName  =  arg.getString().indexOf('.',  0);  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  methodName  =  arg.getString().indexOf('.',  0);	  int    methodName    =    arg.getString().indexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
7	[BUG]  [BUGGY]  int  methodName  =  arg.getString().indexOf('.',  left);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  methodName  =  arg.getString().indexOf('.',  left);  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  methodName  =  arg.getString().indexOf('.',  left);	  int    methodName    =    arg.getString().indexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  }  else  if  ( "exportProvideCall   ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  }  else  if  ( "exportProvideCall   ".equals(methodName))  {  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	}  else  if  ( "exportProvideCall   ".equals(methodName))  {	  }    else    if    (   "reportProvideCall       ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  int  exportSymbol  =  arg.getInput().indexOf('.',  left);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  exportSymbol  =  arg.getInput().indexOf('.',  left);  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  exportSymbol  =  arg.getInput().indexOf('.',  left);	  int    exportSymbol    =    arg.getInput().indexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  int  exportSymbol  =  arg.getInput().lastIndexOf('.');  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  exportSymbol  =  arg.getInput().lastIndexOf('.');  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  exportSymbol  =  arg.getInput().lastIndexOf('.');	  int    exportSymbol    =    arg.getInput().indexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  int  exportSymbol  =  arg.getInput().indexOf('.',  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  exportSymbol  =  arg.getInput().indexOf('.',  0);  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  exportSymbol  =  arg.getInput().indexOf('.',  0);	  int    exportSymbol    =    arg.getInput().indexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
12	[BUG]  [BUGGY]  int  left  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  left  =  n.getLastChild();  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  left  =  n.getLastChild();	  int    left    =    left.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
13	[BUG]  [BUGGY]  int  left  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  left  =  n.getFirstChild();  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  left  =  n.getFirstChild();	  int    left    =    left.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
14	[BUG]  [BUGGY]  char  left  =  left.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  char  left  =  left.getLastChild();  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	char  left  =  left.getLastChild();	  int    left    =    left.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
15	[BUG]  [BUGGY]  Node  left  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  Node  left  =  n.getLastChild();  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	Node  left  =  n.getLastChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
16	[BUG]  [BUGGY]  Node  left  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  Node  left  =  parent.getFirstChild();  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	Node  left  =  parent.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
17	[BUG]  [BUGGY]  Node  left  =  t.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  Node  left  =  t.getFirstChild();  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	Node  left  =  t.getFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
18	[BUG]  [BUGGY]  int  left  =  n.getLastChild().indexOf('.');  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  left  =  n.getLastChild().indexOf('.');  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  left  =  n.getLastChild().indexOf('.');	  int    left    =    left.getLastChild().indexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
19	[BUG]  [BUGGY]  int  left  =  n.getFirstChild().indexOf('.');  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  left  =  n.getFirstChild().indexOf('.');  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  left  =  n.getFirstChild().indexOf('.');	  int    left    =    left.getLastChild().indexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  int  left  =  arg.getLastChild().indexOf('.');  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  left  =  arg.getLastChild().indexOf('.');  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  left  =  arg.getLastChild().indexOf('.');	  int    left    =    left.getLastChild().indexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
21	[BUG]  [BUGGY]  int  left  =  arg.getFirstChild().indexOf('.');  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  left  =  arg.getFirstChild().indexOf('.');  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  left  =  arg.getFirstChild().indexOf('.');	  int    left    =    left.getFirstChild().indexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  arg));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  arg));  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	parent.addChildToBack(new  Node(Token.EXPR_RESULT,  arg));	  parent.addChildToBack(new    Node(Token.EXPR_RESULT,    left));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  left,  methodName));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  left,  methodName));  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	parent.addChildToBack(new  Node(Token.EXPR_RESULT,  left,  methodName));	  parent.addChildToBack(new    Node(Token.EXPR_RESULT,    left));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  Node  left  =  parent.getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  Node  left  =  parent.getNext();  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	Node  left  =  parent.getNext();	  Node    left    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	parent.replaceChild(n,  new  Node(Token.EXPR_RESULT));	  parent.addChildToBack(new    Node(Token.EXPR_RESULT));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
26	[BUG]  [BUGGY]  int  methodName  =  arg.getString().lastIndexOf('.',  left);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  methodName  =  arg.getString().lastIndexOf('.',  left);  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  methodName  =  arg.getString().lastIndexOf('.',  left);	  int    methodName    =    arg.getString().lastIndexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
27	[BUG]  [BUGGY]  int  methodName  =  left.getString().indexOf('.');  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  methodName  =  left.getString().indexOf('.');  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  methodName  =  left.getString().indexOf('.');	  int    methodName    =    arg.getString().indexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
28	[BUG]  [BUGGY]  int  exportSymbol  =  left.getInput().indexOf('.');  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  exportSymbol  =  left.getInput().indexOf('.');  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  exportSymbol  =  left.getInput().indexOf('.');	  int    exportSymbol    =    arg.getInput().indexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
29	[BUG]  [BUGGY]  int  exportSymbol  =  arg.getInput().indexOf('.')+  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  exportSymbol  =  arg.getInput().indexOf('.')+  1;  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  exportSymbol  =  arg.getInput().indexOf('.')+  1;	  int    exportSymbol    =    arg.getInput().indexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
30	[BUG]  [BUGGY]  }  else  if  ( "exportProvideCalls   ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  }  else  if  ( "exportProvideCalls   ".equals(methodName))  {  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	}  else  if  ( "exportProvideCalls   ".equals(methodName))  {	  }    else    if    (   "reportProvideCall       ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
31	[BUG]  [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  left),  n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  left),  n);  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	parent.addChildToBack(new  Node(Token.EXPR_RESULT,  left),  n);	  parent.addChildToBack(new    Node(Token.EXPR_RESULT,    left));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
32	[BUG]  [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  left,  1));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  left,  1));  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	parent.addChildToBack(new  Node(Token.EXPR_RESULT,  left,  1));	  parent.addChildToBack(new    Node(Token.EXPR_RESULT,    left));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
33	[BUG]  [BUGGY]  int  left  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  left  =  parent.getLastChild();  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  left  =  parent.getLastChild();	  int    left    =    left.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
34	[BUG]  [BUGGY]  Node  left  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  Node  left  =  n.removeFirstChild();  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	Node  left  =  n.removeFirstChild();	  Node    left    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
35	[BUG]  [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  '.'));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  parent.addChildToBack(new  Node(Token.EXPR_RESULT,  '.'));  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	parent.addChildToBack(new  Node(Token.EXPR_RESULT,  '.'));	  parent.addChildToBack(new    Node(Token.EXPR_RESULT));    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
36	[BUG]  [BUGGY]  int  left  =  n.getlastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  left  =  n.getlastChild();  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  left  =  n.getlastChild();	  int    left    =    left.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
37	[BUG]  [BUGGY]  }  else  if  ( "addDependency ".equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  }  else  if  ( "addDependency ".equals(methodName))  {  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	}  else  if  ( "addDependency ".equals(methodName))  {	  }    else    if    (   "reportProvideCall       ".equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
38	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.EXPR_RESULT,  left));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  parent.replaceChild(n,  Node.EXPR_RESULT,  left));  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	parent.replaceChild(n,  Node.EXPR_RESULT,  left));	  parent.addChildToBack(new    Node(Token.EXPR_RESULT,    left));    	non-compiled	[CE]  ';'  expected	3	None	replace
39	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.EXPR_RESULT,  left);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  parent.replaceChild(n,  Node.EXPR_RESULT,  left);  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	parent.replaceChild(n,  Node.EXPR_RESULT,  left);	  parent.addChildToBack(new    Node(Token.EXPR_RESULT,    left));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
40	[BUG]  [BUGGY]  int  methodName  =  arg.getString().indexOf('.',  -1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  methodName  =  arg.getString().indexOf('.',  -1);  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  methodName  =  arg.getString().indexOf('.',  -1);	  int    methodName    =    arg.getString().indexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
41	[BUG]  [BUGGY]  int  methodName  =  arg.getString().indexOf('.')+  1;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (!isExpr)  {  break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);      [BUGGY]  int  methodName  =  arg.getString().indexOf('.')+  1;  [BUGGY]      processProvideCall(t,  n,  parent);  }  else  if  (     "exportSymbol     ".equals(methodName))  {  Node  arg  =  left.getNext();  if  (arg.getType()  ==  Token.STRING)  {  int  dot  =  arg.getString().indexOf('.');  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.13018891098082389	165	165	1	replace	int  methodName  =  arg.getString().indexOf('.')+  1;	  int    methodName    =    arg.getString().indexOf('.');    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
