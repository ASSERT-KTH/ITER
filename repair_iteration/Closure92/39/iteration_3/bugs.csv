bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(isConstructor()  &&  parent  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor()  &&  parent  ==  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  &&  parent  ==  null)  {	  }    else    if(isConstructor())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  }  else  if(isConstructor()  ||  isInterface())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor()  ||  isInterface())  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  ||  isInterface())  {	  }    else    if(isConstructor())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  }  else  if(!isConstructor()  ||  parent!=  null  &&  parent.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor()  ||  parent!=  null  &&  parent.equals(methodName))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor()  ||  parent!=  null  &&  parent.equals(methodName))  {	  }    else    if(!isConstructor()    &&    parent!=    null    &&    parent.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
4	[BUG]  [BUGGY]  }  else  if(!isConstructor()  &&  n!=  null  &&  parent.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor()  &&  n!=  null  &&  parent.equals(methodName))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor()  &&  n!=  null  &&  parent.equals(methodName))  {	  }    else    if(!isConstructor()    &&    parent!=    null    &&    parent.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
5	[BUG]  [BUGGY]  }  else  if(!isConstructor()  &&  name!=  null  &&  parent.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor()  &&  name!=  null  &&  parent.equals(methodName))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor()  &&  name!=  null  &&  parent.equals(methodName))  {	  }    else    if(!isConstructor()    &&    parent!=    null    &&    parent.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  }  else  if(parent)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent)  {	  }    else    if(isConstructor)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  }  else  if(isConstructor  ||  parent)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor  ||  parent)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor  ||  parent)  {	  }    else    if(isConstructor)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  }  else  if(isConstructor  ||  isRequireCall(n))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor  ||  isRequireCall(n))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor  ||  isRequireCall(n))  {	  }    else    if(isConstructor)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  }  else  if(!isClassCallable  ||  parent  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isClassCallable  ||  parent  ==  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isClassCallable  ||  parent  ==  null)  {	  }    else    if(!isClassCallable    &&    parent    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
10	[BUG]  [BUGGY]  }  else  if(!isClassCallable  &&  methodName  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isClassCallable  &&  methodName  ==  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isClassCallable  &&  methodName  ==  null)  {	  }    else    if(!isClassCallable    &&    parent    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
11	[BUG]  [BUGGY]  }  else  if(!isConstructor  ||  parent  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor  ||  parent  ==  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor  ||  parent  ==  null)  {	  }    else    if(!isConstructor    &&    parent    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  }  else  if(isConstructor  ||  parent  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor  ||  parent  ==  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor  ||  parent  ==  null)  {	  }    else    if(!isConstructor    &&    parent    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
13	[BUG]  [BUGGY]  }  else  if(n  ==  null  ||  parent.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(n  ==  null  ||  parent.equals(methodName))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n  ==  null  ||  parent.equals(methodName))  {	  }    else    if(parent    ==    null    ||    parent.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
14	[BUG]  [BUGGY]  }  else  if(parent  ==  null  &&  parent.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent  ==  null  &&  parent.equals(methodName))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent  ==  null  &&  parent.equals(methodName))  {	  }    else    if(parent    ==    null    ||    parent.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
15	[BUG]  [BUGGY]  }  else  if(name  ==  null  ||  parent.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(name  ==  null  ||  parent.equals(methodName))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(name  ==  null  ||  parent.equals(methodName))  {	  }    else    if(parent    ==    null    ||    parent.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
16	[BUG]  [BUGGY]  }  else  if(methodName  ==  null  ||!isExtern)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName  ==  null  ||!isExtern)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName  ==  null  ||!isExtern)  {	  }    else    if(methodName    ==    null    ||!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
17	[BUG]  [BUGGY]  }  else  if(methodName  ==  null  ||!isFunctionDeclaration)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName  ==  null  ||!isFunctionDeclaration)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName  ==  null  ||!isFunctionDeclaration)  {	  }    else    if(methodName    ==    null    ||!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
18	[BUG]  [BUGGY]  }  else  if(methodName  ==  null  &&!isExpr)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName  ==  null  &&!isExpr)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName  ==  null  &&!isExpr)  {	  }    else    if(parent    ==    null    &&!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
19	[BUG]  [BUGGY]  }  else  if(!isConstructor()  ||  parent!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor()  ||  parent!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor()  ||  parent!=  null)  {	  }    else    if(!isConstructor()    &&    parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
20	[BUG]  [BUGGY]  }  else  if(!isConstructor()  ||  parent  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor()  ||  parent  ==  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor()  ||  parent  ==  null)  {	  }    else    if(!isConstructor()    &&    parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
21	[BUG]  [BUGGY]  parent.addChildToFront(methodName);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.addChildToFront(methodName);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.addChildToFront(methodName);	  parent.addChildToFront(parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
22	[BUG]  [BUGGY]  parent.addChildToFront(n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.addChildToFront(n);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.addChildToFront(n);	  parent.addChildToFront(parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
23	[BUG]  [BUGGY]  parent.removeChild(methodName);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.removeChild(methodName);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.removeChild(methodName);	  parent.addChildToFront(parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
24	[BUG]  [BUGGY]  }  else  if(!isClassCallable  ||  parent!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isClassCallable  ||  parent!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isClassCallable  ||  parent!=  null)  {	  }    else    if(!isClassCallable    &&    parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
25	[BUG]  [BUGGY]  }  else  if(!isClassCallable  &&  methodName!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isClassCallable  &&  methodName!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isClassCallable  &&  methodName!=  null)  {	  }    else    if(!isClassCallable    &&    parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
26	[BUG]  [BUGGY]  }  else  if(n!=  null  ||!isExpr)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(n!=  null  ||!isExpr)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n!=  null  ||!isExpr)  {	  }    else    if(parent!=    null    ||!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
27	[BUG]  [BUGGY]  parent  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent  =  n.getParent();  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent  =  n.getParent();	  parent    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
28	[BUG]  [BUGGY]  parent  =  t.getParent();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent  =  t.getParent();  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent  =  t.getParent();	  parent    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
29	[BUG]  [BUGGY]  }  else  if(n  ==  null  ||  parent.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(n  ==  null  ||  parent.getType()  ==  Token.GETPROP)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n  ==  null  ||  parent.getType()  ==  Token.GETPROP)  {	  }    else    if(parent    ==    null    ||    parent.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
30	[BUG]  [BUGGY]  }  else  if(parent!=  null  ||  parent.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent!=  null  ||  parent.getType()  ==  Token.GETPROP)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent!=  null  ||  parent.getType()  ==  Token.GETPROP)  {	  }    else    if(parent    ==    null    ||    parent.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
31	[BUG]  [BUGGY]  }  else  if(parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {	  }    else    if(parent    ==    null    ||    parent.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
32	[BUG]  [BUGGY]  }  else  if(n!=  null  &&!isExtern)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(n!=  null  &&!isExtern)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n!=  null  &&!isExtern)  {	  }    else    if(parent!=    null    &&!isExtern)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
33	[BUG]  [BUGGY]  }  else  if(n  ==  null  &&!isExtern)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(n  ==  null  &&!isExtern)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n  ==  null  &&!isExtern)  {	  }    else    if(parent!=    null    &&!isExtern)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
34	[BUG]  [BUGGY]  }  else  if(methodName!=  null  &&!isExtern)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName!=  null  &&!isExtern)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName!=  null  &&!isExtern)  {	  }    else    if(parent!=    null    &&!isExtern)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
35	[BUG]  [BUGGY]  }  else  if(isConstructor()  ||  parent!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor()  ||  parent!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  ||  parent!=  null)  {	  }    else    if(isConstructor()    &&    parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
36	[BUG]  [BUGGY]  }  else  if(isConstructor()  ||  parent  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor()  ||  parent  ==  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  ||  parent  ==  null)  {	  }    else    if(isConstructor()    &&    parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
37	[BUG]  [BUGGY]  }  else  if(isConstructor()  &&  n!=  null)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor()  &&  n!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  &&  n!=  null)  {	  }    else    if(isConstructor()    &&    parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
38	[BUG]  [BUGGY]  }  else  if(!isClassCallable())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isClassCallable())  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isClassCallable())  {	  }    else    if(isClassCallable())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
39	[BUG]  [BUGGY]  }  else  if(isClassCallable()  &&  parent!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isClassCallable()  &&  parent!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isClassCallable()  &&  parent!=  null)  {	  }    else    if(isClassCallable())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
40	[BUG]  [BUGGY]  parent.processClassCall(t,  n,  parent,  methodName);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.processClassCall(t,  n,  parent,  methodName);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.processClassCall(t,  n,  parent,  methodName);	  parent.processClassCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
41	[BUG]  [BUGGY]  parent.processClassCall(t,  n,  parent,  name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.processClassCall(t,  n,  parent,  name);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.processClassCall(t,  n,  parent,  name);	  parent.processClassCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
42	[BUG]  [BUGGY]  }  else  if(n!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(n!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n!=  null  &&  parent.getType()  ==  Token.GETPROP)  {	  }    else    if(parent!=    null    &&    parent.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
43	[BUG]  [BUGGY]  }  else  if(n  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(n  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n  ==  null  &&  parent.getType()  ==  Token.GETPROP)  {	  }    else    if(parent!=    null    &&    parent.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
44	[BUG]  [BUGGY]  }  else  if(methodName!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName!=  null  &&  parent.getType()  ==  Token.GETPROP)  {	  }    else    if(parent!=    null    &&    parent.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
45	[BUG]  [BUGGY]  }  else  if(isConstructor()  &&!methodName.equals(parent))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor()  &&!methodName.equals(parent))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  &&!methodName.equals(parent))  {	  }    else    if(isConstructor()    ||!methodName.equals(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
46	[BUG]  [BUGGY]  }  else  if(isConstructor()  ||!methodName.equals( "provide "))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor()  ||!methodName.equals( "provide "))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  ||!methodName.equals( "provide "))  {	  }    else    if(isConstructor()    ||!methodName.equals(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
47	[BUG]  [BUGGY]  }  else  if(!isConstructor()  &&!methodName.equals(parent))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor()  &&!methodName.equals(parent))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor()  &&!methodName.equals(parent))  {	  }    else    if(isConstructor()    ||!methodName.equals(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
48	[BUG]  [BUGGY]  }  else  if(isConstructor()  ||!methodName.equals(n))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor()  ||!methodName.equals(n))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  ||!methodName.equals(n))  {	  }    else    if(isConstructor()    ||!methodName.equals(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
49	[BUG]  [BUGGY]  }  else  if(methodName  ==  null  ||  parent!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName  ==  null  ||  parent!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName  ==  null  ||  parent!=  null)  {	  }    else    if(methodName!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
50	[BUG]  [BUGGY]  }  else  if(n!=  null  &&  parent.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(n!=  null  &&  parent.getType()  ==  Token.CALL)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n!=  null  &&  parent.getType()  ==  Token.CALL)  {	  }    else    if(parent!=    null    &&    parent.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
51	[BUG]  [BUGGY]  }  else  if(n  ==  null  &&  parent.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(n  ==  null  &&  parent.getType()  ==  Token.CALL)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n  ==  null  &&  parent.getType()  ==  Token.CALL)  {	  }    else    if(parent!=    null    &&    parent.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
52	[BUG]  [BUGGY]  }  else  if(methodName!=  null  &&  parent.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName!=  null  &&  parent.getType()  ==  Token.CALL)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName!=  null  &&  parent.getType()  ==  Token.CALL)  {	  }    else    if(parent!=    null    &&    parent.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
53	[BUG]  [BUGGY]  }  else  if(isInterface()  &&  parent!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isInterface()  &&  parent!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isInterface()  &&  parent!=  null)  {	  }    else    if(isInterface())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
54	[BUG]  [BUGGY]  }  else  if(isInterface()  &&  parent  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isInterface()  &&  parent  ==  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isInterface()  &&  parent  ==  null)  {	  }    else    if(isInterface())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
55	[BUG]  [BUGGY]  }  else  if(!isInterface())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isInterface())  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isInterface())  {	  }    else    if(isInterface())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
56	[BUG]  [BUGGY]  }  else  if(isConstructor()  ||  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor()  ||  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  ||  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  }    else    if(isConstructor()    &&    parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
57	[BUG]  [BUGGY]  }  else  if(isConstructor()  ||  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor()  ||  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  ||  parent  ==  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  }    else    if(isConstructor()    &&    parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
58	[BUG]  [BUGGY]  }  else  if(isConstructor()  &&  n!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor()  &&  n!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  &&  n!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  }    else    if(isConstructor()    &&    parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
59	[BUG]  [BUGGY]  }  else  if(n  ==  null  ||!isExtern)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(n  ==  null  ||!isExtern)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n  ==  null  ||!isExtern)  {	  }    else    if(parent    ==    null    ||!isExtern)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
60	[BUG]  [BUGGY]  }  else  if(parent!=  null  ||!isExtern)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent!=  null  ||!isExtern)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent!=  null  ||!isExtern)  {	  }    else    if(parent    ==    null    ||!isExtern)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
61	[BUG]  [BUGGY]  }  else  if(n  ==  null  ||  parent!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(n  ==  null  ||  parent!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n  ==  null  ||  parent!=  null)  {	  }    else    if(n    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
62	[BUG]  [BUGGY]  parent.process(t,  n,  parent,  methodName);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.process(t,  n,  parent,  methodName);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.process(t,  n,  parent,  methodName);	  parent.process(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
63	[BUG]  [BUGGY]  parent.process(t,  n,  base);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.process(t,  n,  base);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.process(t,  n,  base);	  parent.process(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
64	[BUG]  [BUGGY]  parent.process(t,  n,  parent,  name);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.process(t,  n,  parent,  name);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.process(t,  n,  parent,  name);	  parent.process(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
65	[BUG]  [BUGGY]  }  else  if(isClassCallable  &&  parent!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isClassCallable  &&  parent!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isClassCallable  &&  parent!=  null)  {	  }    else    if(isClassCallable)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
66	[BUG]  [BUGGY]  }  else  if(isClassCallable  &&  parent  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isClassCallable  &&  parent  ==  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isClassCallable  &&  parent  ==  null)  {	  }    else    if(isClassCallable)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
67	[BUG]  [BUGGY]  n.removeChild(methodName);  break;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  n.removeChild(methodName);  break;  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	n.removeChild(methodName);  break;	  n.removeChild(parent);    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
68	[BUG]  [BUGGY]  n.removeChild(name);  break;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  n.removeChild(name);  break;  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	n.removeChild(name);  break;	  n.removeChild(parent);    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
69	[BUG]  [BUGGY]  parent.replaceChild(n,  '/');  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.replaceChild(n,  '/');  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.replaceChild(n,  '/');	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
70	[BUG]  [BUGGY]  parent.replaceChild(n,  c);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.replaceChild(n,  c);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.replaceChild(n,  c);	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
71	[BUG]  [BUGGY]  parent.replaceChild(n,  '_');  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.replaceChild(n,  '_');  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.replaceChild(n,  '_');	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
72	[BUG]  [BUGGY]  parent.replaceChild(n,  '-');  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.replaceChild(n,  '-');  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.replaceChild(n,  '-');	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
73	[BUG]  [BUGGY]  }  else  if(!isConstructor  ||  parent!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor  ||  parent!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor  ||  parent!=  null)  {	  }    else    if(!isConstructor    &&    parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
74	[BUG]  [BUGGY]  }  else  if(!isConstructor  &&  name!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor  &&  name!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor  &&  name!=  null)  {	  }    else    if(!isConstructor    &&    parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
75	[BUG]  [BUGGY]  n.removeChild(methodName);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  n.removeChild(methodName);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	n.removeChild(methodName);	  n.removeChild(parent);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
76	[BUG]  [BUGGY]  n.removeChild(name);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  n.removeChild(name);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	n.removeChild(name);	  n.removeChild(parent);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
77	[BUG]  [BUGGY]  n.removeChild(getCurrentName());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  n.removeChild(getCurrentName());  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	n.removeChild(getCurrentName());	  n.removeChild(parent);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
78	[BUG]  [BUGGY]  }  else  if(isConstructor  ||!methodName.equals( "provide "))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor  ||!methodName.equals( "provide "))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor  ||!methodName.equals( "provide "))  {	  }    else    if(isConstructor    ||!methodName.equals(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
79	[BUG]  [BUGGY]  }  else  if(isConstructor  ||!methodName.equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor  ||!methodName.equals( "prototype "))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor  ||!methodName.equals( "prototype "))  {	  }    else    if(isConstructor    ||!methodName.equals(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
80	[BUG]  [BUGGY]  }  else  if(isConstructor  ||!methodName.equals(n))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor  ||!methodName.equals(n))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor  ||!methodName.equals(n))  {	  }    else    if(isConstructor    ||!methodName.equals(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
81	[BUG]  [BUGGY]  }  else  if(isConstructor  ||!methodName.equals( "function "))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor  ||!methodName.equals( "function "))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor  ||!methodName.equals( "function "))  {	  }    else    if(isConstructor    ||!methodName.equals(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
82	[BUG]  [BUGGY]  }  else  if(!isConstructor()  ||  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor()  ||  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor()  ||  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  }    else    if(!isConstructor()    &&    parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
83	[BUG]  [BUGGY]  }  else  if(methodName  ==  null  ||  parent.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName  ==  null  ||  parent.equals(methodName))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName  ==  null  ||  parent.equals(methodName))  {	  }    else    if(methodName    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
84	[BUG]  [BUGGY]  }  else  if(methodName!=  null  ||  name.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName!=  null  ||  name.getType()  ==  Token.GETPROP)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName!=  null  ||  name.getType()  ==  Token.GETPROP)  {	  }    else    if(methodName!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
85	[BUG]  [BUGGY]  }  else  if(methodName!=  null  ||  parent.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName!=  null  ||  parent.equals(methodName))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName!=  null  ||  parent.equals(methodName))  {	  }    else    if(methodName!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
86	[BUG]  [BUGGY]  parent  =  name.getParent();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent  =  name.getParent();  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent  =  name.getParent();	  parent    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
87	[BUG]  [BUGGY]  parent.processClassCall(t,  n,  base);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.processClassCall(t,  n,  base);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.processClassCall(t,  n,  base);	  parent.processClassCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
88	[BUG]  [BUGGY]  }  else  if(!isConstructor  &&  methodName  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor  &&  methodName  ==  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor  &&  methodName  ==  null)  {	  }    else    if(!isConstructor    &&    parent    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
89	[BUG]  [BUGGY]  }  else  if(parent  ||!methodName.equals(isConstructor))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent  ||!methodName.equals(isConstructor))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent  ||!methodName.equals(isConstructor))  {	  }    else    if(isConstructor    ||!methodName.equals(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
90	[BUG]  [BUGGY]  parent.addChildToFront(new  StringBuilder(methodName));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.addChildToFront(new  StringBuilder(methodName));  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.addChildToFront(new  StringBuilder(methodName));	  parent.addChildToFront(parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
91	[BUG]  [BUGGY]  }  else  if(!isConstructor()  &&  n!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor()  &&  n!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor()  &&  n!=  null)  {	  }    else    if(!isConstructor()    &&    parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
92	[BUG]  [BUGGY]  }  else  if(isInterface()  ||  parent.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isInterface()  ||  parent.equals(methodName))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isInterface()  ||  parent.equals(methodName))  {	  }    else    if(isInterface())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
93	[BUG]  [BUGGY]  }  else  if(isConstructor()  ||!methodName.equals( "function "))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor()  ||!methodName.equals( "function "))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  ||!methodName.equals( "function "))  {	  }    else    if(isConstructor()    ||!methodName.equals(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
94	[BUG]  [BUGGY]  }  else  if(isConstructor()  ||!methodName.equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor()  ||!methodName.equals( "prototype "))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  ||!methodName.equals( "prototype "))  {	  }    else    if(isConstructor()    ||!methodName.equals(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
95	[BUG]  [BUGGY]  }  else  if(isExtern)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isExtern)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isExtern)  {	  }    else    if(parent    ==    null    ||!isExtern)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
96	[BUG]  [BUGGY]  n.replaceChild(n,  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  n.replaceChild(n,  parent);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	n.replaceChild(n,  parent);	  n.removeChild(parent);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
97	[BUG]  [BUGGY]  n.removeChild(child);  break;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  n.removeChild(child);  break;  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	n.removeChild(child);  break;	  n.removeChild(parent);    break;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
98	[BUG]  [BUGGY]  }  else  if(!isConstructor  &&  n!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor  &&  n!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor  &&  n!=  null)  {	  }    else    if(!isConstructor    &&    parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
99	[BUG]  [BUGGY]  }  else  if(parent  ==  null  &&  parent.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent  ==  null  &&  parent.getType()  ==  Token.CALL)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent  ==  null  &&  parent.getType()  ==  Token.CALL)  {	  }    else    if(parent!=    null    &&    parent.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
100	[BUG]  [BUGGY]  }  else  if(parent!=  null  ||  parent.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent!=  null  ||  parent.equals(methodName))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent!=  null  ||  parent.equals(methodName))  {	  }    else    if(parent    ==    null    ||    parent.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
101	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&  parent.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent!=  null  &&  parent.equals(methodName))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent!=  null  &&  parent.equals(methodName))  {	  }    else    if(parent    ==    null    ||    parent.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
102	[BUG]  [BUGGY]  }  else  if(isConstructor  ||  isInterface)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor  ||  isInterface)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor  ||  isInterface)  {	  }    else    if(isConstructor)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
103	[BUG]  [BUGGY]  }  else  if(!isClassCallable  &&  n!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isClassCallable  &&  n!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isClassCallable  &&  n!=  null)  {	  }    else    if(!isClassCallable    &&    parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
104	[BUG]  [BUGGY]  }  else  if(parent  ==  null  &&!isExtern)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent  ==  null  &&!isExtern)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent  ==  null  &&!isExtern)  {	  }    else    if(parent!=    null    &&!isExtern)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
105	[BUG]  [BUGGY]  parent.replaceChild(n,  base);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.replaceChild(n,  base);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.replaceChild(n,  base);	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
106	[BUG]  [BUGGY]  parent.replaceChild(n,  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.replaceChild(n,  1);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.replaceChild(n,  1);	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
107	[BUG]  [BUGGY]  parent.replaceChild(n,  ctxt);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.replaceChild(n,  ctxt);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.replaceChild(n,  ctxt);	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
108	[BUG]  [BUGGY]  parent.replaceChild(n,  0);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.replaceChild(n,  0);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.replaceChild(n,  0);	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
109	[BUG]  [BUGGY]  }  else  if(!isConstructor()  &&  n  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor()  &&  n  ==  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor()  &&  n  ==  null)  {	  }    else    if(!isConstructor()    &&    parent    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
110	[BUG]  [BUGGY]  }  else  if(isFunctionDeclaration()  &&  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isFunctionDeclaration()  &&  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isFunctionDeclaration()  &&  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  }    else    if(isConstructor()    &&    parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
111	[BUG]  [BUGGY]  }  else  if(isConstructor()  &&  n!=  null  &&  n.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor()  &&  n!=  null  &&  n.getType()  ==  Token.FUNCTION)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  &&  n!=  null  &&  n.getType()  ==  Token.FUNCTION)  {	  }    else    if(isConstructor()    &&    parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
112	[BUG]  [BUGGY]  }  else  if(parent  ==  null  ||  parent.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent  ==  null  ||  parent.getType()!=  Token.GETPROP)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent  ==  null  ||  parent.getType()!=  Token.GETPROP)  {	  }    else    if(parent    ==    null    ||    parent.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
113	[BUG]  [BUGGY]  }  else  if(methodName  ==  null  ||!methodName.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName  ==  null  ||!methodName.isEmpty())  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName  ==  null  ||!methodName.isEmpty())  {	  }    else    if(methodName    ==    null    ||!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
114	[BUG]  [BUGGY]  }  else  if(methodName  ==  null  ||!isConstructor)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName  ==  null  ||!isConstructor)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName  ==  null  ||!isConstructor)  {	  }    else    if(methodName    ==    null    ||!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
115	[BUG]  [BUGGY]  }  else  if(!isConstructor()  &&  name!=  null  &&  name.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor()  &&  name!=  null  &&  name.equals(methodName))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor()  &&  name!=  null  &&  name.equals(methodName))  {	  }    else    if(!isConstructor()    &&    parent!=    null    &&    parent.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
116	[BUG]  [BUGGY]  }  else  if(isConstructor()  &&  parent!=  null  &&  parent.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor()  &&  parent!=  null  &&  parent.equals(methodName))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  &&  parent!=  null  &&  parent.equals(methodName))  {	  }    else    if(!isConstructor()    &&    parent!=    null    &&    parent.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
117	[BUG]  [BUGGY]  }  else  if(n  ==  null  ||!isFunctionDeclaration)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(n  ==  null  ||!isFunctionDeclaration)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n  ==  null  ||!isFunctionDeclaration)  {	  }    else    if(n    ==    null    ||!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
118	[BUG]  [BUGGY]  parent.replaceChild(n,  t);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.replaceChild(n,  t);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.replaceChild(n,  t);	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
119	[BUG]  [BUGGY]  }  else  if(methodName)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName)  {	  }    else    if(isClassCallable)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
120	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&!isConstructor()  &&  parent!=  null  &&  parent.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent!=  null  &&!isConstructor()  &&  parent!=  null  &&  parent.equals(methodName))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent!=  null  &&!isConstructor()  &&  parent!=  null  &&  parent.equals(methodName))  {	  }    else    if(!isConstructor()    &&    parent!=    null    &&    parent.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
121	[BUG]  [BUGGY]  }  else  if(!isConstructor()  &&  methodName!=  null  &&  parent.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor()  &&  methodName!=  null  &&  parent.equals(methodName))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor()  &&  methodName!=  null  &&  parent.equals(methodName))  {	  }    else    if(!isConstructor()    &&    parent!=    null    &&    parent.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
122	[BUG]  [BUGGY]  }  else  if(!isConstructor  &&  methodName!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor  &&  methodName!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor  &&  methodName!=  null)  {	  }    else    if(!isConstructor    &&    parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
123	[BUG]  [BUGGY]  }  else  if(methodName!=  null  &&  methodName.length()  >  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName!=  null  &&  methodName.length()  >  0)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName!=  null  &&  methodName.length()  >  0)  {	  }    else    if(methodName!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
124	[BUG]  [BUGGY]  }  else  if(methodName!=  null  &&  parent  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName!=  null  &&  parent  ==  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName!=  null  &&  parent  ==  null)  {	  }    else    if(methodName!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
125	[BUG]  [BUGGY]  }  else  if(methodName!=  null  &&  parent!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName!=  null  &&  parent!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName!=  null  &&  parent!=  null)  {	  }    else    if(methodName!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
126	[BUG]  [BUGGY]  parent.process(t,  n,  parent,  provider);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.process(t,  n,  parent,  provider);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.process(t,  n,  parent,  provider);	  parent.process(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
127	[BUG]  [BUGGY]  parent.process(t,  n,  parent,  base);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.process(t,  n,  parent,  base);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.process(t,  n,  parent,  base);	  parent.process(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
128	[BUG]  [BUGGY]  }  else  if(isConstructor  ||!methodName.equals( "object "))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor  ||!methodName.equals( "object "))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor  ||!methodName.equals( "object "))  {	  }    else    if(isConstructor    ||!methodName.equals(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
129	[BUG]  [BUGGY]  }  else  if(parent  ||!methodName.equals( "))  {  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent  ||!methodName.equals( "))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent  ||!methodName.equals( "))  {	  }    else    if(isConstructor    ||!methodName.equals(parent))    {    	non-compiled	[CE]  unclosed  string  literal	40	None	replace
130	[BUG]  [BUGGY]  }  else  if(methodName!=  null  ||!isExpr)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName!=  null  ||!isExpr)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName!=  null  ||!isExpr)  {	  }    else    if(methodName    ==    null    ||!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
131	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&  parent.getType()  ==  Token.GETPROP  &&  methodName.equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent!=  null  &&  parent.getType()  ==  Token.GETPROP  &&  methodName.equals( "prototype "))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent!=  null  &&  parent.getType()  ==  Token.GETPROP  &&  methodName.equals( "prototype "))  {	  }    else    if(parent!=    null    &&    parent.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
132	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&  parent.getType()  ==  Token.GETPROP  &&!methodName.equals( "prototype "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent!=  null  &&  parent.getType()  ==  Token.GETPROP  &&!methodName.equals( "prototype "))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent!=  null  &&  parent.getType()  ==  Token.GETPROP  &&!methodName.equals( "prototype "))  {	  }    else    if(parent!=    null    &&    parent.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
133	[BUG]  [BUGGY]  }  else  if(isConstructor  ||  isInterface())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor  ||  isInterface())  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor  ||  isInterface())  {	  }    else    if(isConstructor)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
134	[BUG]  [BUGGY]  parent.processClassCall(t,  n,  parent,  provider);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.processClassCall(t,  n,  parent,  provider);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.processClassCall(t,  n,  parent,  provider);	  parent.processClassCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
135	[BUG]  [BUGGY]  parent.processClassCall(t,  n,  parent,  base);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.processClassCall(t,  n,  parent,  base);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.processClassCall(t,  n,  parent,  base);	  parent.processClassCall(t,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
136	[BUG]  [BUGGY]  }  else  if(!isConstructor()  &&  methodName!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(!isConstructor()  &&  methodName!=  null)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor()  &&  methodName!=  null)  {	  }    else    if(!isConstructor()    &&    parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
137	[BUG]  [BUGGY]  }  else  if(n  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(n  ==  parent)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n  ==  parent)  {	  }    else    if(n    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
138	[BUG]  [BUGGY]  }  else  if(n  ==  null  ||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(n  ==  null  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n  ==  null  ||  parent.getType()  ==  Token.NAME)  {	  }    else    if(n    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
139	[BUG]  [BUGGY]  }  else  if(parent  ==  null  ||  parent.getClass().equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent  ==  null  ||  parent.getClass().equals(methodName))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent  ==  null  ||  parent.getClass().equals(methodName))  {	  }    else    if(parent    ==    null    ||    parent.equals(methodName))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
140	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Integer(methodName));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.replaceChild(n,  new  Integer(methodName));  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.replaceChild(n,  new  Integer(methodName));	  parent.addChildToFront(parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
141	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Integer(0));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  parent.replaceChild(n,  new  Integer(0));  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.replaceChild(n,  new  Integer(0));	  parent.addChildToFront(parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
142	[BUG]  [BUGGY]  }  else  if(n!=  null  &&  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(n!=  null  &&  parent.getType()  ==  Token.NAME)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n!=  null  &&  parent.getType()  ==  Token.NAME)  {	  }    else    if(n!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
143	[BUG]  [BUGGY]  n.removeChild(child);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  n.removeChild(child);  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	n.removeChild(child);	  n.removeChild(parent);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
144	[BUG]  [BUGGY]  }  else  if(isFunctionDeclaration())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isFunctionDeclaration())  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isFunctionDeclaration())  {	  }    else    if(isInterface())    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
145	[BUG]  [BUGGY]  }  else  if(isConstructor()  ||!methodName.equals( "object "))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(isConstructor()  ||!methodName.equals( "object "))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  ||!methodName.equals( "object "))  {	  }    else    if(isConstructor()    ||!methodName.equals(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
146	[BUG]  [BUGGY]  }  else  if(n!=  null  &&!isFunctionDeclaration)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(n!=  null  &&!isFunctionDeclaration)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n!=  null  &&!isFunctionDeclaration)  {	  }    else    if(n!=    null    &&!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
147	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  }    else    if(!isConstructor()    &&    parent!=    null    &&    parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
148	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&  parent.getType()  ==  Token.CALL  &&  methodName.equals( "call "))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent!=  null  &&  parent.getType()  ==  Token.CALL  &&  methodName.equals( "call "))  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent!=  null  &&  parent.getType()  ==  Token.CALL  &&  methodName.equals( "call "))  {	  }    else    if(parent!=    null    &&    parent.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
149	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&  parent.getType()  ==  Token.CALL  &&!methodName.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(parent!=  null  &&  parent.getType()  ==  Token.CALL  &&!methodName.isEmpty())  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent!=  null  &&  parent.getType()  ==  Token.CALL  &&!methodName.isEmpty())  {	  }    else    if(parent!=    null    &&    parent.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
150	[BUG]  [BUGGY]  }  else  if(methodName  ==  null  ||  methodName.length()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName  ==  null  ||  methodName.length()  ==  0)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName  ==  null  ||  methodName.length()  ==  0)  {	  }    else    if(methodName    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
151	[BUG]  [BUGGY]  }  else  if(methodName  ==  null  ||  parent.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]        String  methodName  =  name.getNext().getString();  if  (     "base     ".equals(methodName))  {  processBaseClassCall(t,  n);      [BUGGY]  }  else  if(methodName  ==  null  ||  parent.getType()  ==  Token.NAME)  {  [BUGGY]        break;  }  else  if  (     "require     ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (     "provide     ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName  ==  null  ||  parent.getType()  ==  Token.NAME)  {	  }    else    if(methodName    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
