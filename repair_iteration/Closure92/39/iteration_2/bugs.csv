bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(!isConstructor  &&  parent!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(!isConstructor  &&  parent!=  null)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor  &&  parent!=  null)  {	  }    else    if(!isConstructor)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  }  else  if(isConstructor())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(isConstructor())  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor())  {	  }    else    if(!isConstructor)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  }  else  if(isConstructor)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(isConstructor)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor)  {	  }    else    if(!isConstructor)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  }  else  if(!isConstructor  &&  parent  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(!isConstructor  &&  parent  ==  null)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor  &&  parent  ==  null)  {	  }    else    if(!isConstructor)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
5	[BUG]  [BUGGY]  }  else  if(n  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(n  ==  null)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n  ==  null)  {	  }    else    if(parent    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  }  else  if(methodName  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(methodName  ==  null)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName  ==  null)  {	  }    else    if(parent    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  }  else  if(n!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(n!=  null)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n!=  null)  {	  }    else    if(parent    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  }  else  if(methodName!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(methodName!=  null)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName!=  null)  {	  }    else    if(parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  }  else  if(!isConstructor()  &&  parent!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(!isConstructor()  &&  parent!=  null)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor()  &&  parent!=  null)  {	  }    else    if(!isConstructor())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
10	[BUG]  [BUGGY]  }  else  if(!isConstructor()  &&  parent!=  null  &&  parent.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(!isConstructor()  &&  parent!=  null  &&  parent.equals(methodName))  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor()  &&  parent!=  null  &&  parent.equals(methodName))  {	  }    else    if(!isConstructor())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
11	[BUG]  [BUGGY]  }  else  if(isConstructor()  &&  parent!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(isConstructor()  &&  parent!=  null)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  &&  parent!=  null)  {	  }    else    if(!isConstructor())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  }  else  if(!isConstructor()  &&  parent  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(!isConstructor()  &&  parent  ==  null)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor()  &&  parent  ==  null)  {	  }    else    if(!isConstructor())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
13	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  n.removeChild(parent);  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	n.removeChild(parent);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  parent.replaceChild(n,  parent);  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.replaceChild(n,  parent);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
15	[BUG]  [BUGGY]  n.removeChild(parent);  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  n.removeChild(parent);  break;  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	n.removeChild(parent);  break;	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
16	[BUG]  [BUGGY]  }  else  if(!isClassCallable  &&  parent!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(!isClassCallable  &&  parent!=  null)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isClassCallable  &&  parent!=  null)  {	  }    else    if(!isClassCallable)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
17	[BUG]  [BUGGY]  }  else  if(isClassCallable)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(isClassCallable)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isClassCallable)  {	  }    else    if(!isClassCallable)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
18	[BUG]  [BUGGY]  }  else  if(!isClassCallable  &&  parent  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(!isClassCallable  &&  parent  ==  null)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isClassCallable  &&  parent  ==  null)  {	  }    else    if(!isClassCallable)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
19	[BUG]  [BUGGY]  }  else  if(isClassCallable())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(isClassCallable())  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isClassCallable())  {	  }    else    if(!isClassCallable)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
20	[BUG]  [BUGGY]  }  else  if(n  ==  null  ||!isExpr)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(n  ==  null  ||!isExpr)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n  ==  null  ||!isExpr)  {	  }    else    if(parent    ==    null    ||!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
21	[BUG]  [BUGGY]  }  else  if(methodName  ==  null  ||!isExpr)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(methodName  ==  null  ||!isExpr)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(methodName  ==  null  ||!isExpr)  {	  }    else    if(parent    ==    null    ||!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
22	[BUG]  [BUGGY]  }  else  if(n!=  null  &&!isExpr)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(n!=  null  &&!isExpr)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n!=  null  &&!isExpr)  {	  }    else    if(parent!=    null    &&!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
23	[BUG]  [BUGGY]  }  else  if(n  ==  null  &&!isExpr)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(n  ==  null  &&!isExpr)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(n  ==  null  &&!isExpr)  {	  }    else    if(parent!=    null    &&!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  }  else  if(parent!=  null  ||!isExpr)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(parent!=  null  ||!isExpr)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent!=  null  ||!isExpr)  {	  }    else    if(parent    ==    null    ||!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
25	[BUG]  [BUGGY]  }  else  if(parent  ==  null  ||!isExtern)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(parent  ==  null  ||!isExtern)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent  ==  null  ||!isExtern)  {	  }    else    if(parent    ==    null    ||!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
26	[BUG]  [BUGGY]  parent  =  parent.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  parent  =  parent.getParent();  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent  =  parent.getParent();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
27	[BUG]  [BUGGY]  parent.addChildToFront(parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  parent.addChildToFront(parent);  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.addChildToFront(parent);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
28	[BUG]  [BUGGY]  }  else  if(parent  ==  null  &&!isExpr)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(parent  ==  null  &&!isExpr)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent  ==  null  &&!isExpr)  {	  }    else    if(parent!=    null    &&!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
29	[BUG]  [BUGGY]  parent.processClassCall(t,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  parent.processClassCall(t,  n,  parent);  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.processClassCall(t,  n,  parent);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
30	[BUG]  [BUGGY]  parent.process(t,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  parent.process(t,  n,  parent);  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	parent.process(t,  n,  parent);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  }  else  if(parent  ==  null  ||  parent.equals(methodName))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(parent  ==  null  ||  parent.equals(methodName))  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent  ==  null  ||  parent.equals(methodName))  {	  }    else    if(parent    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
32	[BUG]  [BUGGY]  }  else  if(parent  ==  null  ||  parent.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(parent  ==  null  ||  parent.getType()  ==  Token.GETPROP)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent  ==  null  ||  parent.getType()  ==  Token.GETPROP)  {	  }    else    if(parent    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
33	[BUG]  [BUGGY]  }  else  if(!isConstructor()  &&  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(!isConstructor()  &&  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor()  &&  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  }    else    if(!isConstructor())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
34	[BUG]  [BUGGY]  }  else  if(isConstructor()  ||!methodName.equals(parent))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(isConstructor()  ||!methodName.equals(parent))  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  ||!methodName.equals(parent))  {	  }    else    if(!isConstructor())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
35	[BUG]  [BUGGY]  }  else  if(isConstructor()  &&  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(isConstructor()  &&  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor()  &&  parent!=  null  &&  parent.getType()  ==  Token.FUNCTION)  {	  }    else    if(!isConstructor())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
36	[BUG]  [BUGGY]  }  else  if(isInterface())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(isInterface())  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isInterface())  {	  }    else    if(!isConstructor())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
37	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&!isExtern)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(parent!=  null  &&!isExtern)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent!=  null  &&!isExtern)  {	  }    else    if(parent!=    null    &&!isExpr)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
38	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent!=  null  &&  parent.getType()  ==  Token.GETPROP)  {	  }    else    if(parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
39	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&  parent.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(parent!=  null  &&  parent.getType()  ==  Token.CALL)  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent!=  null  &&  parent.getType()  ==  Token.CALL)  {	  }    else    if(parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
40	[BUG]  [BUGGY]  }  else  if(isConstructor  ||!methodName.equals(parent))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      String  methodName  =  name.getNext().getString();  if  (   "base   ".equals(methodName))  {  processBaseClassCall(t,  n);    [BUGGY]  }  else  if(isConstructor  ||!methodName.equals(parent))  {  [BUGGY]      break;  }  else  if  (   "require   ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  (   "provide   ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(isConstructor  ||!methodName.equals(parent))  {	  }    else    if(!isConstructor)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
