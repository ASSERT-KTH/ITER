bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  else  if(parent  ==  null  ||!isExpr)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]    String  methodName  =  name.getNext().getString();  if  ( "base ".equals(methodName))  {  processBaseClassCall(t,  n);  [BUGGY]  }  else  if(parent  ==  null  ||!isExpr)  {  [BUGGY]    break;  }  else  if  ( "require ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  ( "provide ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent  ==  null  ||!isExpr)  {	}  else  if  (!isExpr)  {  	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
2	[BUG]  [BUGGY]  }  else  if(parent!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]    String  methodName  =  name.getNext().getString();  if  ( "base ".equals(methodName))  {  processBaseClassCall(t,  n);  [BUGGY]  }  else  if(parent!=  null)  {  [BUGGY]    break;  }  else  if  ( "require ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  ( "provide ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent!=  null)  {	}  else  if  (!isExpr)  {  	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
3	[BUG]  [BUGGY]  }  else  if(parent  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]    String  methodName  =  name.getNext().getString();  if  ( "base ".equals(methodName))  {  processBaseClassCall(t,  n);  [BUGGY]  }  else  if(parent  ==  null)  {  [BUGGY]    break;  }  else  if  ( "require ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  ( "provide ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent  ==  null)  {	}  else  if  (!isExpr)  {  	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
4	[BUG]  [BUGGY]  }  else  if(!isConstructor())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]    String  methodName  =  name.getNext().getString();  if  ( "base ".equals(methodName))  {  processBaseClassCall(t,  n);  [BUGGY]  }  else  if(!isConstructor())  {  [BUGGY]    break;  }  else  if  ( "require ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  ( "provide ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor())  {	}  else  if  (!isExpr)  {  	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
5	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]    String  methodName  =  name.getNext().getString();  if  ( "base ".equals(methodName))  {  processBaseClassCall(t,  n);  [BUGGY]    [BUGGY]    break;  }  else  if  ( "require ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  ( "provide ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	  	}  else  if  (!isExpr)  {  	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
6	[BUG]  [BUGGY]  }  else  if(!isConstructor)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]    String  methodName  =  name.getNext().getString();  if  ( "base ".equals(methodName))  {  processBaseClassCall(t,  n);  [BUGGY]  }  else  if(!isConstructor)  {  [BUGGY]    break;  }  else  if  ( "require ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  ( "provide ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isConstructor)  {	}  else  if  (!isExpr)  {  	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
7	[BUG]  [BUGGY]  }  else  if(!isClassCallable)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]    String  methodName  =  name.getNext().getString();  if  ( "base ".equals(methodName))  {  processBaseClassCall(t,  n);  [BUGGY]  }  else  if(!isClassCallable)  {  [BUGGY]    break;  }  else  if  ( "require ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  ( "provide ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(!isClassCallable)  {	}  else  if  (!isExpr)  {  	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
8	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&!isExpr)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]    String  methodName  =  name.getNext().getString();  if  ( "base ".equals(methodName))  {  processBaseClassCall(t,  n);  [BUGGY]  }  else  if(parent!=  null  &&!isExpr)  {  [BUGGY]    break;  }  else  if  ( "require ".equals(methodName))  {  processRequireCall(t,  n,  parent);  }  else  if  ( "provide ".equals(methodName))  {  [CLASS]  	projects/Closure92/src/com/google/javascript/jscomp/ProcessClosurePrimitives.java	0.1270001270001905	160	160	1	replace	}  else  if(parent!=  null  &&!isExpr)  {	}  else  if  (!isExpr)  {  	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
