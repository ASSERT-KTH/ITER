bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  allNUL  =  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK;  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK;	  boolean    allNUL    =    BooleanUtils.BYTE_MASK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
2	[BUG]  [BUGGY]  boolean  allNUL  =  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK);  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK);	  boolean    allNUL    =    BooleanUtils.BYTE_MASK;    	non-compiled	[CE]  	31	None	replace
3	[BUG]  [BUGGY]  boolean  allNUL  =  BooleanUtils.BYTE_MASK  |  BYTE_MASK;  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  BooleanUtils.BYTE_MASK  |  BYTE_MASK;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  BooleanUtils.BYTE_MASK  |  BYTE_MASK;	  boolean    allNUL    =    BooleanUtils.BYTE_MASK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
5	[BUG]  [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
6	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  BYTE_MASK)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  BYTE_MASK)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
7	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
8	[BUG]  [BUGGY]  if(length  ==  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
9	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  BYTE_MASK)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  BYTE_MASK)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
11	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  length)  ==  0;  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  length)  ==  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  length)  ==  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)    ==    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
12	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  end,  length)  ==  0;  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  end,  length)  ==  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  end,  length)  ==  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)    ==    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
13	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buff,  start,  length)  ==  0;  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buff,  start,  length)  ==  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buff,  start,  length)  ==  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)    ==    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
14	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  0,  length)  ==  0;  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  0,  length)  ==  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  0,  length)  ==  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)    ==    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
15	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  length)  ==  0;  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  length)  ==  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  length)  ==  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)    ==    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end);  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
18	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  start);  [CE]  class,  interface,  or  enum  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  start);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  end,  buffer,  0,  start);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
20	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
21	[BUG]  [BUGGY]  final  byte  allNUL  =  false;  [CE]  class,  interface,  or  enum  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  byte  allNUL  =  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  byte  allNUL  =  false;	  final    boolean    allNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
22	[BUG]  [BUGGY]  final  int  allNUL  =  false;  [CE]  class,  interface,  or  enum  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  allNUL  =  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  allNUL  =  false;	  final    boolean    allNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
23	[BUG]  [BUGGY]  Boolean  ALLNUL  =  false;  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Boolean  ALLNUL  =  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Boolean  ALLNUL  =  false;	  Boolean    ALLNUL    =    true;    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
24	[BUG]  [BUGGY]  Boolean  ALLNUL  =  null;  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Boolean  ALLNUL  =  null;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Boolean  ALLNUL  =  null;	  Boolean    ALLNUL    =    true;    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
25	[BUG]  [BUGGY]  Byte  ALLNUL  =  false;  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Byte  ALLNUL  =  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Byte  ALLNUL  =  false;	  Boolean    ALLNUL    =    true;    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
26	[BUG]  [BUGGY]  Byte  allNUL  =  false;  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Byte  allNUL  =  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Byte  allNUL  =  false;	  Boolean    ALLNUL    =    true;    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
27	[BUG]  [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.equals(Byte_MASK);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.equals(Byte_MASK);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	static  final  boolean  allNUL  =  Boolean.TRUE.equals(Byte_MASK);	  static    final    boolean    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
28	[BUG]  [BUGGY]  static  final  byte  allNUL  =  false;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  static  final  byte  allNUL  =  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	static  final  byte  allNUL  =  false;	  static    final    boolean    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
29	[BUG]  [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.equals(buffer[0]);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.equals(buffer[0]);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	static  final  boolean  allNUL  =  Boolean.TRUE.equals(buffer[0]);	  static    final    boolean    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
30	[BUG]  [BUGGY]  static  final  int  allNUL  =  false;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  static  final  int  allNUL  =  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	static  final  int  allNUL  =  false;	  static    final    boolean    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
31	[BUG]  [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.equals(buffer[offset  +  length]);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.equals(buffer[offset  +  length]);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	static  final  boolean  allNUL  =  Boolean.TRUE.equals(buffer[offset  +  length]);	  static    final    boolean    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
32	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.equals(length);  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.equals(length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.equals(length);	  boolean    ALLNUL    =    Boolean.TRUE.equals(result);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
33	[BUG]  [BUGGY]  boolean  ALLNUL  =  result.equals(BYTE_MASK);  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  result.equals(BYTE_MASK);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  result.equals(BYTE_MASK);	  boolean    ALLNUL    =    Boolean.TRUE.equals(result);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
34	[BUG]  [BUGGY]  boolean  ALLNUL  =  result.equals(Byte.TRUE);  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  result.equals(Byte.TRUE);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  result.equals(Byte.TRUE);	  boolean    ALLNUL    =    Boolean.TRUE.equals(result);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
35	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.valueOf(result).booleanValue();  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.valueOf(result).booleanValue();  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.valueOf(result).booleanValue();	  boolean    ALLNUL    =    Boolean.TRUE.equals(result);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
36	[BUG]  [BUGGY]  boolean  ALLNUL  =  result!=  Boolean.TRUE.equals(result);  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  result!=  Boolean.TRUE.equals(result);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  result!=  Boolean.TRUE.equals(result);	  boolean    ALLNUL    =    Boolean.TRUE.equals(result);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
37	[BUG]  [BUGGY]  boolean  ALLNUL  =  result  ==  Boolean.TRUE.equals(result);  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  result  ==  Boolean.TRUE.equals(result);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  result  ==  Boolean.TRUE.equals(result);	  boolean    ALLNUL    =    Boolean.TRUE.equals(result);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
38	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.TRUE  ||  Boolean.FALSE;  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.TRUE  ||  Boolean.FALSE;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.TRUE  ||  Boolean.FALSE;	  boolean    allNUL    =    Boolean.TRUE;    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
39	[BUG]  [BUGGY]  final  boolean  ALLNUL  =  true;  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  ALLNUL  =  true;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  ALLNUL  =  true;	  final    boolean    ALLNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
40	[BUG]  [BUGGY]  static  final  boolean  ALLNUL  =  false;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  static  final  boolean  ALLNUL  =  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	static  final  boolean  ALLNUL  =  false;	  final    boolean    ALLNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
41	[BUG]  [BUGGY]  final  int  ALLNUL  =  false;  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  ALLNUL  =  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  ALLNUL  =  false;	  final    boolean    ALLNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
42	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  end,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
43	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
44	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
45	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  end);  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  end);	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    end);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
46	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  0,  end);  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  0,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  0,  end);	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    end);    	non-compiled	[CE]  	36	None	replace
47	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  end);  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  end);	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    end);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
48	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length);	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    end);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
49	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  end,  start);  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  end,  start);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  end,  start);	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    end);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
50	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.FALSE.compareTo(buffer,  start,  end);  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.FALSE.compareTo(buffer,  start,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.FALSE.compareTo(buffer,  start,  end);	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    end);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
51	[BUG]  [BUGGY]  final  boolean  allNUL  =  Boolean.TRUE;  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  allNUL  =  Boolean.TRUE;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNUL  =  Boolean.TRUE;	  final    boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
52	[BUG]  [BUGGY]  final  boolean  allNUL  =  Boolean.FALSE;  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  allNUL  =  Boolean.FALSE;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNUL  =  Boolean.FALSE;	  final    boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
53	[BUG]  [BUGGY]  final  boolean  allNUL  =  Boolean.valueOf(length);  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  allNUL  =  Boolean.valueOf(length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNUL  =  Boolean.valueOf(length);	  final    boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
54	[BUG]  [BUGGY]  final  boolean  allNUL  =  Boolean.parseBoolean(buffer,  0,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  allNUL  =  Boolean.parseBoolean(buffer,  0,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNUL  =  Boolean.parseBoolean(buffer,  0,  length);	  final    boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
55	[BUG]  [BUGGY]  final  int  start  =  buffer.length()  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  buffer.length()  -  1;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  buffer.length()  -  1;	  final    int    start    =    buffer.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
56	[BUG]  [BUGGY]  final  int  start  =  buffer.length()  -  2;  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  buffer.length()  -  2;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  buffer.length()  -  2;	  final    int    start    =    buffer.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
57	[BUG]  [BUGGY]  final  int  start  =  buffer.length()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  buffer.length()  +  1;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  buffer.length()  +  1;	  final    int    start    =    buffer.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
58	[BUG]  [BUGGY]  final  int  start  =  buffer.length()  +  2;  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  buffer.length()  +  2;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  buffer.length()  +  2;	  final    int    start    =    buffer.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
59	[BUG]  [BUGGY]  final  int  start  =  offset.length();  [CE]  class,  interface,  or  enum  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  offset.length();  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  offset.length();	  final    int    start    =    buffer.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
60	[BUG]  [BUGGY]  final  int  start  =  buffer.length()  *  2;  [CE]  class,  interface,  or  enum  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  buffer.length()  *  2;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  buffer.length()  *  2;	  final    int    start    =    buffer.length();    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
61	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.valueOf(length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.valueOf(length  +  1);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.valueOf(length  +  1);	  boolean    allNUL    =    Boolean.valueOf(length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
62	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.valueOf(0);  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.valueOf(0);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.valueOf(0);	  boolean    allNUL    =    Boolean.valueOf(length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
63	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.valueOf(length  +  2);  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.valueOf(length  +  2);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.valueOf(length  +  2);	  boolean    allNUL    =    Boolean.valueOf(length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
64	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  offset  +  length);  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  offset  +  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.parseByte(buffer,  offset  +  length);	  boolean    allNUL    =    Boolean.valueOf(length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
65	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.valueOf(length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.valueOf(length  -  1);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.valueOf(length  -  1);	  boolean    allNUL    =    Boolean.valueOf(length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
66	[BUG]  [BUGGY]  Boolean  allNul  =  false;  [CE]  class,  interface,  or  enum  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Boolean  allNul  =  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Boolean  allNul  =  false;	  boolean    allNul    =    true;    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
67	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length,  length);	  System.arraycopy(buffer,    0,    buffer,    offset,    end,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
68	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end,  length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end,  length  +  1);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end,  length  +  1);	  System.arraycopy(buffer,    0,    buffer,    offset,    end,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
69	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  start,  length);	  System.arraycopy(buffer,    0,    buffer,    offset,    end,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end,  length  -  start);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end,  length  -  start);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end,  length  -  start);	  System.arraycopy(buffer,    0,    buffer,    offset,    end,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end,  length  +  2);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end,  length  +  2);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end,  length  +  2);	  System.arraycopy(buffer,    0,    buffer,    offset,    end,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
72	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  end);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length,  end);	  System.arraycopy(buffer,    0,    buffer,    offset,    end,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
73	[BUG]  [BUGGY]  final  int  start  =  offset  +  length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  offset  +  length  -  1;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  offset  +  length  -  1;	  final    int    start    =    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
74	[BUG]  [BUGGY]  final  int  start  =  offset  +  length  -  2;  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  offset  +  length  -  2;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  offset  +  length  -  2;	  final    int    start    =    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
75	[BUG]  [BUGGY]  final  int  start  =  offset  +  length  /  2;  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  offset  +  length  /  2;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  offset  +  length  /  2;	  final    int    start    =    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
76	[BUG]  [BUGGY]  final  int  start  =  offset  +  length  *  2;  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  offset  +  length  *  2;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  offset  +  length  *  2;	  final    int    start    =    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
77	[BUG]  [BUGGY]  final  int  start  =  offset  +  length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  offset  +  length  +  1;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  offset  +  length  +  1;	  final    int    start    =    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
78	[BUG]  [BUGGY]  final  int  start  =  offset  +  length  -  4;  [CE]  class,  interface,  or  enum  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  offset  +  length  -  4;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  offset  +  length  -  4;	  final    int    start    =    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
79	[BUG]  [BUGGY]  final  boolean  allNul  =  true;  [CE]  class,  interface,  or  enum  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  allNul  =  true;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNul  =  true;	  final    boolean    allNul    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
80	[BUG]  [BUGGY]  boolean  ALLNUL  =  null;  [CE]  class,  interface,  or  enum  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  null;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  null;	  boolean    ALLNUL    =    true;    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
81	[BUG]  [BUGGY]  if(length  <  2)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  2)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  2)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
82	[BUG]  [BUGGY]  if(length  <  2)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  2)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  2)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
83	[BUG]  [BUGGY]  boolean  allNUL  =  this.currentByte  ==  null;  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  this.currentByte  ==  null;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  this.currentByte  ==  null;	  boolean    allNUL    =    this.currentByte!=    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
84	[BUG]  [BUGGY]  boolean  allNUL  =  this.currentByte  >=  null;  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  this.currentByte  >=  null;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  this.currentByte  >=  null;	  boolean    allNUL    =    this.currentByte!=    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
85	[BUG]  [BUGGY]  boolean  allNUL  =  this.currentByte  >>  null;  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  this.currentByte  >>  null;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  this.currentByte  >>  null;	  boolean    allNUL    =    this.currentByte!=    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
86	[BUG]  [BUGGY]  boolean  allNUL  =  this.currentByte  [Delete]  null;  [CE]  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  this.currentByte  [Delete]  null;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  this.currentByte  [Delete]  null;	  boolean    allNUL    =    this.currentByte!=    null;    	non-compiled	[CE]  	32	None	replace
87	[BUG]  [BUGGY]  boolean  allNul  =  Boolean.TRUE;  [CE]  class,  interface,  or  enum  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNul  =  Boolean.TRUE;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNul  =  Boolean.TRUE;	  boolean    allNul    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
88	[BUG]  [BUGGY]  boolean  allNul  =  Boolean.FALSE;  [CE]  class,  interface,  or  enum  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNul  =  Boolean.FALSE;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNul  =  Boolean.FALSE;	  boolean    allNul    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
89	[BUG]  [BUGGY]  boolean  allNul  =  Boolean.valueOf(length);  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNul  =  Boolean.valueOf(length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNul  =  Boolean.valueOf(length);	  boolean    allNul    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
90	[BUG]  [BUGGY]  boolean  allNul  =  Boolean.valueOf(end);  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNul  =  Boolean.valueOf(end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNul  =  Boolean.valueOf(end);	  boolean    allNul    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
91	[BUG]  [BUGGY]  boolean  allNUL  =  buffer.length  >  0;  [CE]  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  buffer.length  >  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  buffer.length  >  0;	  boolean    allNUL    =    buffer.length    ==    0;    	non-compiled	[CE]  	29	None	replace
92	[BUG]  [BUGGY]  boolean  allNUL  =  buffer.length  ==  2;  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  buffer.length  ==  2;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  buffer.length  ==  2;	  boolean    allNUL    =    buffer.length    ==    0;    	non-compiled	[CE]  	29	None	replace
93	[BUG]  [BUGGY]  boolean  allNUL  =  end  ==  0;  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  end  ==  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  end  ==  0;	  boolean    allNUL    =    buffer.length    ==    0;    	non-compiled	[CE]  	29	None	replace
94	[BUG]  [BUGGY]  boolean  allNUL  =  length  ==  0;  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  length  ==  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  length  ==  0;	  boolean    allNUL    =    buffer.length    ==    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
95	[BUG]  [BUGGY]  boolean  allNUL  =  buffer.length  ==  1;  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  buffer.length  ==  1;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  buffer.length  ==  1;	  boolean    allNUL    =    buffer.length    ==    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
96	[BUG]  [BUGGY]  Boolean  allNUL  =  Boolean.TRUE;  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Boolean  allNUL  =  Boolean.TRUE;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Boolean  allNUL  =  Boolean.TRUE;	  Boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
97	[BUG]  [BUGGY]  Boolean  allNUL  =  Boolean.valueOf(length);  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Boolean  allNUL  =  Boolean.valueOf(length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Boolean  allNUL  =  Boolean.valueOf(length);	  Boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
98	[BUG]  [BUGGY]  Boolean  allNUL  =  Boolean.FALSE;  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Boolean  allNUL  =  Boolean.FALSE;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Boolean  allNUL  =  Boolean.FALSE;	  Boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
99	[BUG]  [BUGGY]  Boolean  allNUL  =  Boolean.valueOf(BYTE_MASK);  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Boolean  allNUL  =  Boolean.valueOf(BYTE_MASK);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Boolean  allNUL  =  Boolean.valueOf(BYTE_MASK);	  Boolean    allNUL    =    null;    	non-compiled	[CE]  	28	None	replace
100	[BUG]  [BUGGY]  boolean  ALLNUL  =  BooleanUtils.isAllNull(buffer,  length);  [CE]  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  BooleanUtils.isAllNull(buffer,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  BooleanUtils.isAllNull(buffer,  length);	  boolean    ALLNUL    =    BooleanUtils.isAllNull(buffer);    	non-compiled	[CE]  	33	None	replace
101	[BUG]  [BUGGY]  boolean  ALLNUL  =  BooleanUtils.isAllNull(buffer,  end);  [CE]  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  BooleanUtils.isAllNull(buffer,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  BooleanUtils.isAllNull(buffer,  end);	  boolean    ALLNUL    =    BooleanUtils.isAllNull(buffer);    	non-compiled	[CE]  	33	None	replace
102	[BUG]  [BUGGY]  boolean  ALLNUL  =  BooleanUtils.isAllNull(end);  [CE]  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  BooleanUtils.isAllNull(end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  BooleanUtils.isAllNull(end);	  boolean    ALLNUL    =    BooleanUtils.isAllNull(buffer);    	non-compiled	[CE]  	33	None	replace
103	[BUG]  [BUGGY]  boolean  allNUL  =  BooleanUtils.isAllNull(buffer,  length);  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  BooleanUtils.isAllNull(buffer,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  BooleanUtils.isAllNull(buffer,  length);	  boolean    ALLNUL    =    BooleanUtils.isAllNull(buffer);    	non-compiled	[CE]  	33	None	replace
104	[BUG]  [BUGGY]  boolean  ALLNUL  =  BooleanUtils.isAllNull(length);  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  BooleanUtils.isAllNull(length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  BooleanUtils.isAllNull(length);	  boolean    ALLNUL    =    BooleanUtils.isAllNull(buffer);    	non-compiled	[CE]  	33	None	replace
105	[BUG]  [BUGGY]  boolean  ALLNUL  =  BooleanUtils.isAllEmpty(buffer);  [CE]  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  BooleanUtils.isAllEmpty(buffer);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  BooleanUtils.isAllEmpty(buffer);	  boolean    ALLNUL    =    BooleanUtils.isAllNull(buffer);    	non-compiled	[CE]  	33	None	replace
106	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.FALSE  ||  Boolean.TRUE;  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.FALSE  ||  Boolean.TRUE;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.FALSE  ||  Boolean.TRUE;	  boolean    allNUL    =    Boolean.FALSE;    	non-compiled	[CE]  	19	None	replace
107	[BUG]  [BUGGY]  boolean  allNUL  =  buffer.length!=  2;  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  buffer.length!=  2;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  buffer.length!=  2;	  boolean    allNUL    =    buffer.length!=    0;    	non-compiled	[CE]  	30	None	replace
108	[BUG]  [BUGGY]  boolean  allNUL  =  end!=  0;  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  end!=  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  end!=  0;	  boolean    allNUL    =    buffer.length!=    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
109	[BUG]  [BUGGY]  boolean  allNUL  =  end  >>  0;  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  end  >>  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  end  >>  0;	  boolean    allNUL    =    buffer.length!=    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
110	[BUG]  [BUGGY]  boolean  allNUL  =  buffer.length  >>  0;  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  buffer.length  >>  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  buffer.length  >>  0;	  boolean    allNUL    =    buffer.length!=    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
111	[BUG]  [BUGGY]  Boolean  allNul  =  null;  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Boolean  allNul  =  null;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Boolean  allNul  =  null;	  Boolean    allNul    =    true;    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
112	[BUG]  [BUGGY]  Byte  allNul  =  false;  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Byte  allNul  =  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Byte  allNul  =  false;	  Boolean    allNul    =    true;    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
113	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  length)!=  0;  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  length)!=  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  length)!=  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)!=    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
114	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  end,  length)!=  0;  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  end,  length)!=  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  end,  length)!=  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)!=    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
115	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  length)  >>  0;  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  length)  >>  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  length)  >>  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)!=    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
116	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  0,  length)!=  0;  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  0,  length)!=  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  0,  length)!=  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)!=    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
117	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  end,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  end,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  offset,  buffer,  end,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
118	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
119	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
120	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length,  BYTE_MASK);  [CE]  class,  interface,  or  enum  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length,  BYTE_MASK);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length,  BYTE_MASK);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
121	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length  +  1);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length  +  1);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
122	[BUG]  [BUGGY]  Integer  allNUL  =  true;  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Integer  allNUL  =  true;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Integer  allNUL  =  true;	  Integer    allNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
123	[BUG]  [BUGGY]  int  allNUL  =  true;  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  allNUL  =  true;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	int  allNUL  =  true;	  Integer    allNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
124	[BUG]  [BUGGY]  Integer  allNUL  =  null;  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Integer  allNUL  =  null;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Integer  allNUL  =  null;	  Integer    allNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
125	[BUG]  [BUGGY]  byte  allNUL  =  false;  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  byte  allNUL  =  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	byte  allNUL  =  false;	  Integer    allNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
126	[BUG]  [BUGGY]  Long  allNUL  =  false;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Long  allNUL  =  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Long  allNUL  =  false;	  Integer    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
127	[BUG]  [BUGGY]  int  allNUL  =  false;  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  allNUL  =  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	int  allNUL  =  false;	  Integer    allNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
128	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length  -  start);  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length  -  start);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length  -  start);	  System.arraycopy(buffer,    0,    buffer,    0,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
129	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length  -  1);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length  -  1);	  System.arraycopy(buffer,    0,    buffer,    0,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
130	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length  +  2);  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length  +  2);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length  +  2);	  System.arraycopy(buffer,    0,    buffer,    0,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
131	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length  +  1);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length  +  1);	  System.arraycopy(buffer,    0,    buffer,    0,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
132	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  offset);  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  offset);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  offset);	  System.arraycopy(buffer,    0,    buffer,    0,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
133	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  0,  end);  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  0,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.parseByte(buffer,  0,  end);	  boolean    allNUL    =    Boolean.parseByte(buffer,    0,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
134	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  0,  buffer.length);  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  0,  buffer.length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.parseByte(buffer,  0,  buffer.length);	  boolean    allNUL    =    Boolean.parseByte(buffer,    0,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
135	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  0,  start);  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  0,  start);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.parseByte(buffer,  0,  start);	  boolean    allNUL    =    Boolean.parseByte(buffer,    0,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
136	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  0,  result);  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  0,  result);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.parseByte(buffer,  0,  result);	  boolean    allNUL    =    Boolean.parseByte(buffer,    0,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
137	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.valueOf(buffer,  0,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.valueOf(buffer,  0,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.valueOf(buffer,  0,  length);	  boolean    allNUL    =    Boolean.parseByte(buffer,    0,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
138	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  BYTE_MASK)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  BYTE_MASK)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
140	[BUG]  [BUGGY]  while(buffer!=  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  while(buffer!=  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	while(buffer!=  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
141	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
142	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  BYTE_MASK)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  BYTE_MASK)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
143	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  allNUL  =  false;  break;  }  }  [CE]  illegal  start  of  expression  [FE]                                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  BYTE_MASK)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  allNUL  =  false;  break;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  BYTE_MASK)  {  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  allNUL  =  false;  break;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
144	[BUG]  [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
145	[BUG]  [BUGGY]  if(length  <  =  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  =  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
146	[BUG]  [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
147	[BUG]  [BUGGY]  while(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  while(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	while(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
148	[BUG]  [BUGGY]  static  final  byte  allNUL  =  true;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  static  final  byte  allNUL  =  true;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	static  final  byte  allNUL  =  true;	  static    final    boolean    allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
149	[BUG]  [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
150	[BUG]  [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
151	[BUG]  [BUGGY]  while(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  while(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	while(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
152	[BUG]  [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
153	[BUG]  [BUGGY]  while(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  while(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	while(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
154	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
155	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  end,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
156	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
157	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
158	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
159	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	24	None	replace
160	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
161	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  end);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  start,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
162	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
163	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  end);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  offset,  buffer,  start,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
164	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  start);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  start);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  end,  start);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
165	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  off,  end);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  off,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  off,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
166	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
167	[BUG]  [BUGGY]  int  start  =  offset  +  length  -  1;  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  start  =  offset  +  length  -  1;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	int  start  =  offset  +  length  -  1;	  int    start    =    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
168	[BUG]  [BUGGY]  int  start  =  offset  +  length  -  2;  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  start  =  offset  +  length  -  2;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	int  start  =  offset  +  length  -  2;	  int    start    =    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
169	[BUG]  [BUGGY]  int  start  =  offset  +  length  -  4;  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  start  =  offset  +  length  -  4;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	int  start  =  offset  +  length  -  4;	  int    start    =    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
170	[BUG]  [BUGGY]  int  start  =  offset  +  length  /  2;  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  start  =  offset  +  length  /  2;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	int  start  =  offset  +  length  /  2;	  int    start    =    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
171	[BUG]  [BUGGY]  int  start  =  offset  +  length,  buffer.length;  [CE]  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  start  =  offset  +  length,  buffer.length;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	int  start  =  offset  +  length,  buffer.length;	  int    start    =    offset    +    length;    	non-compiled	[CE]  	26	None	replace
172	[BUG]  [BUGGY]  int  start  =  offset  +  length  *  2;  [CE]  class,  interface,  or  enum  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  start  =  offset  +  length  *  2;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	int  start  =  offset  +  length  *  2;	  int    start    =    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
173	[BUG]  [BUGGY]  Byte  allNUL  =  null;  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Byte  allNUL  =  null;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Byte  allNUL  =  null;	  Byte    allNUL    =    true;    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
174	[BUG]  [BUGGY]  boolean  allNUL  =  buffer.length  >=  0;  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  buffer.length  >=  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  buffer.length  >=  0;	  boolean    allNUL    =    buffer.length!=    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
175	[BUG]  [BUGGY]  final  boolean  allNUL  =  buffer.length  ==  0;  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  allNUL  =  buffer.length  ==  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNUL  =  buffer.length  ==  0;	  final    boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
176	[BUG]  [BUGGY]  final  boolean  allNUL  =  buffer.length!=  0;  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  allNUL  =  buffer.length!=  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNUL  =  buffer.length!=  0;	  final    boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
177	[BUG]  [BUGGY]  boolean  allNUL  =  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_FALSE;  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_FALSE;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_FALSE;	  boolean    allNUL    =    BooleanUtils.BYTE_MASK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
178	[BUG]  [BUGGY]  boolean  allNUL  =  buffer.length  ==  0L;  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  buffer.length  ==  0L;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  buffer.length  ==  0L;	  boolean    allNUL    =    buffer.length    ==    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
179	[BUG]  [BUGGY]  boolean  allNUL  =  offset  ==  0;  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  offset  ==  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  offset  ==  0;	  boolean    allNUL    =    buffer.length    ==    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
180	[BUG]  [BUGGY]  boolean  allNul  =  buffer.length  ==  0;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNul  =  buffer.length  ==  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNul  =  buffer.length  ==  0;	  boolean    allNul    =    null;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
181	[BUG]  [BUGGY]  boolean  allNul  =  buffer.length!=  0;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNul  =  buffer.length!=  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNul  =  buffer.length!=  0;	  boolean    allNul    =    null;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
182	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length  -  start);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length  -  start);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length  -  start);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
183	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  0,  offset);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  0,  offset);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.parseByte(buffer,  0,  offset);	  boolean    allNUL    =    Boolean.parseByte(buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
184	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  0,  start  +  length);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  0,  start  +  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.parseByte(buffer,  0,  start  +  length);	  boolean    allNUL    =    Boolean.parseByte(buffer,    0,    length);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
185	[BUG]  [BUGGY]  Integer  allNul  =  true;  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Integer  allNul  =  true;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Integer  allNul  =  true;	  Boolean    allNul    =    true;    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
186	[BUG]  [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.indexOf(length)  ==  0;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.indexOf(length)  ==  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	static  final  boolean  allNUL  =  Boolean.TRUE.indexOf(length)  ==  0;	  static    final    boolean    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
187	[BUG]  [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	static  final  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length);	  static    final    boolean    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
188	[BUG]  [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.equals(buffer[offset]);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.equals(buffer[offset]);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	static  final  boolean  allNUL  =  Boolean.TRUE.equals(buffer[offset]);	  static    final    boolean    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
189	[BUG]  [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.equals(byte);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.equals(byte);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	static  final  boolean  allNUL  =  Boolean.TRUE.equals(byte);	  static    final    boolean    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
190	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  end  -  start);  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  end  -  start);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  end  -  start);	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    end);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
191	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length);	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    end);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
192	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  length)!=  0;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  length)!=  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  offset,  length)!=  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)!=    0;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
193	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  buffer,  start,  length)!=  0;  [CE]  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  buffer,  start,  length)!=  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  buffer,  start,  length)!=  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)!=    0;    	non-compiled	[CE]  	34	None	replace
194	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  buffer,  start,  length)  ==  0;  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  buffer,  start,  length)  ==  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  buffer,  start,  length)  ==  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)    ==    0;    	non-compiled	[CE]  	37	None	replace
195	[BUG]  [BUGGY]  boolean  ALLNUL  =  length.compareTo(buffer,  start,  length)  ==  0;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  length.compareTo(buffer,  start,  length)  ==  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  length.compareTo(buffer,  start,  length)  ==  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)    ==    0;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
196	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length)>  0;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length)>  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length)>  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)    ==    0;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
197	[BUG]  [BUGGY]  BYTE_MASK  allNUL  =  false;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  BYTE_MASK  allNUL  =  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	BYTE_MASK  allNUL  =  false;	  Byte    allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
198	[BUG]  [BUGGY]  int  start  =  offset  +  length  /  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  start  =  offset  +  length  /  BYTE_MASK;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	int  start  =  offset  +  length  /  BYTE_MASK;	  int    start    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
199	[BUG]  [BUGGY]  int  start  =  offset  +  length  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  start  =  offset  +  length  +  1;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	int  start  =  offset  +  length  +  1;	  int    start    =    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
200	[BUG]  [BUGGY]  int  start  =  offset  +  length  +  2;  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  start  =  offset  +  length  +  2;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	int  start  =  offset  +  length  +  2;	  int    start    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
201	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.TRUE.valueOf(length);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.TRUE.valueOf(length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.TRUE.valueOf(length);	  boolean    allNUL    =    Boolean.valueOf(length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
202	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.valueOf(length)!=  false;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.valueOf(length)!=  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.valueOf(length)!=  false;	  boolean    allNUL    =    Boolean.valueOf(length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
203	[BUG]  [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  static    final    boolean    allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
204	[BUG]  [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  0;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  0;  }	  static    final    boolean    allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
205	[BUG]  [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }	  static    final    boolean    allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
206	[BUG]  [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  static    final    boolean    allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
207	[BUG]  [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(allNUL)  {  static  final  boolean  allNUL  =  true;  }	  static    final    boolean    allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
208	[BUG]  [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }	  static    final    boolean    allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
209	[BUG]  [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
210	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
211	[BUG]  [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
212	[BUG]  [BUGGY]  final  int  start  =  buffer.length()  -  offset;  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  buffer.length()  -  offset;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  buffer.length()  -  offset;	  final    int    start    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
213	[BUG]  [BUGGY]  final  int  start  =  buffer.length()  +  length;  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  buffer.length()  +  length;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  buffer.length()  +  length;	  final    int    start    =    buffer.length();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
214	[BUG]  [BUGGY]  final  int  start  =  offset  +  length  /  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  offset  +  length  /  BYTE_MASK;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  offset  +  length  /  BYTE_MASK;	  final    int    start    =    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
215	[BUG]  [BUGGY]  final  int  start  =  offset  +  length  +  2;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  offset  +  length  +  2;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  offset  +  length  +  2;	  final    int    start    =    offset    +    length;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
216	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.valueOf;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.valueOf;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.valueOf;	  boolean    allNUL    =    Boolean.TRUE;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
217	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  start);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
218	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
219	[BUG]  [BUGGY]  Boolean  allNUL  =  buffer.length  ==  0?  true  :  false;  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Boolean  allNUL  =  buffer.length  ==  0?  true  :  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Boolean  allNUL  =  buffer.length  ==  0?  true  :  false;	  Boolean    allNUL    =    null;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
220	[BUG]  [BUGGY]  Boolean  allNUL  =  buffer.length!=  0?  true  :  false;  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Boolean  allNUL  =  buffer.length!=  0?  true  :  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Boolean  allNUL  =  buffer.length!=  0?  true  :  false;	  Boolean    allNUL    =    null;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
221	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
222	[BUG]  [BUGGY]  static  final  boolean  allNul  =  false;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  static  final  boolean  allNul  =  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	static  final  boolean  allNul  =  false;	  final    boolean    allNul    =    false;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
223	[BUG]  [BUGGY]  boolean  ALLNUL  =  result!=  Boolean.TRUE.equals(BYTE_MASK);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  result!=  Boolean.TRUE.equals(BYTE_MASK);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  result!=  Boolean.TRUE.equals(BYTE_MASK);	  boolean    ALLNUL    =    Boolean.TRUE.equals(result);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
224	[BUG]  [BUGGY]  boolean  ALLNUL  =  result  ==  Boolean.TRUE.equals(BYTE_MASK);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  result  ==  Boolean.TRUE.equals(BYTE_MASK);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  result  ==  Boolean.TRUE.equals(BYTE_MASK);	  boolean    ALLNUL    =    Boolean.TRUE.equals(result);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
225	[BUG]  [BUGGY]  boolean  ALLNUL  =  result!=  Boolean.TRUE.equals(byte);  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  result!=  Boolean.TRUE.equals(byte);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  result!=  Boolean.TRUE.equals(byte);	  boolean    ALLNUL    =    Boolean.TRUE.equals(result);    	non-compiled	[CE]  	35	None	replace
226	[BUG]  [BUGGY]  boolean  ALLNUL  =  result  ==  Boolean.TRUE.equals(byte);  [CE]  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  result  ==  Boolean.TRUE.equals(byte);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  result  ==  Boolean.TRUE.equals(byte);	  boolean    ALLNUL    =    Boolean.TRUE.equals(result);    	non-compiled	[CE]  	35	None	replace
227	[BUG]  [BUGGY]  if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
228	[BUG]  [BUGGY]  if(length  <  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
229	[BUG]  [BUGGY]  if(length  <  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
230	[BUG]  [BUGGY]  if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
231	[BUG]  [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
232	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  allNUL  =  false;  break;  }  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  allNUL  =  false;  break;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  allNUL  =  false;  break;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
233	[BUG]  [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  >=  0)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  >=  0)  {  break;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  >=  0)  {  break;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
234	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  >=  0)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  >=  0)  {  break;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  >=  0)  {  break;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
235	[BUG]  [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
236	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
237	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.FALSE  ||  Boolean.parseByte(buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.FALSE  ||  Boolean.parseByte(buffer,  0,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.FALSE  ||  Boolean.parseByte(buffer,  0,  length);	  boolean    allNUL    =    Boolean.FALSE;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
238	[BUG]  [BUGGY]  if(length  <  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
239	[BUG]  [BUGGY]  if(length  <  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  	40	None	replace
240	[BUG]  [BUGGY]  if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
241	[BUG]  [BUGGY]  boolean  allNUL  =  buffer!=  null;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  buffer!=  null;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  buffer!=  null;	  boolean    allNUL    =    this.currentByte!=    null;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
242	[BUG]  [BUGGY]  boolean  allNUL  =  this.currentByte!=  false;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  this.currentByte!=  false;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  this.currentByte!=  false;	  boolean    allNUL    =    this.currentByte!=    null;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
243	[BUG]  [BUGGY]  boolean  allNUL  =  BooleanUtils.isAllNull(buffer);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  BooleanUtils.isAllNull(buffer);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  BooleanUtils.isAllNull(buffer);	  boolean    ALLNUL    =    BooleanUtils.isAllNull(buffer);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
244	[BUG]  [BUGGY]  boolean  allNUL  =  BooleanUtils.isAllNull(length);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  BooleanUtils.isAllNull(length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  BooleanUtils.isAllNull(length);	  boolean    ALLNUL    =    BooleanUtils.isAllNull(buffer);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
245	[BUG]  [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  >=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  >=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  >=  0)  {  return  0L;  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
246	[BUG]  [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  null)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  null)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  null)  {  return  0L;  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
247	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  start);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  start);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length,  start);	  System.arraycopy(buffer,    0,    buffer,    offset,    end,    length);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
248	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  start,  length)!=  0;  [CE]  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  start,  length)!=  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  start,  length)!=  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)!=    0;    	non-compiled	[CE]  	34	None	replace
249	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  end)!=  0;  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  end)!=  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  end)!=  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)!=    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
250	[BUG]  [BUGGY]  if(length  >  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  >  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  >  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
251	[BUG]  [BUGGY]  if(length  <  1)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  1)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  1)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
252	[BUG]  [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
253	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
254	[BUG]  [BUGGY]  if(length  >  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  >  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  >  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
255	[BUG]  [BUGGY]  Boolean  allNUL  =  BYTE_MASK;  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Boolean  allNUL  =  BYTE_MASK;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Boolean  allNUL  =  BYTE_MASK;	  Boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
256	[BUG]  [BUGGY]  boolean  allNUL  =  this.currentByte!=  null?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  this.currentByte!=  null?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  this.currentByte!=  null?  Boolean.TRUE  :  Boolean.FALSE;	  boolean    allNUL    =    Boolean.TRUE;    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
257	[BUG]  [BUGGY]  boolean  allNUL  =  this.currentByte  ==  null?  Boolean.TRUE  :  Boolean.FALSE;  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  this.currentByte  ==  null?  Boolean.TRUE  :  Boolean.FALSE;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  this.currentByte  ==  null?  Boolean.TRUE  :  Boolean.FALSE;	  boolean    allNUL    =    Boolean.TRUE;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
258	[BUG]  [BUGGY]  boolean  allNUL  =  this.currentByte  ==  null  &&  this.currentByte!=  null;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  this.currentByte  ==  null  &&  this.currentByte!=  null;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  this.currentByte  ==  null  &&  this.currentByte!=  null;	  boolean    allNUL    =    Boolean.TRUE;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
259	[BUG]  [BUGGY]  final  boolean  allNUL  =  BooleanUtils.isBoolean(byte);  [CE]  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  allNUL  =  BooleanUtils.isBoolean(byte);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNUL  =  BooleanUtils.isBoolean(byte);	  final    boolean    allNUL    =    false;    	non-compiled	[CE]  	13	None	replace
260	[BUG]  [BUGGY]  final  boolean  allNUL  =  Boolean.TRUE.equals(result);  [CE]  illegal  start  of  type  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  allNUL  =  Boolean.TRUE.equals(result);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNUL  =  Boolean.TRUE.equals(result);	  final    boolean    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
261	[BUG]  [BUGGY]  final  boolean  allNUL  =  BooleanUtils.isBoolean(length);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  allNUL  =  BooleanUtils.isBoolean(length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNUL  =  BooleanUtils.isBoolean(length);	  final    boolean    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
262	[BUG]  [BUGGY]  final  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length);	  final    boolean    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
263	[BUG]  [BUGGY]  final  boolean  allNUL  =  Boolean.TRUE.equals(byte);  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  allNUL  =  Boolean.TRUE.equals(byte);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNUL  =  Boolean.TRUE.equals(byte);	  final    boolean    allNUL    =    false;    	non-compiled	[CE]  	13	None	replace
264	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  start,  end);  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  start,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  start,  end);	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    end);    	non-compiled	[CE]  	36	None	replace
265	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  buffer,  end);  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  buffer,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  buffer,  end);	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    end);    	non-compiled	[CE]  	36	None	replace
266	[BUG]  [BUGGY]  final  int  start  =  offset  +  length  *  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  int  start  =  offset  +  length  *  BYTE_MASK;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  offset  +  length  *  BYTE_MASK;	  final    int    start    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
267	[BUG]  [BUGGY]  final  boolean  ALLNUL  =  Boolean.TRUE.equals(result);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  ALLNUL  =  Boolean.TRUE.equals(result);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  ALLNUL  =  Boolean.TRUE.equals(result);	  final    boolean    ALLNUL    =    false;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
268	[BUG]  [BUGGY]  final  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length);  [CE]  illegal  start  of  type  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length);	  final    boolean    ALLNUL    =    false;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
269	[BUG]  [BUGGY]  final  boolean  ALLNUL  =  Boolean.TRUE.equals(byte);  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  ALLNUL  =  Boolean.TRUE.equals(byte);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  ALLNUL  =  Boolean.TRUE.equals(byte);	  final    boolean    ALLNUL    =    false;    	non-compiled	[CE]  	15	None	replace
270	[BUG]  [BUGGY]  final  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  end);  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  end);	  final    boolean    ALLNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
271	[BUG]  [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
272	[BUG]  [BUGGY]  if(length  <  1)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  1)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  1)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
273	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
274	[BUG]  [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0;  }  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
275	[BUG]  [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
276	[BUG]  [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
277	[BUG]  [BUGGY]  if(end  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(end  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
279	[BUG]  [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
280	[BUG]  [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  break;  }  }  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  break;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  break;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    break;    }    }    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
281	[BUG]  [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(allNUL)  {  static  final  boolean  allNUL  =  true;  }  else  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }	  static    final    boolean    allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
282	[BUG]  [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(allNUL)  {  static  final  boolean  allNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  static    final    boolean    allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
283	[BUG]  [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(allNUL)  {  static  final  boolean  allNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }	  static    final    boolean    allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
284	[BUG]  [BUGGY]  final  boolean  allNul  =  null;  [CE]  class,  interface,  or  enum  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  allNul  =  null;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNul  =  null;	  final    boolean    allNul    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
285	[BUG]  [BUGGY]  boolean  allNUL  =  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK;  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK;	  boolean    allNUL    =    BooleanUtils.BYTE_MASK;    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
286	[BUG]  [BUGGY]  boolean  allNUL  =  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK);  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK  ||  BooleanUtils.BYTE_MASK);	  boolean    allNUL    =    BooleanUtils.BYTE_MASK;    	non-compiled	[CE]  	31	None	replace
287	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  BYTE_MASK);  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  BYTE_MASK);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length,  BYTE_MASK);	  System.arraycopy(buffer,    0,    buffer,    offset,    end,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
288	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  offset,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  offset,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.parseByte(buffer,  offset,  length);	  boolean    allNUL    =    Boolean.parseByte(buffer,    0,    length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
289	[BUG]  [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  false;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(allNUL)  {  static  final  boolean  allNUL  =  false;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(allNUL)  {  static  final  boolean  allNUL  =  false;  }	  static    final    boolean    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
290	[BUG]  [BUGGY]  if(!allNUL)  {  static  final  boolean  allNUL  =  false;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(!allNUL)  {  static  final  boolean  allNUL  =  false;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(!allNUL)  {  static  final  boolean  allNUL  =  false;  }	  static    final    boolean    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
291	[BUG]  [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.equals(result);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.equals(result);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	static  final  boolean  allNUL  =  Boolean.TRUE.equals(result);	  static    final    boolean    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
292	[BUG]  [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  static  final  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  0,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	static  final  boolean  allNUL  =  Boolean.TRUE.compareTo(buffer,  0,  length);	  static    final    boolean    allNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
293	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.equals(end);  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.equals(end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.equals(end);	  boolean    ALLNUL    =    Boolean.TRUE.equals(result);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
294	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.equals(value);  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.equals(value);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.equals(value);	  boolean    ALLNUL    =    Boolean.TRUE.equals(result);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
295	[BUG]  [BUGGY]  boolean  allNUL  =  result.equals(BYTE_MASK);  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  result.equals(BYTE_MASK);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  result.equals(BYTE_MASK);	  boolean    ALLNUL    =    Boolean.TRUE.equals(result);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
296	[BUG]  [BUGGY]  System.arraycopy(byte,  0,  buffer,  start,  end);  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(byte,  0,  buffer,  start,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(byte,  0,  buffer,  start,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  	25	None	replace
297	[BUG]  [BUGGY]  int  start  =  offset  +  length  *  BYTE_MASK;  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  int  start  =  offset  +  length  *  BYTE_MASK;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	int  start  =  offset  +  length  *  BYTE_MASK;	  int    start    =    offset    +    length;    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
298	[BUG]  [BUGGY]  System.arraycopy(buffer,  off,  buffer,  0,  end);  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  off,  buffer,  0,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  off,  buffer,  0,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
299	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset  +  1,  buffer,  0,  end);  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  System.arraycopy(buffer,  offset  +  1,  buffer,  0,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  offset  +  1,  buffer,  0,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
300	[BUG]  [BUGGY]  BYTE_MASK  =  true;  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  BYTE_MASK  =  true;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	BYTE_MASK  =  true;	  Byte    allNUL    =    true;    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
301	[BUG]  [BUGGY]  boolean  allNUL  =  BooleanUtils.isAllNull(buffer,  end);  [CE]  class,  interface,  or  enum  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  BooleanUtils.isAllNull(buffer,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  BooleanUtils.isAllNull(buffer,  end);	  boolean    ALLNUL    =    BooleanUtils.isAllNull(buffer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
302	[BUG]  [BUGGY]  boolean  allNUL  =  BooleanUtils.isAllNull(end);  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  BooleanUtils.isAllNull(end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  BooleanUtils.isAllNull(end);	  boolean    ALLNUL    =    BooleanUtils.isAllNull(buffer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
303	[BUG]  [BUGGY]  if(end  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(end  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
304	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
305	[BUG]  [BUGGY]  if(start  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(start  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(start  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
306	[BUG]  [BUGGY]  boolean  allNUL  =  buffer.length!=  1;  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  buffer.length!=  1;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  buffer.length!=  1;	  boolean    allNUL    =    buffer.length!=    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
307	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  start,  length);  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  start,  length);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.parseByte(buffer,  start,  length);	  boolean    allNUL    =    Boolean.valueOf(length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
308	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.valueOf(length)!=  0;  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.valueOf(length)!=  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.valueOf(length)!=  0;	  boolean    allNUL    =    Boolean.valueOf(length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
309	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer);  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.parseByte(buffer);	  boolean    allNUL    =    Boolean.valueOf(length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
310	[BUG]  [BUGGY]  Integer  allNUL  =  0;  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  Integer  allNUL  =  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Integer  allNUL  =  0;	  Integer    allNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
311	[BUG]  [BUGGY]  if(length  <  1)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  }  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  1)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  1)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    0)    {    return    0L;    }    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
312	[BUG]  [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0;  }  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  2)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0;  }  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    0)    {    return    0L;    }    }    	non-compiled	[CE]  <identifier>  expected	43	None	replace
313	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  }  [CE]  class,  interface,  or  enum  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  }	  if(length    <    BYTE_MASK)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    0)    {    return    0L;    }    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
314	[BUG]  [BUGGY]  if(end  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(end  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(end  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
315	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }	  if(buffer    ==    null)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!=    0)    {    return    0L;    }    }    	non-compiled	[CE]  <identifier>  expected	39	None	replace
316	[BUG]  [BUGGY]  final  boolean  allNUL  =  BYTE_MASK;  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  final  boolean  allNUL  =  BYTE_MASK;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNUL  =  BYTE_MASK;	  final    boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
317	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.FALSE  ||  Boolean.parseByte(buffer,  start,  length));  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.FALSE  ||  Boolean.parseByte(buffer,  start,  length));  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.FALSE  ||  Boolean.parseByte(buffer,  start,  length));	  boolean    allNUL    =    Boolean.FALSE;    	non-compiled	[CE]  	19	None	replace
318	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.FALSE  ||  Boolean.parseByte(buffer,  start,  end);  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  allNUL  =  Boolean.FALSE  ||  Boolean.parseByte(buffer,  start,  end);  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.FALSE  ||  Boolean.parseByte(buffer,  start,  end);	  boolean    allNUL    =    Boolean.FALSE;    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
319	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  start,  length)  ==  0;  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  start,  length)  ==  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(byte,  start,  length)  ==  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)    ==    0;    	non-compiled	[CE]  	37	None	replace
320	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(BYTE_MASK,  buffer,  start,  length)  ==  0;  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(BYTE_MASK,  buffer,  start,  length)  ==  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(BYTE_MASK,  buffer,  start,  length)  ==  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)    ==    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
321	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  end)  ==  0;  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }      [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  end)  ==  0;  [BUGGY]      for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  end)  ==  0;	  boolean    ALLNUL    =    Boolean.TRUE.compareTo(buffer,    start,    length)    ==    0;    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
