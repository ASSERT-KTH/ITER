bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  boolean  allNul  =  true;  [CE]  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  boolean  allNul  =  true;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNul  =  true;	  boolean    allNul    =    false;    	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  final  boolean  allNul  =  false;  [CE]  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  final  boolean  allNul  =  false;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNul  =  false;	  boolean    allNul    =    false;    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  Boolean  allNul  =  true;  [CE]  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  Boolean  allNul  =  true;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Boolean  allNul  =  true;	  boolean    allNul    =    false;    	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [CE]  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);	      	non-compiled	[CE]  	5	None	replace
5	[BUG]  [BUGGY]  final  int  start  =  offset  +  length;  [CE]  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  final  int  start  =  offset  +  length;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  offset  +  length;	      	non-compiled	[CE]  	5	None	replace
6	[BUG]  [BUGGY]  final  int  start  =  buffer.length();  [CE]  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  final  int  start  =  buffer.length();  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  int  start  =  buffer.length();	      	non-compiled	[CE]  	5	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  [CE]  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length);	      	non-compiled	[CE]  	5	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);	      	non-compiled	[CE]  	5	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end,  length);  [CE]  [FE]                          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end,  length);  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end,  length);	      	non-compiled	[CE]  	5	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [CE]  [FE]                            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);	      	non-compiled	[CE]  	5	None	replace
11	[BUG]  [BUGGY]  Boolean  allNUL  =  true;  [CE]  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  Boolean  allNUL  =  true;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Boolean  allNUL  =  true;	  Boolean    allNUL    =    false;    	non-compiled	[CE]  	3	None	replace
12	[BUG]  [BUGGY]  Byte  allNUL  =  true;  [CE]  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  Byte  allNUL  =  true;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Byte  allNUL  =  true;	  Boolean    allNUL    =    false;    	non-compiled	[CE]  	3	None	replace
13	[BUG]  [BUGGY]  final  boolean  allNUL  =  false;  [CE]  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  final  boolean  allNUL  =  false;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNUL  =  false;	  final    boolean    allNUL    =    true;    	non-compiled	[CE]  	6	None	replace
14	[BUG]  [BUGGY]  static  final  boolean  allNUL  =  false;  [CE]  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  static  final  boolean  allNUL  =  false;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	static  final  boolean  allNUL  =  false;	  final    boolean    allNUL    =    true;    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  final  boolean  ALLNUL  =  false;  [CE]  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  final  boolean  ALLNUL  =  false;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  ALLNUL  =  false;	  final    boolean    allNUL    =    true;    	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  static  final  boolean  allNUL  =  true;  [CE]  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  static  final  boolean  allNUL  =  true;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	static  final  boolean  allNUL  =  true;	  final    boolean    allNUL    =    true;    	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  final  boolean  allNUL  =  null;  [CE]  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  final  boolean  allNUL  =  null;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	final  boolean  allNUL  =  null;	  final    boolean    allNUL    =    true;    	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.TRUE;  [CE]  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  boolean  allNUL  =  Boolean.TRUE;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.TRUE;	  boolean    allNUL    =    null;    	non-compiled	[CE]  	4	None	replace
19	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.FALSE;  [CE]  class,  interface,  or  enum  expected  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  boolean  allNUL  =  Boolean.FALSE;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.FALSE;	  boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
20	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.valueOf(length);  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  boolean  allNUL  =  Boolean.valueOf(length);  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.valueOf(length);	  boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
21	[BUG]  [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  0,  length);  [CE]  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  boolean  allNUL  =  Boolean.parseByte(buffer,  0,  length);  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  Boolean.parseByte(buffer,  0,  length);	  boolean    allNUL    =    null;    	non-compiled	[CE]  	4	None	replace
22	[BUG]  [BUGGY]  boolean  ALLNUL  =  true;  [CE]  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  boolean  ALLNUL  =  true;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  true;	  boolean    ALLNUL    =    false;    	non-compiled	[CE]  	2	None	replace
23	[BUG]  [BUGGY]  Boolean  ALLNUL  =  true;  [CE]  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  Boolean  ALLNUL  =  true;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Boolean  ALLNUL  =  true;	  boolean    ALLNUL    =    false;    	non-compiled	[CE]  	2	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  class,  interface,  or  enum  expected  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
25	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
26	[BUG]  [BUGGY]  int  start  =  offset  +  length;  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  int  start  =  offset  +  length;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	int  start  =  offset  +  length;	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
27	[BUG]  [BUGGY]  boolean  allNul  =  null;  [CE]  class,  interface,  or  enum  expected  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  boolean  allNul  =  null;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNul  =  null;	  boolean    allNul    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
28	[BUG]  [BUGGY]  Boolean  allNUL  =  null;  [CE]  class,  interface,  or  enum  expected  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  Boolean  allNUL  =  null;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Boolean  allNUL  =  null;	  Boolean    allNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
29	[BUG]  [BUGGY]  boolean  allNUL  =  buffer.length  ==  0;  [CE]  class,  interface,  or  enum  expected  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  boolean  allNUL  =  buffer.length  ==  0;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  buffer.length  ==  0;	  boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
30	[BUG]  [BUGGY]  boolean  allNUL  =  buffer.length!=  0;  [CE]  class,  interface,  or  enum  expected  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  boolean  allNUL  =  buffer.length!=  0;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  buffer.length!=  0;	  boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
31	[BUG]  [BUGGY]  boolean  allNUL  =  BooleanUtils.BYTE_MASK;  [CE]  class,  interface,  or  enum  expected  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  boolean  allNUL  =  BooleanUtils.BYTE_MASK;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  BooleanUtils.BYTE_MASK;	  boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
32	[BUG]  [BUGGY]  boolean  allNUL  =  this.currentByte!=  null;  [CE]  class,  interface,  or  enum  expected  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  boolean  allNUL  =  this.currentByte!=  null;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  allNUL  =  this.currentByte!=  null;	  boolean    allNUL    =    null;    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
33	[BUG]  [BUGGY]  boolean  ALLNUL  =  BooleanUtils.isAllNull(buffer);  [CE]  class,  interface,  or  enum  expected  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  boolean  ALLNUL  =  BooleanUtils.isAllNull(buffer);  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  BooleanUtils.isAllNull(buffer);	  boolean    ALLNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
34	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length)!=  0;  [CE]  class,  interface,  or  enum  expected  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length)!=  0;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length)!=  0;	  boolean    ALLNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
35	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.equals(result);  [CE]  class,  interface,  or  enum  expected  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.equals(result);  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.equals(result);	  boolean    ALLNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
36	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  end);  [CE]  class,  interface,  or  enum  expected  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  end);  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  end);	  boolean    ALLNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
37	[BUG]  [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length)  ==  0;  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length)  ==  0;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	boolean  ALLNUL  =  Boolean.TRUE.compareTo(buffer,  start,  length)  ==  0;	  boolean    ALLNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
38	[BUG]  [BUGGY]  Integer  allNUL  =  false;  [CE]  class,  interface,  or  enum  expected  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  Integer  allNUL  =  false;  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	Integer  allNUL  =  false;	  Boolean    allNUL    =    false;    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
39	[BUG]  [BUGGY]  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
40	[BUG]  [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
41	[BUG]  [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
42	[BUG]  [BUGGY]  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  0L;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
43	[BUG]  [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  }  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  }  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  0)  {  return  0L;  }  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
44	[BUG]  [BUGGY]  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }    [BUGGY]  if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [BUGGY]    for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	if(buffer  ==  null)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
