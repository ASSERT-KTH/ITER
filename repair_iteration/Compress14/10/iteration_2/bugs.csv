bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(length  <  BYTE_MASK  ||  allNUL)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  BYTE_MASK  ||  allNUL)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  BYTE_MASK  ||  allNUL)  {	  if(allNUL    ||    length    <    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  if(length  ||  allNUL)  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  allNUL)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  allNUL)  {	  if(allNUL    ||    length    <    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  if(length  <  BYTE_MASK  ||  end  <  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  BYTE_MASK  ||  end  <  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  BYTE_MASK  ||  end  <  BYTE_MASK)  {	  if(allNUL    ||    length    <    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  if(length  <  BYTE_MASK  ||  start  <  length)  {  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  BYTE_MASK  ||  start  <  length)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  BYTE_MASK  ||  start  <  length)  {	  if(allNUL    ||    length    <    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
5	[BUG]  [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK)  {	  if(allNUL    ||    length    <    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
6	[BUG]  [BUGGY]  if(length  >  0  ||  length  <  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >  0  ||  length  <  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >  0  ||  length  <  BYTE_MASK)  {	  if(allNUL    ||    length    <    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
7	[BUG]  [BUGGY]  if(length  +  1  <  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  +  1  <  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  +  1  <  BYTE_MASK)  {	  if(allNUL    ||    length    <    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  if(length  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >  buffer[start])  {	  if(allNUL    ||    length    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
9	[BUG]  [BUGGY]  if(length  <  =  allNUL  ||  length  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  =  allNUL  ||  length  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  =  allNUL  ||  length  >  buffer[start])  {	  if(allNUL    ||    length    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
10	[BUG]  [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  BYTE_MASK  ||  length  >  buffer[start])  {	  if(allNUL    ||    length    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
11	[BUG]  [BUGGY]  if(length  <  =  length  ||  buffer[start]  >  allNUL)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  =  length  ||  buffer[start]  >  allNUL)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  =  length  ||  buffer[start]  >  allNUL)  {	  if(allNUL    ||    length    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
12	[BUG]  [BUGGY]  if(length  <  =  end  ||  length  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  =  end  ||  length  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  =  end  ||  length  >  buffer[start])  {	  if(allNUL    ||    length    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
13	[BUG]  [BUGGY]  if(length  >  buffer[start]  ||  allNUL)  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >  buffer[start]  ||  allNUL)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >  buffer[start]  ||  allNUL)  {	  if(allNUL    ||    length    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
14	[BUG]  [BUGGY]  if(length  <  =  allNUL  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  =  allNUL  ||  end  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  =  allNUL  ||  end  >  buffer[start])  {	  if(allNUL    ||    length    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
15	[BUG]  [BUGGY]  if(length  ||  length  ==  1)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  length  ==  1)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  length  ==  1)  {	  if(allNUL    ||    length    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
16	[BUG]  [BUGGY]  if(length  ||  buffer[start]  =='')  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  buffer[start]  =='')  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  buffer[start]  =='')  {	  if(allNUL    ||    length    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
17	[BUG]  [BUGGY]  if(length  ||  offset  ==  length)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  offset  ==  length)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  offset  ==  length)  {	  if(allNUL    ||    length    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
18	[BUG]  [BUGGY]  if(length  ||  end  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  end  ==  1)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  end  ==  1)  {	  if(allNUL    ||    length    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
19	[BUG]  [BUGGY]  if(length  ||  start  ==  length)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  start  ==  length)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  start  ==  length)  {	  if(allNUL    ||    length    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
20	[BUG]  [BUGGY]  if(length  ||  offset  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  offset  ==  1)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  offset  ==  1)  {	  if(allNUL    ||    length    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
21	[BUG]  [BUGGY]  if(length  ||  offset  ==  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  offset  ==  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  offset  ==  BYTE_MASK)  {	  if(allNUL    ||    length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  if(length  ||  length  ==  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  length  ==  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  length  ==  BYTE_MASK)  {	  if(allNUL    ||    length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  if(length  ||  buffer[start]  ==  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  buffer[start]  ==  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  buffer[start]  ==  BYTE_MASK)  {	  if(allNUL    ||    length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  if(length  ||  start  ==  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  start  ==  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  start  ==  BYTE_MASK)  {	  if(allNUL    ||    length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
25	[BUG]  [BUGGY]  if(length  ||  end  ==  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  end  ==  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  end  ==  BYTE_MASK)  {	  if(allNUL    ||    length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
26	[BUG]  [BUGGY]  if(!allNUL  ||  buffer[start]  =='')  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  ||  buffer[start]  =='')  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  ||  buffer[start]  =='')  {	  if(!allNUL)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
27	[BUG]  [BUGGY]  if(!allNUL  &&  buffer[start]  =='')  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  &&  buffer[start]  =='')  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  &&  buffer[start]  =='')  {	  if(!allNUL)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
28	[BUG]  [BUGGY]  if(!allNUL  &&  start  >=  end)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  &&  start  >=  end)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  &&  start  >=  end)  {	  if(!allNUL)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
29	[BUG]  [BUGGY]  if(!allNUL  &&  end  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  &&  end  <  =  length)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  &&  end  <  =  length)  {	  if(!allNUL)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
30	[BUG]  [BUGGY]  if(!allNUL  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  ||  end  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  ||  end  >  buffer[start])  {	  if(!allNUL)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
31	[BUG]  [BUGGY]  if(!allNUL  &&  start  <  =  end)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  &&  start  <  =  end)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  &&  start  <  =  end)  {	  if(!allNUL)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
32	[BUG]  [BUGGY]  if(length  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  =  0)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  =  0)  {	  if(length    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  if(length  >  0  ||  buffer[start]  =='')  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >  0  ||  buffer[start]  =='')  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >  0  ||  buffer[start]  =='')  {	  if(length    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  if(start  >  end)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  >  end)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  >  end)  {	  if(length    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  if(end  >  0)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(end  >  0)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(end  >  0)  {	  if(length    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  if(length  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >=  0)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >=  0)  {	  if(length    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
37	[BUG]  [BUGGY]  if(length  <  =  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  =  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  =  BYTE_MASK)  {	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
38	[BUG]  [BUGGY]  if(length  <  =  BYTE_MASK  ||  allNUL)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  =  BYTE_MASK  ||  allNUL)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  =  BYTE_MASK  ||  allNUL)  {	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
39	[BUG]  [BUGGY]  if(start  <  =  BYTE_MASK  ||  length  <  =  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  <  =  BYTE_MASK  ||  length  <  =  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  <  =  BYTE_MASK  ||  length  <  =  BYTE_MASK)  {	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
40	[BUG]  [BUGGY]  if(length  >=  BYTE_MASK  ||  length  <  =  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >=  BYTE_MASK  ||  length  <  =  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >=  BYTE_MASK  ||  length  <  =  BYTE_MASK)  {	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
41	[BUG]  [BUGGY]  if(length  <  =  BYTE_MASK  ||  length  <  =  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  =  BYTE_MASK  ||  length  <  =  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  =  BYTE_MASK  ||  length  <  =  BYTE_MASK)  {	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
42	[BUG]  [BUGGY]  if(length  <  =  BYTE_MASK  ||  end  <  =  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  =  BYTE_MASK  ||  end  <  =  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  =  BYTE_MASK  ||  end  <  =  BYTE_MASK)  {	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
43	[BUG]  [BUGGY]  if(length  <  =  BYTE_MASK  ||  start  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  =  BYTE_MASK  ||  start  <  =  length)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  =  BYTE_MASK  ||  start  <  =  length)  {	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
44	[BUG]  [BUGGY]  if(length  ==  1)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ==  1)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ==  1)  {	  if(length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
45	[BUG]  [BUGGY]  if(length  >  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >  BYTE_MASK)  {	  if(length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
46	[BUG]  [BUGGY]  if(length  ==  =  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ==  =  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ==  =  BYTE_MASK)  {	  if(length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
47	[BUG]  [BUGGY]  if(length  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ==  2)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ==  2)  {	  if(length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
48	[BUG]  [BUGGY]  if(length  ||  length  ==  2)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  length  ==  2)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  length  ==  2)  {	  if(allNUL    ||    length    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
49	[BUG]  [BUGGY]  if(length  ||  offset  ==  2)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  offset  ==  2)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  offset  ==  2)  {	  if(allNUL    ||    length    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
50	[BUG]  [BUGGY]  if(length  ||  end  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  end  ==  2)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  end  ==  2)  {	  if(allNUL    ||    length    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
51	[BUG]  [BUGGY]  if(length  ||  start  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  start  ==  2)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  start  ==  2)  {	  if(allNUL    ||    length    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
52	[BUG]  [BUGGY]  if(start  <  end  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  <  end  ||  end  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  <  end  ||  end  >  buffer[start])  {	  if(allNUL    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
53	[BUG]  [BUGGY]  if(length  >  buffer[start]  ||  end  >  allNUL)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >  buffer[start]  ||  end  >  allNUL)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >  buffer[start]  ||  end  >  allNUL)  {	  if(allNUL    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
54	[BUG]  [BUGGY]  if(end  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(end  ||  end  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(end  ||  end  >  buffer[start])  {	  if(allNUL    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
55	[BUG]  [BUGGY]  if(!allNUL  &&  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  &&  end  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  &&  end  >  buffer[start])  {	  if(allNUL    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
56	[BUG]  [BUGGY]  if(end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(end  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(end  >  buffer[start])  {	  if(allNUL    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
57	[BUG]  [BUGGY]  if(start  >=  end  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  >=  end  ||  end  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  >=  end  ||  end  >  buffer[start])  {	  if(allNUL    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
58	[BUG]  [BUGGY]  if(allNUL  &&  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  &&  end  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  &&  end  >  buffer[start])  {	  if(allNUL    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
59	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
60	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
61	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])buffer.clone();  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  byte[]  buffer  =(byte[])buffer.clone();  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	byte[]  buffer  =(byte[])buffer.clone();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
62	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
63	[BUG]  [BUGGY]  byte[]  buffer  =  new  byte[length  +  1];  [CE]  illegal  start  of  expression  [FE]                            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  byte[]  buffer  =  new  byte[length  +  1];  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	byte[]  buffer  =  new  byte[length  +  1];	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
64	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])buffer.get(i);  [CE]  illegal  start  of  expression  [FE]                              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  byte[]  buffer  =(byte[])buffer.get(i);  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	byte[]  buffer  =(byte[])buffer.get(i);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
65	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  [CE]  illegal  start  of  expression  [FE]                                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
66	[BUG]  [BUGGY]  if(length  >  buffer[start  +  i])  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >  buffer[start  +  i])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >  buffer[start  +  i])  {	  if(allNUL    ||    length    >    buffer[start    +    start])    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
67	[BUG]  [BUGGY]  if(length  >  buffer[start  +  i]  ||  end  >  buffer[start  +  i])  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >  buffer[start  +  i]  ||  end  >  buffer[start  +  i])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >  buffer[start  +  i]  ||  end  >  buffer[start  +  i])  {	  if(allNUL    ||    length    >    buffer[start    +    start])    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
68	[BUG]  [BUGGY]  if(length  >  buffer[start  +  start])  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >  buffer[start  +  start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >  buffer[start  +  start])  {	  if(allNUL    ||    length    >    buffer[start    +    start])    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
69	[BUG]  [BUGGY]  if(length  >  buffer[start  +  i]  ||  length  >  buffer[start  +  i])  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >  buffer[start  +  i]  ||  length  >  buffer[start  +  i])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >  buffer[start  +  i]  ||  length  >  buffer[start  +  i])  {	  if(allNUL    ||    length    >    buffer[start    +    start])    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
70	[BUG]  [BUGGY]  if(start  <  end  ||  length  >  buffer[start  +  start])  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  <  end  ||  length  >  buffer[start  +  start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  <  end  ||  length  >  buffer[start  +  start])  {	  if(allNUL    ||    length    >    buffer[start    +    start])    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
71	[BUG]  [BUGGY]  if(length  <  =  buffer[start  +  start])  {  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  =  buffer[start  +  start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  =  buffer[start  +  start])  {	  if(allNUL    ||    length    >    buffer[start    +    start])    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
72	[BUG]  [BUGGY]  if(length  >  buffer[start  +  i]  ||  length  <  =  buffer[start  +  i])  {  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >  buffer[start  +  i]  ||  length  <  =  buffer[start  +  i])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >  buffer[start  +  i]  ||  length  <  =  buffer[start  +  i])  {	  if(allNUL    ||    length    >    buffer[start    +    start])    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
73	[BUG]  [BUGGY]  if(end  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(end  ==  0)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(end  ==  0)  {	  if(length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
74	[BUG]  [BUGGY]  if(start  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  ==  0)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  ==  0)  {	  if(length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
75	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK  ||  allNUL)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ==  BYTE_MASK  ||  allNUL)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ==  BYTE_MASK  ||  allNUL)  {	  if(allNUL    ||    length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
76	[BUG]  [BUGGY]  if(length  >=  BYTE_MASK  ||  allNUL)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >=  BYTE_MASK  ||  allNUL)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >=  BYTE_MASK  ||  allNUL)  {	  if(allNUL    ||    length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
77	[BUG]  [BUGGY]  if(allNUL  &&  length  ==  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  &&  length  ==  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  &&  length  ==  BYTE_MASK)  {	  if(allNUL    ||    length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
78	[BUG]  [BUGGY]  if(length!=  BYTE_MASK  ||  allNUL)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length!=  BYTE_MASK  ||  allNUL)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length!=  BYTE_MASK  ||  allNUL)  {	  if(allNUL    ||    length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
79	[BUG]  [BUGGY]  if(start  <  =  end  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  <  =  end  ||  end  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  <  =  end  ||  end  >  buffer[start])  {	  if(allNUL    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
80	[BUG]  [BUGGY]  if(allNUL  &&  start  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  &&  start  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  &&  start  >  buffer[start])  {	  if(allNUL    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
81	[BUG]  [BUGGY]  if(length  ==  2  ||  allNUL)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ==  2  ||  allNUL)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ==  2  ||  allNUL)  {	  if(allNUL    ||    length    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
82	[BUG]  [BUGGY]  if(length  ==  2  ||  start  ==  allNUL)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ==  2  ||  start  ==  allNUL)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ==  2  ||  start  ==  allNUL)  {	  if(allNUL    ||    length    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
83	[BUG]  [BUGGY]  if(allNUL  &&  length  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  &&  length  ==  2)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  &&  length  ==  2)  {	  if(allNUL    ||    length    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
84	[BUG]  [BUGGY]  if(length  ==  2  ||  start  ==  length)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ==  2  ||  start  ==  length)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ==  2  ||  start  ==  length)  {	  if(allNUL    ||    length    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
85	[BUG]  [BUGGY]  if(length  ==  2  ||  start  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ==  2  ||  start  ==  end)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ==  2  ||  start  ==  end)  {	  if(allNUL    ||    length    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
86	[BUG]  [BUGGY]  if(allNUL  &&  length  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  &&  length  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  &&  length  >  buffer[start])  {	  if(allNUL    ||    length    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
87	[BUG]  [BUGGY]  if(!allNUL  &&  length  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  &&  length  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  &&  length  >  buffer[start])  {	  if(allNUL    ||    length    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
88	[BUG]  [BUGGY]  if(!allNUL  &&  start  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  &&  start  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  &&  start  >  buffer[start])  {	  if(allNUL    ||    length    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
89	[BUG]  [BUGGY]  if(start  <  length  ||  length  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  <  length  ||  length  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  <  length  ||  length  >  buffer[start])  {	  if(allNUL    ||    length    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
90	[BUG]  [BUGGY]  if(!allNUL  &&  start  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  &&  start  <  =  length)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  &&  start  <  =  length)  {	  if(!allNUL)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
91	[BUG]  [BUGGY]  if(!allNUL  &&  start  >=  length)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  &&  start  >=  length)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  &&  start  >=  length)  {	  if(!allNUL)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
92	[BUG]  [BUGGY]  if(!allNUL  &&  start  >  end)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  &&  start  >  end)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  &&  start  >  end)  {	  if(!allNUL)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
93	[BUG]  [BUGGY]  if(allNUL  &&  length  <  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  &&  length  <  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  &&  length  <  BYTE_MASK)  {	  if(allNUL    ||    length    <    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
94	[BUG]  [BUGGY]  if(length  >  BYTE_MASK  ||  allNUL)  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >  BYTE_MASK  ||  allNUL)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >  BYTE_MASK  ||  allNUL)  {	  if(allNUL    ||    length    <    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
95	[BUG]  [BUGGY]  if(!allNUL  &&  length  <  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  &&  length  <  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  &&  length  <  BYTE_MASK)  {	  if(allNUL    ||    length    <    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
96	[BUG]  [BUGGY]  if(length  <  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  BYTE_MASK)  {	  if(allNUL    ||    length    <    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
97	[BUG]  [BUGGY]  if(length  >  BYTE_MASK  ||  end  <  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >  BYTE_MASK  ||  end  <  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >  BYTE_MASK  ||  end  <  BYTE_MASK)  {	  if(allNUL    ||    length    <    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
98	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  start,  end);  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  start,  end);  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	System.arraycopy(buffer,  start,  buffer,  start,  end);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  start  +  1,  end);  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  start  +  1,  end);  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	System.arraycopy(buffer,  start,  buffer,  start  +  1,  end);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
100	[BUG]  [BUGGY]  if(start  ==  0  ||  end  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  ==  0  ||  end  ==  0)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  ==  0  ||  end  ==  0)  {	  if(length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
101	[BUG]  [BUGGY]  if(start  >=  0)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  >=  0)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  >=  0)  {	  if(length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
102	[BUG]  [BUGGY]  if(start  ==  0  ||  end  ==  -1)  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  ==  0  ||  end  ==  -1)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  ==  0  ||  end  ==  -1)  {	  if(length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
103	[BUG]  [BUGGY]  if(start  >  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  >  0)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  >  0)  {	  if(length    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
104	[BUG]  [BUGGY]  if(start  ==  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  ==  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  ==  BYTE_MASK)  {	  if(length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
105	[BUG]  [BUGGY]  if(start  ==  BYTE_MASK  ||  end  ==  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  ==  BYTE_MASK  ||  end  ==  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  ==  BYTE_MASK  ||  end  ==  BYTE_MASK)  {	  if(length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
106	[BUG]  [BUGGY]  if(end  ==  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(end  ==  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(end  ==  BYTE_MASK)  {	  if(length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
107	[BUG]  [BUGGY]  if(length  ==  =  0)  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ==  =  0)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ==  =  0)  {	  if(length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
108	[BUG]  [BUGGY]  if(start  >=  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  >=  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  >=  BYTE_MASK)  {	  if(length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
109	[BUG]  [BUGGY]  if(allNUL  &&  length  >  buffer[start  +  start])  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  &&  length  >  buffer[start  +  start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  &&  length  >  buffer[start  +  start])  {	  if(allNUL    ||    length    >    buffer[start    +    start])    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
110	[BUG]  [BUGGY]  if(length  >=  buffer[start  +  start])  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >=  buffer[start  +  start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >=  buffer[start  +  start])  {	  if(allNUL    ||    length    >    buffer[start    +    start])    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
111	[BUG]  [BUGGY]  if(allNUL  &&  start  >  buffer[start  +  start])  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  &&  start  >  buffer[start  +  start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  &&  start  >  buffer[start  +  start])  {	  if(allNUL    ||    length    >    buffer[start    +    start])    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
112	[BUG]  [BUGGY]  if(length  ==  buffer[start  +  start])  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ==  buffer[start  +  start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ==  buffer[start  +  start])  {	  if(allNUL    ||    length    >    buffer[start    +    start])    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
113	[BUG]  [BUGGY]  if(allNUL  &&  length  ==  1)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  &&  length  ==  1)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  &&  length  ==  1)  {	  if(allNUL    ||    length    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
114	[BUG]  [BUGGY]  if(length  ==  1  ||  allNUL)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ==  1  ||  allNUL)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ==  1  ||  allNUL)  {	  if(allNUL    ||    length    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
115	[BUG]  [BUGGY]  if(length  ||  start  ==  end)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ||  start  ==  end)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ||  start  ==  end)  {	  if(allNUL    ||    length    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
116	[BUG]  [BUGGY]  if(allNUL  &&  length  <  =  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  &&  length  <  =  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  &&  length  <  =  BYTE_MASK)  {	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
117	[BUG]  [BUGGY]  if(!allNUL  &&  length  <  =  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  &&  length  <  =  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  &&  length  <  =  BYTE_MASK)  {	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
118	[BUG]  [BUGGY]  if(length  >=  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >=  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >=  BYTE_MASK)  {	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
119	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  <  0  ||  end  >  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  <  0  ||  end  >  buffer[start])  {	  if(length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
120	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer[start  +  start])  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  <  0  ||  end  >  buffer[start  +  start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  <  0  ||  end  >  buffer[start  +  start])  {	  if(length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
121	[BUG]  [BUGGY]  if(start  ==  end)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  ==  end)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  ==  end)  {	  if(length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
122	[BUG]  [BUGGY]  if(allNUL  ||  end  >  buffer[start  +  start])  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  ||  end  >  buffer[start  +  start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  ||  end  >  buffer[start  +  start])  {	  if(allNUL    ||    length    >    buffer[start    +    start])    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
123	[BUG]  [BUGGY]  if(allNUL  ||  length  >  buffer[start  +  end])  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  ||  length  >  buffer[start  +  end])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  ||  length  >  buffer[start  +  end])  {	  if(allNUL    ||    length    >    buffer[start    +    start])    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
124	[BUG]  [BUGGY]  if(allNUL  ||  length  <  buffer[start  +  start])  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  ||  length  <  buffer[start  +  start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  ||  length  <  buffer[start  +  start])  {	  if(allNUL    ||    length    >    buffer[start    +    start])    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
125	[BUG]  [BUGGY]  if(end  <  =  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(end  <  =  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(end  <  =  BYTE_MASK)  {	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
126	[BUG]  [BUGGY]  if(allNUL  ||  length  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  ||  length  <  =  1)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  ||  length  <  =  1)  {	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
127	[BUG]  [BUGGY]  if(end  <  BYTE_MASK  ||  length  <  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(end  <  BYTE_MASK  ||  length  <  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(end  <  BYTE_MASK  ||  length  <  BYTE_MASK)  {	  if(allNUL    ||    length    <    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
128	[BUG]  [BUGGY]  if(end  <  BYTE_MASK  ||  allNUL)  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(end  <  BYTE_MASK  ||  allNUL)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(end  <  BYTE_MASK  ||  allNUL)  {	  if(allNUL    ||    length    <    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
129	[BUG]  [BUGGY]  if(allNUL  ||  end  <  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  ||  end  <  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  ||  end  <  buffer[start])  {	  if(allNUL    ||    end    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
130	[BUG]  [BUGGY]  if(length  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  =  length)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  =  length)  {	  if(allNUL    ||    length    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
131	[BUG]  [BUGGY]  if(length  >=  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  >=  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  >=  buffer[start])  {	  if(allNUL    ||    length    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
132	[BUG]  [BUGGY]  if(allNUL  ||  length  ==  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  ||  length  ==  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  ||  length  ==  buffer[start])  {	  if(allNUL    ||    length    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
133	[BUG]  [BUGGY]  if(length  <  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  buffer[start])  {	  if(allNUL    ||    length    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
134	[BUG]  [BUGGY]  if(allNUL  ||  length  <  buffer[start])  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(allNUL  ||  length  <  buffer[start])  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(allNUL  ||  length  <  buffer[start])  {	  if(allNUL    ||    length    >    buffer[start])    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
135	[BUG]  [BUGGY]  if(length  ==  2  ||  end  ==  2)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ==  2  ||  end  ==  2)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ==  2  ||  end  ==  2)  {	  if(allNUL    ||    length    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
136	[BUG]  [BUGGY]  if(length  ==  2  ||  length  ==  2)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ==  2  ||  length  ==  2)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ==  2  ||  length  ==  2)  {	  if(allNUL    ||    length    ==    2)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
137	[BUG]  [BUGGY]  if(length  ==  1  ||  start  ==  end)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ==  1  ||  start  ==  end)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ==  1  ||  start  ==  end)  {	  if(allNUL    ||    length    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
138	[BUG]  [BUGGY]  if(length  ==  1  ||  end  ==  1)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  ==  1  ||  end  ==  1)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  ==  1  ||  end  ==  1)  {	  if(allNUL    ||    length    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
139	[BUG]  [BUGGY]  if(start  ==  start  ||  end  ==  1)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  ==  start  ||  end  ==  1)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  ==  start  ||  end  ==  1)  {	  if(allNUL    ||    length    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
140	[BUG]  [BUGGY]  if(!allNUL  &&  length  >  0)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  &&  length  >  0)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  &&  length  >  0)  {	  if(!allNUL)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
141	[BUG]  [BUGGY]  if(!allNUL  &&  end  >  0)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  &&  end  >  0)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  &&  end  >  0)  {	  if(!allNUL)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
142	[BUG]  [BUGGY]  byte[]  start  =  buffer.get(offset);  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  byte[]  start  =  buffer.get(offset);  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	byte[]  start  =  buffer.get(offset);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
143	[BUG]  [BUGGY]  int  start  =  buffer.length  -  start;  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  int  start  =  buffer.length  -  start;  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	int  start  =  buffer.length  -  start;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
144	[BUG]  [BUGGY]  if(end  ==  BYTE_MASK  ||  length  ==  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(end  ==  BYTE_MASK  ||  length  ==  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(end  ==  BYTE_MASK  ||  length  ==  BYTE_MASK)  {	  if(allNUL    ||    length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
145	[BUG]  [BUGGY]  if(!allNUL  &&  length  ==  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(!allNUL  &&  length  ==  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(!allNUL  &&  length  ==  BYTE_MASK)  {	  if(allNUL    ||    length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
146	[BUG]  [BUGGY]  if(length  <  BYTE_MASK  ||  allNUL  ||  length  ==  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(length  <  BYTE_MASK  ||  allNUL  ||  length  ==  BYTE_MASK)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(length  <  BYTE_MASK  ||  allNUL  ||  length  ==  BYTE_MASK)  {	  if(allNUL    ||    length    ==    BYTE_MASK)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
147	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  buffer[start]  =='')  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  buffer[start]  =='')  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  <  0  ||  end  >  buffer.length  ||  buffer[start]  =='')  {	  if(length    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
148	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }    [BUGGY]  if(start  <  0  ||  end  >  buffer.length)  {  [BUGGY]    return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  }  else  {  break;  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	if(start  <  0  ||  end  >  buffer.length)  {	  if(length    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
