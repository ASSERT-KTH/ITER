bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] longresult = 0; [FE] IOException [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { [BUGGY] longresult = 0; [BUGGY] int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	
2	[BUG] [BUGGY] [FE] IOException [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { [BUGGY] [BUGGY] longresult = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	add	
3	[BUG] [BUGGY] int end = offset + length; [FE] IOException [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; [BUGGY] int end = offset + length; [BUGGY] int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	
4	[BUG] [BUGGY] [FE] IOException [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; [BUGGY] [BUGGY] int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	add	
5	[BUG] [BUGGY] int start = offset; [FE] IOException [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; [BUGGY] int start = offset; [BUGGY]  if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	59	59	1	replace	
6	[BUG] [BUGGY] [FE] IOException [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; [BUGGY] [BUGGY] int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	59	59	1	add	
7	[BUG] [BUGGY] if (length < 2){ [FE] IOException [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; int start = offset; [BUGGY] if (length < 2){ [BUGGY] throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	
8	[BUG] [BUGGY] [FE] IOException [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; int start = offset; [BUGGY] [BUGGY] if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	add	
9	[BUG] [BUGGY] boolean allNUL = true; [FE] IOException [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } [BUGGY] boolean allNUL = true; [BUGGY] for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }  [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	replace	
10	[BUG] [BUGGY] [FE] IOException [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } [BUGGY] [BUGGY] boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }  [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	65	65	1	add	
11	[BUG] [BUGGY] for (int i = start; i < end; i++){ [FE] IOException [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; [BUGGY] for (int i = start; i < end; i++){ [BUGGY] if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }   [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	
12	[BUG] [BUGGY] [FE] IOException [CONTEXT] public static long parseOctal(final byte[] buffer, final int offset, final int length) { longresult = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; [BUGGY] [BUGGY] for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }   [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	add	
13	[BUG] [BUGGY] if (buffer[i] != 0){ [FE] IOException [CONTEXT] longresult = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ [BUGGY] if (buffer[i] != 0){ [BUGGY] allNUL = false; break; } } if (allNUL) { return 0L; }  while (start < end){ [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	
14	[BUG] [BUGGY] [FE] IOException [CONTEXT] longresult = 0; int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ [BUGGY] [BUGGY] if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }  while (start < end){ [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	add	
15	[BUG] [BUGGY] allNUL = false; [FE] IOException [CONTEXT] int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ [BUGGY] allNUL = false; [BUGGY] break; } } if (allNUL) { return 0L; }  while (start < end){ if (buffer[start] == ' '){ [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	
16	[BUG] [BUGGY] [FE] IOException [CONTEXT] int end = offset + length; int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ [BUGGY] [BUGGY] allNUL = false; break; } } if (allNUL) { return 0L; }  while (start < end){ if (buffer[start] == ' '){ [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	add	
17	[BUG] [BUGGY] break; [FE] IOException [CONTEXT] int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; [BUGGY] break; [BUGGY] } } if (allNUL) { return 0L; }  while (start < end){ if (buffer[start] == ' '){ start++; [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	
18	[BUG] [BUGGY] [FE] IOException [CONTEXT] int start = offset; if (length < 2){ throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; [BUGGY] [BUGGY] break; } } if (allNUL) { return 0L; }  while (start < end){ if (buffer[start] == ' '){ start++; [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	add	
19	[BUG] [BUGGY] if (allNUL) { [FE] IOException [CONTEXT] throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } [BUGGY] if (allNUL) { [BUGGY] return 0L; }  while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	replace	
20	[BUG] [BUGGY] [FE] IOException [CONTEXT] throw new IllegalArgumentException("Length "+length+" must be at least 2"); } boolean allNUL = true; for (int i = start; i < end; i++){ if (buffer[i] != 0){ allNUL = false; break; } } [BUGGY] [BUGGY] if (allNUL) { return 0L; }  while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	72	72	1	add	
21	[BUG] [BUGGY] while (start < end){ [FE] IOException [CONTEXT] if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }  [BUGGY] while (start < end){ [BUGGY] if (buffer[start] == ' '){ start++; } else { break; } }  byte trailer; trailer = buffer[end-1]; [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	77	77	1	replace	
22	[BUG] [BUGGY] [FE] IOException [CONTEXT] if (buffer[i] != 0){ allNUL = false; break; } } if (allNUL) { return 0L; }  [BUGGY] [BUGGY] while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } }  byte trailer; trailer = buffer[end-1]; [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	77	77	1	add	
23	[BUG] [BUGGY] if (buffer[start] == ' '){ [FE] IOException [CONTEXT] allNUL = false; break; } } if (allNUL) { return 0L; }  while (start < end){ [BUGGY] if (buffer[start] == ' '){ [BUGGY] start++; } else { break; } }  byte trailer; trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	78	78	1	replace	
24	[BUG] [BUGGY] [FE] IOException [CONTEXT] allNUL = false; break; } } if (allNUL) { return 0L; }  while (start < end){ [BUGGY] [BUGGY] if (buffer[start] == ' '){ start++; } else { break; } }  byte trailer; trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	78	78	1	add	
25	[BUG] [BUGGY] trailer = buffer[end-1]; [FE] IOException [CONTEXT] while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } }  byte trailer; [BUGGY] trailer = buffer[end-1]; [BUGGY] if (trailer == 0 || trailer == ' '){ end--; } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); }  trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	87	87	1	replace	
26	[BUG] [BUGGY] [FE] IOException [CONTEXT] while (start < end){ if (buffer[start] == ' '){ start++; } else { break; } }  byte trailer; [BUGGY] [BUGGY] trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); }  trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	87	87	1	add	
27	[BUG] [BUGGY] if (trailer == 0 || trailer == ' '){ [FE] IOException [CONTEXT] if (buffer[start] == ' '){ start++; } else { break; } }  byte trailer; trailer = buffer[end-1]; [BUGGY] if (trailer == 0 || trailer == ' '){ [BUGGY] end--; } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); }  trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	88	88	1	replace	
28	[BUG] [BUGGY] [FE] IOException [CONTEXT] if (buffer[start] == ' '){ start++; } else { break; } }  byte trailer; trailer = buffer[end-1]; [BUGGY] [BUGGY] if (trailer == 0 || trailer == ' '){ end--; } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); }  trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	88	88	1	add	
29	[BUG] [BUGGY] end--; [FE] IOException [CONTEXT] start++; } else { break; } }  byte trailer; trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ [BUGGY] end--; [BUGGY] } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); }  trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; }  [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	89	89	1	replace	
30	[BUG] [BUGGY] [FE] IOException [CONTEXT] start++; } else { break; } }  byte trailer; trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ [BUGGY] [BUGGY] end--; } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); }  trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; }  [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	89	89	1	add	
31	[BUG] [BUGGY] trailer = buffer[end-1]; [FE] IOException [CONTEXT]  byte trailer; trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); }  [BUGGY] trailer = buffer[end-1]; [BUGGY] if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	95	95	1	replace	
32	[BUG] [BUGGY] [FE] IOException [CONTEXT]  byte trailer; trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); }  [BUGGY] [BUGGY] trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	95	95	1	add	
33	[BUG] [BUGGY] if (trailer == 0 || trailer == ' '){ [FE] IOException [CONTEXT] byte trailer; trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); }  trailer = buffer[end-1]; [BUGGY] if (trailer == 0 || trailer == ' '){ [BUGGY] end--; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	96	96	1	replace	
34	[BUG] [BUGGY] [FE] IOException [CONTEXT] byte trailer; trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); }  trailer = buffer[end-1]; [BUGGY] [BUGGY] if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	96	96	1	add	
35	[BUG] [BUGGY] end--; [FE] IOException [CONTEXT] trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); }  trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ [BUGGY] end--; [BUGGY] } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	97	97	1	replace	
36	[BUG] [BUGGY] [FE] IOException [CONTEXT] trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); }  trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ [BUGGY] [BUGGY] end--; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	97	97	1	add	
37	[BUG] [BUGGY] for ( ;start < end; start++) { [FE] IOException [CONTEXT] } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); }  trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } [BUGGY] for ( ;start < end; start++) { [BUGGY] final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  }  [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	100	100	1	replace	
38	[BUG] [BUGGY] [FE] IOException [CONTEXT] } else { throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); }  trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } [BUGGY] [BUGGY] for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  }  [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	100	100	1	add	
39	[BUG] [BUGGY] final byte currentByte = buffer[start]; [FE] IOException [CONTEXT] throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); }  trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) { [BUGGY] final byte currentByte = buffer[start]; [BUGGY]  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  } return result; [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	101	101	1	replace	
40	[BUG] [BUGGY] [FE] IOException [CONTEXT] throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, end-1, trailer)); }  trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) { [BUGGY] [BUGGY] final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  } return result; [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	101	101	1	add	
41	[BUG] [BUGGY] if (currentByte < '0' || currentByte > '7'){ [FE] IOException [CONTEXT] }  trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  [BUGGY] if (currentByte < '0' || currentByte > '7'){ [BUGGY] throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  } return result; } [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	103	103	1	replace	
42	[BUG] [BUGGY] [FE] IOException [CONTEXT] }  trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  [BUGGY] [BUGGY] if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  } return result; } [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	103	103	1	add	
43	[BUG] [BUGGY] throw new IllegalArgumentException(  exceptionMessage(buffer, offset, length, start, currentByte)); [FE] IOException [CONTEXT]  trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ [BUGGY] throw new IllegalArgumentException(      exceptionMessage(buffer, offset, length, start, currentByte)); [BUGGY] exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  } return result; } [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	104	105	1	replace	
44	[BUG] [BUGGY] [FE] IOException [CONTEXT]  trailer = buffer[end-1]; if (trailer == 0 || trailer == ' '){ end--; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ [BUGGY] [BUGGY] throw new IllegalArgumentException(      exceptionMessage(buffer, offset, length, start, currentByte)); exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  } return result; } [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	104	105	1	add	
45	[BUG] [BUGGY] result = (result << 3) + (currentByte - '0'); // convert from ASCII // CheckStyle:MagicNumber ON } [FE] IOException [CONTEXT] end--; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } [BUGGY] result = (result << 3) + (currentByte - '0'); // convert from ASCII   // CheckStyle:MagicNumber ON    } [BUGGY]  } return result; } [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	107	109	1	replace	
46	[BUG] [BUGGY] [FE] IOException [CONTEXT] end--; } for ( ;start < end; start++) { final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } [BUGGY] [BUGGY] result = (result << 3) + (currentByte - '0'); // convert from ASCII   // CheckStyle:MagicNumber ON    }  } return result; } [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	107	109	1	add	
47	[BUG] [BUGGY] return result; [FE] IOException [CONTEXT] final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  } [BUGGY] return result; [BUGGY] } [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	111	111	1	replace	
48	[BUG] [BUGGY] [FE] IOException [CONTEXT] final byte currentByte = buffer[start];  if (currentByte < '0' || currentByte > '7'){ throw new IllegalArgumentException( exceptionMessage(buffer, offset, length, start, currentByte)); } result = (result << 3) + (currentByte - '0'); // convert from ASCII  } [BUGGY] [BUGGY] return result; } [CLASS] TarUtils [METHOD] parseOctal [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean allNUL int BYTE_MASK end i length offset start long result byte currentByte trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	111	111	1	add	
49	[BUG] [BUGGY] if ((buffer[offset] & 0x80) == 0) { [FE] IOException [CONTEXT] public static long parseOctalOrBinary(final byte[] buffer, final int offset, final int length) { [BUGGY] if ((buffer[offset] & 0x80) == 0) { [BUGGY] return parseOctal(buffer, offset, length); } long val = buffer[offset] & 0x7f; for (int i = 1; i < length; i++) { if (val >= (1L << (63 - 8))) { throw new IllegalArgumentException( "At offset " + offset + ", " + length + " byte " + "binary number exceeds maximum signed long value"); } [CLASS] TarUtils [METHOD] parseOctalOrBinary [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean int BYTE_MASK end i length offset start long val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	
50	[BUG] [BUGGY] [FE] IOException [CONTEXT] public static long parseOctalOrBinary(final byte[] buffer, final int offset, final int length) { [BUGGY] [BUGGY] if ((buffer[offset] & 0x80) == 0) { return parseOctal(buffer, offset, length); } long val = buffer[offset] & 0x7f; for (int i = 1; i < length; i++) { if (val >= (1L << (63 - 8))) { throw new IllegalArgumentException( "At offset " + offset + ", " + length + " byte " + "binary number exceeds maximum signed long value"); } [CLASS] TarUtils [METHOD] parseOctalOrBinary [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean int BYTE_MASK end i length offset start long val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	add	
51	[BUG] [BUGGY] return parseOctal(buffer, offset, length); [FE] IOException [CONTEXT] public static long parseOctalOrBinary(final byte[] buffer, final int offset, final int length) { if ((buffer[offset] & 0x80) == 0) { [BUGGY] return parseOctal(buffer, offset, length); [BUGGY] } long val = buffer[offset] & 0x7f; for (int i = 1; i < length; i++) { if (val >= (1L << (63 - 8))) { throw new IllegalArgumentException( "At offset " + offset + ", " + length + " byte " + "binary number exceeds maximum signed long value"); } val = (val << 8) + (buffer[offset + i] & 0xff); [CLASS] TarUtils [METHOD] parseOctalOrBinary [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean int BYTE_MASK end i length offset start long val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	
52	[BUG] [BUGGY] [FE] IOException [CONTEXT] public static long parseOctalOrBinary(final byte[] buffer, final int offset, final int length) { if ((buffer[offset] & 0x80) == 0) { [BUGGY] [BUGGY] return parseOctal(buffer, offset, length); } long val = buffer[offset] & 0x7f; for (int i = 1; i < length; i++) { if (val >= (1L << (63 - 8))) { throw new IllegalArgumentException( "At offset " + offset + ", " + length + " byte " + "binary number exceeds maximum signed long value"); } val = (val << 8) + (buffer[offset + i] & 0xff); [CLASS] TarUtils [METHOD] parseOctalOrBinary [RETURN_TYPE] long  final byte[] buffer final int offset final int length [VARIABLES] byte[] buffer boolean int BYTE_MASK end i length offset start long val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	add	
53	[BUG] [BUGGY] String string = new String(buffer, offset, length); [FE] IOException [CONTEXT] private static String exceptionMessage(byte[] buffer, final int offset, final int length, int current, final byte currentByte) { [BUGGY] String string = new String(buffer, offset, length); [BUGGY] string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; return s; } [CLASS] TarUtils [METHOD] exceptionMessage [RETURN_TYPE] String  byte[] buffer final int offset final int length int current final byte currentByte [VARIABLES] byte[] buffer String s string boolean int BYTE_MASK current end i length offset start byte currentByte  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	167	167	1	replace	
54	[BUG] [BUGGY] [FE] IOException [CONTEXT] private static String exceptionMessage(byte[] buffer, final int offset, final int length, int current, final byte currentByte) { [BUGGY] [BUGGY] String string = new String(buffer, offset, length); string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; return s; } [CLASS] TarUtils [METHOD] exceptionMessage [RETURN_TYPE] String  byte[] buffer final int offset final int length int current final byte currentByte [VARIABLES] byte[] buffer String s string boolean int BYTE_MASK current end i length offset start byte currentByte  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	167	167	1	add	
55	[BUG] [BUGGY] string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; [FE] IOException [CONTEXT] private static String exceptionMessage(byte[] buffer, final int offset, final int length, int current, final byte currentByte) { String string = new String(buffer, offset, length); [BUGGY] string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed  final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; [BUGGY] final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; return s; } [CLASS] TarUtils [METHOD] exceptionMessage [RETURN_TYPE] String  byte[] buffer final int offset final int length int current final byte currentByte [VARIABLES] byte[] buffer String s string boolean int BYTE_MASK current end i length offset start byte currentByte  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	168	169	1	replace	
56	[BUG] [BUGGY] [FE] IOException [CONTEXT] private static String exceptionMessage(byte[] buffer, final int offset, final int length, int current, final byte currentByte) { String string = new String(buffer, offset, length); [BUGGY] [BUGGY] string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed  final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; return s; } [CLASS] TarUtils [METHOD] exceptionMessage [RETURN_TYPE] String  byte[] buffer final int offset final int length int current final byte currentByte [VARIABLES] byte[] buffer String s string boolean int BYTE_MASK current end i length offset start byte currentByte  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	168	169	1	add	
57	[BUG] [BUGGY] final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; [FE] IOException [CONTEXT] private static String exceptionMessage(byte[] buffer, final int offset, final int length, int current, final byte currentByte) { String string = new String(buffer, offset, length); string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed [BUGGY] final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; [BUGGY] return s; } [CLASS] TarUtils [METHOD] exceptionMessage [RETURN_TYPE] String  byte[] buffer final int offset final int length int current final byte currentByte [VARIABLES] byte[] buffer String s string boolean int BYTE_MASK current end i length offset start byte currentByte  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	169	169	1	replace	
58	[BUG] [BUGGY] [FE] IOException [CONTEXT] private static String exceptionMessage(byte[] buffer, final int offset, final int length, int current, final byte currentByte) { String string = new String(buffer, offset, length); string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed [BUGGY] [BUGGY] final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; return s; } [CLASS] TarUtils [METHOD] exceptionMessage [RETURN_TYPE] String  byte[] buffer final int offset final int length int current final byte currentByte [VARIABLES] byte[] buffer String s string boolean int BYTE_MASK current end i length offset start byte currentByte  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	169	169	1	add	
59	[BUG] [BUGGY] return s; [FE] IOException [CONTEXT] private static String exceptionMessage(byte[] buffer, final int offset, final int length, int current, final byte currentByte) { String string = new String(buffer, offset, length); string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; [BUGGY] return s; [BUGGY] } [CLASS] TarUtils [METHOD] exceptionMessage [RETURN_TYPE] String  byte[] buffer final int offset final int length int current final byte currentByte [VARIABLES] byte[] buffer String s string boolean int BYTE_MASK current end i length offset start byte currentByte  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	170	170	1	replace	
60	[BUG] [BUGGY] [FE] IOException [CONTEXT] private static String exceptionMessage(byte[] buffer, final int offset, final int length, int current, final byte currentByte) { String string = new String(buffer, offset, length); string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length; [BUGGY] [BUGGY] return s; } [CLASS] TarUtils [METHOD] exceptionMessage [RETURN_TYPE] String  byte[] buffer final int offset final int length int current final byte currentByte [VARIABLES] byte[] buffer String s string boolean int BYTE_MASK current end i length offset start byte currentByte  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	170	170	1	add	
61	[BUG] [BUGGY] StringBuffer result = new StringBuffer(length); [FE] IOException [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length) { [BUGGY] StringBuffer result = new StringBuffer(length); [BUGGY] intend = offset + length; for (int i = offset; i < end; ++i) { byte b = buffer[i]; if (b == 0) { // Trailing null break; } result.append((char) (b & 0xFF)); // Allow for sign-extension }  [CLASS] TarUtils [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer StringBuffer result boolean int BYTE_MASK current end i length offset start byte b  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	184	184	1	replace	
62	[BUG] [BUGGY] [FE] IOException [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length) { [BUGGY] [BUGGY] StringBuffer result = new StringBuffer(length); intend = offset + length; for (int i = offset; i < end; ++i) { byte b = buffer[i]; if (b == 0) { // Trailing null break; } result.append((char) (b & 0xFF)); // Allow for sign-extension }  [CLASS] TarUtils [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer StringBuffer result boolean int BYTE_MASK current end i length offset start byte b  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	184	184	1	add	
63	[BUG] [BUGGY] intend = offset + length; [FE] IOException [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length) { StringBuffer result = new StringBuffer(length); [BUGGY] intend = offset + length; [BUGGY]  for (int i = offset; i < end; ++i) { byte b = buffer[i]; if (b == 0) { // Trailing null break; } result.append((char) (b & 0xFF)); // Allow for sign-extension } return result.toString(); [CLASS] TarUtils [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer StringBuffer result boolean int BYTE_MASK current end i length offset start byte b  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	185	185	1	replace	
64	[BUG] [BUGGY] [FE] IOException [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length) { StringBuffer result = new StringBuffer(length); [BUGGY] [BUGGY] intend = offset + length; for (int i = offset; i < end; ++i) { byte b = buffer[i]; if (b == 0) { // Trailing null break; } result.append((char) (b & 0xFF)); // Allow for sign-extension } return result.toString(); [CLASS] TarUtils [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer StringBuffer result boolean int BYTE_MASK current end i length offset start byte b  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	185	185	1	add	
65	[BUG] [BUGGY] for (int i = offset; i < end; ++i) { [FE] IOException [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length) { StringBuffer result = new StringBuffer(length); intend = offset + length; [BUGGY] for (int i = offset; i < end; ++i) { [BUGGY] byte b = buffer[i]; if (b == 0) { // Trailing null break; } result.append((char) (b & 0xFF)); // Allow for sign-extension } return result.toString(); } [CLASS] TarUtils [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer StringBuffer result boolean int BYTE_MASK current end i length offset start byte b  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	187	187	1	replace	
66	[BUG] [BUGGY] [FE] IOException [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length) { StringBuffer result = new StringBuffer(length); intend = offset + length; [BUGGY] [BUGGY] for (int i = offset; i < end; ++i) { byte b = buffer[i]; if (b == 0) { // Trailing null break; } result.append((char) (b & 0xFF)); // Allow for sign-extension } return result.toString(); } [CLASS] TarUtils [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer StringBuffer result boolean int BYTE_MASK current end i length offset start byte b  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	187	187	1	add	
67	[BUG] [BUGGY] byte b = buffer[i]; [FE] IOException [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length) { StringBuffer result = new StringBuffer(length); intend = offset + length; for (int i = offset; i < end; ++i) { [BUGGY] byte b = buffer[i]; [BUGGY] if (b == 0) { // Trailing null break; } result.append((char) (b & 0xFF)); // Allow for sign-extension } return result.toString(); } [CLASS] TarUtils [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer StringBuffer result boolean int BYTE_MASK current end i length offset start byte b  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	188	188	1	replace	
68	[BUG] [BUGGY] [FE] IOException [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length) { StringBuffer result = new StringBuffer(length); intend = offset + length; for (int i = offset; i < end; ++i) { [BUGGY] [BUGGY] byte b = buffer[i]; if (b == 0) { // Trailing null break; } result.append((char) (b & 0xFF)); // Allow for sign-extension } return result.toString(); } [CLASS] TarUtils [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer StringBuffer result boolean int BYTE_MASK current end i length offset start byte b  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	188	188	1	add	
69	[BUG] [BUGGY] if (b == 0) { // Trailing null break; [FE] IOException [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length) { StringBuffer result = new StringBuffer(length); intend = offset + length; for (int i = offset; i < end; ++i) { byte b = buffer[i]; [BUGGY] if (b == 0) { // Trailing null    break; [BUGGY] break; } result.append((char) (b & 0xFF)); // Allow for sign-extension } return result.toString(); } [CLASS] TarUtils [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer StringBuffer result boolean int BYTE_MASK current end i length offset start byte b  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	189	190	1	replace	
70	[BUG] [BUGGY] [FE] IOException [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length) { StringBuffer result = new StringBuffer(length); intend = offset + length; for (int i = offset; i < end; ++i) { byte b = buffer[i]; [BUGGY] [BUGGY] if (b == 0) { // Trailing null    break; break; } result.append((char) (b & 0xFF)); // Allow for sign-extension } return result.toString(); } [CLASS] TarUtils [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer StringBuffer result boolean int BYTE_MASK current end i length offset start byte b  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	189	190	1	add	
71	[BUG] [BUGGY] break; [FE] IOException [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length) { StringBuffer result = new StringBuffer(length); intend = offset + length; for (int i = offset; i < end; ++i) { byte b = buffer[i]; if (b == 0) { // Trailing null [BUGGY] break; [BUGGY] } result.append((char) (b & 0xFF)); // Allow for sign-extension } return result.toString(); } [CLASS] TarUtils [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer StringBuffer result boolean int BYTE_MASK current end i length offset start byte b  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	190	190	1	replace	
72	[BUG] [BUGGY] [FE] IOException [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length) { StringBuffer result = new StringBuffer(length); intend = offset + length; for (int i = offset; i < end; ++i) { byte b = buffer[i]; if (b == 0) { // Trailing null [BUGGY] [BUGGY] break; } result.append((char) (b & 0xFF)); // Allow for sign-extension } return result.toString(); } [CLASS] TarUtils [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer StringBuffer result boolean int BYTE_MASK current end i length offset start byte b  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	190	190	1	add	
73	[BUG] [BUGGY] result.append((char) (b & 0xFF)); // Allow for sign-extension } [FE] IOException [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length) { StringBuffer result = new StringBuffer(length); intend = offset + length; for (int i = offset; i < end; ++i) { byte b = buffer[i]; if (b == 0) { // Trailing null break; } [BUGGY] result.append((char) (b & 0xFF)); // Allow for sign-extension  } [BUGGY] } return result.toString(); } [CLASS] TarUtils [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer StringBuffer result boolean int BYTE_MASK current end i length offset start byte b  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	192	193	1	replace	
74	[BUG] [BUGGY] [FE] IOException [CONTEXT] public static String parseName(byte[] buffer, final int offset, final int length) { StringBuffer result = new StringBuffer(length); intend = offset + length; for (int i = offset; i < end; ++i) { byte b = buffer[i]; if (b == 0) { // Trailing null break; } [BUGGY] [BUGGY] result.append((char) (b & 0xFF)); // Allow for sign-extension  } } return result.toString(); } [CLASS] TarUtils [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer StringBuffer result boolean int BYTE_MASK current end i length offset start byte b  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	192	193	1	add	
75	[BUG] [BUGGY] return result.toString(); [FE] IOException [CONTEXT] intend = offset + length; for (int i = offset; i < end; ++i) { byte b = buffer[i]; if (b == 0) { // Trailing null break; } result.append((char) (b & 0xFF)); // Allow for sign-extension } [BUGGY] return result.toString(); [BUGGY] } [CLASS] TarUtils [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer StringBuffer result boolean int BYTE_MASK current end i length offset start byte b  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	195	195	1	replace	
76	[BUG] [BUGGY] [FE] IOException [CONTEXT] intend = offset + length; for (int i = offset; i < end; ++i) { byte b = buffer[i]; if (b == 0) { // Trailing null break; } result.append((char) (b & 0xFF)); // Allow for sign-extension } [BUGGY] [BUGGY] return result.toString(); } [CLASS] TarUtils [METHOD] parseName [RETURN_TYPE] String  byte[] buffer final int offset final int length [VARIABLES] byte[] buffer StringBuffer result boolean int BYTE_MASK current end i length offset start byte b  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	195	195	1	add	
