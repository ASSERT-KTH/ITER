bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(length  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  =  1)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  =  1)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  if(length  ==  0)  {  [CE]  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  ==  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  ==  0)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  	5	None	replace
3	[BUG]  [BUGGY]  if(length  >=  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  >=  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  >=  0)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  if(length  <  =  0  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  =  0  ||  end  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  =  0  ||  end  >  buffer.length)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  if(length  <  =  2  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  =  2  ||  end  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  =  2  ||  end  >  buffer.length)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]  if  (start  <  2  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  2  ||  end  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  2  ||  end  >  buffer.length)  {	  if    (length    <    2    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
7	[BUG]  [BUGGY]  if  (end  <  2  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (end  <  2  ||  end  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (end  <  2  ||  end  >  buffer.length)  {	  if    (length    <    2    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
8	[BUG]  [BUGGY]  if  (length  <  1  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (length  <  1  ||  end  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (length  <  1  ||  end  >  buffer.length)  {	  if    (length    <    2    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  if  (length  <  2  ||  end  >  buffer[offset  +  length])  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (length  <  2  ||  end  >  buffer[offset  +  length])  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (length  <  2  ||  end  >  buffer[offset  +  length])  {	  if    (length    <    2    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  if  (end  <  2  ||  start  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (end  <  2  ||  start  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (end  <  2  ||  start  >  buffer.length)  {	  if    (length    <    2    ||    start    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
11	[BUG]  [BUGGY]  if  (start  <  =  2  ||  start  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  =  2  ||  start  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  =  2  ||  start  >  buffer.length)  {	  if    (length    <    2    ||    start    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
12	[BUG]  [BUGGY]  if  (length  <  2  ||  start  ==  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (length  <  2  ||  start  ==  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (length  <  2  ||  start  ==  buffer.length)  {	  if    (length    <    2    ||    start    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
13	[BUG]  [BUGGY]  if  (start  <  2  ||  end  >  buffer.length  ||  start  >  length)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  2  ||  end  >  buffer.length  ||  start  >  length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  2  ||  end  >  buffer.length  ||  start  >  length)  {	  if    (length    <    2    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
14	[BUG]  [BUGGY]  if  (start  <  =  2  ||  start  >  buffer.length  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  =  2  ||  start  >  buffer.length  ||  end  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  =  2  ||  start  >  buffer.length  ||  end  >  buffer.length)  {	  if    (length    <    2    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
15	[BUG]  [BUGGY]  if  (start  <  2  ||  end  >  buffer.length  ||  start  >  end)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  2  ||  end  >  buffer.length  ||  start  >  end)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  2  ||  end  >  buffer.length  ||  start  >  end)  {	  if    (length    <    2    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
16	[BUG]  [BUGGY]  if  (start  <  0  ||  start  >  buffer.length  ||  end  >  length)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  0  ||  start  >  buffer.length  ||  end  >  length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  0  ||  start  >  buffer.length  ||  end  >  length)  {	  if    (length    <    2    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
17	[BUG]  [BUGGY]  if  (start  <  2  ||  start  >  buffer.length  ||  end  >  length)  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  2  ||  start  >  buffer.length  ||  end  >  length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  2  ||  start  >  buffer.length  ||  end  >  length)  {	  if    (length    <    2    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
18	[BUG]  [BUGGY]  if  (start  <  2  ||  start  >  buffer.length  ||  end  >  offset  +  length)  {  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  2  ||  start  >  buffer.length  ||  end  >  offset  +  length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  2  ||  start  >  buffer.length  ||  end  >  offset  +  length)  {	  if    (length    <    2    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
19	[BUG]  [BUGGY]  if(length  <  2  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  2  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  2  ||  end  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
20	[BUG]  [BUGGY]  if(start  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
21	[BUG]  [BUGGY]  if(length  <  2  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  2  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  2  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
22	[BUG]  [BUGGY]  if(length  <  2  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  2  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  2  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
23	[BUG]  [BUGGY]  if(length  <  1  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  1  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  1  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  if(length  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  BYTE_MASK)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  BYTE_MASK)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  if  (length  <  2  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (length  <  2  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (length  <  2  ||  length  >  buffer.length)  {	  if    (length    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
26	[BUG]  [BUGGY]  if(length  <  2  ||  end  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  2  ||  end  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  2  ||  end  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
27	[BUG]  [BUGGY]  if(start  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
28	[BUG]  [BUGGY]  if(length  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  end  >  offset)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  end  >  offset)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  end  >  offset)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
29	[BUG]  [BUGGY]  if(length  <  2  ||  end  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  2  ||  end  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  2  ||  end  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
30	[BUG]  [BUGGY]  if(length  <  2  ||  end  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  offset)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  2  ||  end  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  offset)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  2  ||  end  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  offset)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
31	[BUG]  [BUGGY]  if(length  <  2  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  2  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  2  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
32	[BUG]  [BUGGY]  if(length  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  end)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
33	[BUG]  [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
34	[BUG]  [BUGGY]  final  int  length  =  buffer.length();  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  final  int  length  =  buffer.length();  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	final  int  length  =  buffer.length();	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  length);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
36	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end,  length);  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end,  length);  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end,  length);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
38	[BUG]  [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2. ");  }  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2. ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2. ");  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
40	[BUG]  [BUGGY]  if(start  <  0  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  0  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  0  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
41	[BUG]  [BUGGY]  if(start  <  =  0  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  =  0  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  =  0  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
42	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
43	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  0  ||  end  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
44	[BUG]  [BUGGY]  if(start  <  =  0  ||  end  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  =  0  ||  end  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  =  0  ||  end  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
45	[BUG]  [BUGGY]  if(start  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
46	[BUG]  [BUGGY]  if(start  <  0  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  start  >  length)  {  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  0  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  start  >  length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  0  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  start  >  length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
47	[BUG]  [BUGGY]  if  (start  <  0  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  0  ||  end  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  0  ||  end  >  buffer.length)  {	  if    (length    <    2    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
48	[BUG]  [BUGGY]  if  (start  <  =  0  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  =  0  ||  end  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  =  0  ||  end  >  buffer.length)  {	  if    (length    <    2    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
49	[BUG]  [BUGGY]  if(start  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  =  0)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  =  0)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
50	[BUG]  [BUGGY]  if(length  <  =  0  ||  start  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  =  0  ||  start  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  =  0  ||  start  >  buffer.length)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
51	[BUG]  [BUGGY]  if(start  <  0  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  0  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  0  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
52	[BUG]  [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
53	[BUG]  [BUGGY]  if(start  <  =  0  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  =  0  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  =  0  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
54	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  0  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
55	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  buffer.length  >  length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  0  ||  end  >  buffer.length  ||  buffer.length  >  length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
56	[BUG]  [BUGGY]  if(length  <  2  ||  end  >  buffer.length  ||  buffer.length  >  length)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  2  ||  end  >  buffer.length  ||  buffer.length  >  length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  2  ||  end  >  buffer.length  ||  buffer.length  >  length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
57	[BUG]  [BUGGY]  if  (start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  0  ||  start  >  buffer.length  ||  end  >  buffer.length)  {	  if    (length    <    2    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
58	[BUG]  [BUGGY]  if  (start  <  =  0  ||  start  >  buffer.length  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  =  0  ||  start  >  buffer.length  ||  end  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  =  0  ||  start  >  buffer.length  ||  end  >  buffer.length)  {	  if    (length    <    2    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
59	[BUG]  [BUGGY]  if  (start  <  0  ||  start  >  buffer.length  ||  end  >  offset)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  0  ||  start  >  buffer.length  ||  end  >  offset)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  0  ||  start  >  buffer.length  ||  end  >  offset)  {	  if    (length    <    2    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
60	[BUG]  [BUGGY]  if  (start  <  0  ||  end  >  buffer.length  ||  start  >  end)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  0  ||  end  >  buffer.length  ||  start  >  end)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  0  ||  end  >  buffer.length  ||  start  >  end)  {	  if    (length    <    2    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
61	[BUG]  [BUGGY]  if  (start  <  0  ||  start  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  0  ||  start  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  0  ||  start  >  buffer.length)  {	  if    (length    <    2    ||    start    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
62	[BUG]  [BUGGY]  if  (start  <  =  0  ||  start  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  =  0  ||  start  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  =  0  ||  start  >  buffer.length)  {	  if    (length    <    2    ||    start    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
63	[BUG]  [BUGGY]  if  (length  <  2  ||  end  >  buffer[offset  +  start])  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (length  <  2  ||  end  >  buffer[offset  +  start])  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (length  <  2  ||  end  >  buffer[offset  +  start])  {	  if    (length    <    =    2)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
64	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
65	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
66	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
67	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [CE]  not  a  statement  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);	      	non-compiled	[CE]  not  a  statement	4	None	replace
68	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
69	[BUG]  [BUGGY]  if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
70	[BUG]  [BUGGY]  if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  break;  }  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
71	[BUG]  [BUGGY]  if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  continue;  }  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  continue;  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
72	[BUG]  [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  =  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
73	[BUG]  [BUGGY]  if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  result;  }  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  result;  }  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  0)  {  return  result;  }	      	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
74	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  0  ||  end  >  buffer.length  ||  length  >  buffer.length)  {	  if    (length    <    2    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
75	[BUG]  [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  start  >  length)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  0  ||  end  >  buffer.length  ||  start  >  length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  0  ||  end  >  buffer.length  ||  start  >  length)  {	  if    (length    <    2    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
76	[BUG]  [BUGGY]  if(start  <  =  0  ||  end  >  buffer.length  ||  start  >  length)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(start  <  =  0  ||  end  >  buffer.length  ||  start  >  length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(start  <  =  0  ||  end  >  buffer.length  ||  start  >  length)  {	  if    (length    <    2    ||    start    >    buffer.length    ||    end    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
77	[BUG]  [BUGGY]  if(length  <  =  0  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  =  0  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  =  0  ||  length  >  buffer.length)  {	  if(length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
78	[BUG]  [BUGGY]  if(length  <  =  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  =  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  =  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  if(length  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if    (length    <    1)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
80	[BUG]  [BUGGY]  if(length  <  =  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  =  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  =  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
81	[BUG]  [BUGGY]  if(length  <  1  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  1  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  1  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
82	[BUG]  [BUGGY]  if(length  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  end  >  length)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if(length  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  end  >  length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if(length  <  2  ||  length  >  buffer.length  ||  end  >  buffer.length  ||  length  >  buffer.length  ||  end  >  length)  {	  if(length    <    2    ||    length    >    buffer.length    ||    end    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
83	[BUG]  [BUGGY]  if  (start  <  =  2  ||  end  >  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;    [BUGGY]  if  (start  <  =  2  ||  end  >  buffer.length)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	61	61	1	replace	if  (start  <  =  2  ||  end  >  buffer.length)  {	  if    (length    <    2    ||    start    >    buffer.length)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
