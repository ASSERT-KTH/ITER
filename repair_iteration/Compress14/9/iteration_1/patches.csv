bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
2	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
3	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(i));  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalStateException( " ".equals(i));  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( " ".equals(i));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
4	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(buffer[i]));  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalStateException( " ".equals(buffer[i]));  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( " ".equals(buffer[i]));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
5	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2. ");  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2. ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
6	[BUG]  [BUGGY]  if(allNUL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(allNUL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL)  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  if(allNUL)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(allNUL)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL)  {  throw  new  IllegalStateException( " ");  }	  if(allNUL)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  if(allNUL)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(allNUL)  {  return  0;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL)  {  return  0;  }	  if(allNUL)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.throwInternal();	  if(allNUL)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
10	[BUG]  [BUGGY]  if(allNUL  ||  length  <  =  BYTE_MASK)  {  break;  }  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(allNUL  ||  length  <  =  BYTE_MASK)  {  break;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  length  <  =  BYTE_MASK)  {  break;  }	  if(allNUL)    {    break;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
11	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2.0 ");  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2.0 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2.0 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2. ");  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2. ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
15	[BUG]  [BUGGY]  if(!allNUL)  {  continue;  }  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(!allNUL)  {  continue;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  continue;  }	  continue;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  if(length  >  0)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  >  0)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
17	[BUG]  [BUGGY]  if(length  >  0)  {  continue;  }  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  >  0)  {  continue;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  continue;  }	  continue;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
18	[BUG]  [BUGGY]  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }	  continue;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }	  continue;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
21	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(i));  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(i));  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( " ".equals(i));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
22	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
23	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
24	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
25	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
26	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
27	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
28	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                            IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
29	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
30	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
31	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2.0 ");  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2.0 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2.0 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
32	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
33	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
36	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ",  allNUL);  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ",  allNUL);  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ",  allNUL);	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
37	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ".equals(buffer[i]));  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ".equals(buffer[i]));  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ".equals(buffer[i]));	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
38	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  should  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  should  be  at  least  2 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  should  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
39	[BUG]  [BUGGY]  if(!allNUL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(!allNUL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  throw  new  IllegalArgumentException( " ");  }	  if(!allNUL)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
40	[BUG]  [BUGGY]  if(!allNUL  ||  buffer[i]  =='')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(!allNUL  ||  buffer[i]  =='')  {  break;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  buffer[i]  =='')  {  break;  }	  if(!allNUL)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
41	[BUG]  [BUGGY]  if(!allNUL)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(!allNUL)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  throw  new  IllegalStateException( " ");  }	  if(!allNUL)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
42	[BUG]  [BUGGY]  if(!allNUL  ||  buffer[i]!='')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(!allNUL  ||  buffer[i]!='')  {  break;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  buffer[i]!='')  {  break;  }	  if(!allNUL)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
43	[BUG]  [BUGGY]  if(!allNUL)  {  throw  new  IllegalArgumentException( " ".equals(i));  }  [CE]  illegal  start  of  expression  [FE]                          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(!allNUL)  {  throw  new  IllegalArgumentException( " ".equals(i));  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  throw  new  IllegalArgumentException( " ".equals(i));  }	  if(!allNUL)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
44	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  =='')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  =='')  {  return  0L;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  =='')  {  return  0L;  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
45	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!='')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!='')  {  return  0L;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!='')  {  return  0L;  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
46	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
47	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
48	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2 ");  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
49	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "BYTE_MASK  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "BYTE_MASK  must  be  >  0 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "BYTE_MASK  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
50	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null. ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
51	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  0 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
52	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  0 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
53	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1 ");  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
54	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
55	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2. ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
56	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes. ");  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes. ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes. ");	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
57	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2 ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2 ",  allNUL);  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2 ",  allNUL);	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
58	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
59	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2 ");  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
60	[BUG]  [BUGGY]  if(allNUL  ||  buffer[i]  =='')  {  break;  }  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(allNUL  ||  buffer[i]  =='')  {  break;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  buffer[i]  =='')  {  break;  }	  if(allNUL)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
61	[BUG]  [BUGGY]  if(allNUL  ||  buffer[i]!='')  {  break;  }  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(allNUL  ||  buffer[i]!='')  {  break;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  buffer[i]!='')  {  break;  }	  if(allNUL)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
62	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  ==  BYTE_MASK)  {  continue;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  BYTE_MASK)  {  continue;  }	  continue;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
63	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  continue;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
64	[BUG]  [BUGGY]  if(allNUL)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(allNUL)  {  continue;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL)  {  continue;  }	  continue;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
65	[BUG]  [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  must  be  >  0 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "BYTE_MASK  must  be  >  0 ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
66	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(end));  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalStateException( " ".equals(end));  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( " ".equals(end));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
67	[BUG]  [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
68	[BUG]  [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
69	[BUG]  [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
70	[BUG]  [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [CE]  illegal  start  of  expression  [FE]                          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0;  [CE]  illegal  start  of  expression  [FE]                            IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0;  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
72	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  1 ");  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  1 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  1 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
73	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  two. ");  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  two. ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  two. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
74	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1 ");  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
75	[BUG]  [BUGGY]  if(allNUL  ||  end)  {  break;  }  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(allNUL  ||  end)  {  break;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  end)  {  break;  }	  if(allNUL)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
76	[BUG]  [BUGGY]  if(allNUL  ||  length  <  2)  {  break;  }  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(allNUL  ||  length  <  2)  {  break;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  length  <  2)  {  break;  }	  if(allNUL)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
77	[BUG]  [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK)  {  continue;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK)  {  continue;  }	  continue;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
78	[BUG]  [BUGGY]  if(length  <  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(length  <  BYTE_MASK)  {  continue;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  BYTE_MASK)  {  continue;  }	  continue;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
79	[BUG]  [BUGGY]  if(!allNUL  ||  buffer[start]  =='')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(!allNUL  ||  buffer[start]  =='')  {  break;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  buffer[start]  =='')  {  break;  }	  if(!allNUL)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
80	[BUG]  [BUGGY]  if(!allNUL  ||  end  >  buffer[i])  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  if(!allNUL  ||  end  >  buffer[i])  {  break;  }  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  end  >  buffer[i])  {  break;  }	  if(!allNUL)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
81	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  length: "  +  length);  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Byte  length: "  +  length);  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  length: "  +  length);	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
82	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ".equals(length));  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ".equals(length));  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ".equals(length));	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
83	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "BYTE_MASK  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "BYTE_MASK  must  be  at  least  2. ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "BYTE_MASK  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
84	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "BYTE_MASK  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "BYTE_MASK  must  be  at  least  2 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "BYTE_MASK  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
85	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalStateException( "Byte  should  not  be  null. ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  should  not  be  null. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
86	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state. ");  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state. ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  a  string  state. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
87	[BUG]  [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2. ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2. ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
88	[BUG]  [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2 ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
89	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  object  of  type ");  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  object  of  type ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  an  object  of  type ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
90	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "+i+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "+i+ "'  must  be  at  least  2 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "+i+ "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
91	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0 ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
92	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "+i+ "'  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;    [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "+i+ "'  must  be  at  least  2. ");  [BUGGY]    }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "+i+ "'  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
