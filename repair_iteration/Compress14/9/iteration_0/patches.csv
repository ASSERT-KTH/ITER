bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]    IOException  [CONTEXT]  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( " ");	break;  	non-compiled	[CE]  <identifier>  expected	17	None	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  <identifier>  expected  [FE]      IOException  [CONTEXT]  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");	break;  	non-compiled	[CE]  <identifier>  expected	17	None	replace
3	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  [CE]  <identifier>  expected  [FE]        IOException  [CONTEXT]  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  [BUGGY]  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");	break;  	non-compiled	[CE]  <identifier>  expected	17	None	replace
4	[BUG]  [BUGGY]  continue;  [CE]  <identifier>  expected  [FE]          IOException  [CONTEXT]  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [BUGGY]  continue;  [BUGGY]  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	continue;	break;  	non-compiled	[CE]  <identifier>  expected	17	None	replace
5	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2. ");  [CE]  <identifier>  expected  [FE]            IOException  [CONTEXT]  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2. ");  [BUGGY]  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2. ");	break;  	non-compiled	[CE]  <identifier>  expected	17	None	replace
6	[BUG]  [BUGGY]  if(!allNUL)  {  break;  }  [CE]  <identifier>  expected  [FE]              IOException  [CONTEXT]  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [BUGGY]  if(!allNUL)  {  break;  }  [BUGGY]  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  break;  }	break;  	non-compiled	[CE]  <identifier>  expected	17	None	replace
7	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]                IOException  [CONTEXT]  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [BUGGY]    [BUGGY]  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	  	break;  	non-compiled	[CE]  <identifier>  expected	17	None	replace
8	[BUG]  [BUGGY]  if(allNUL)  {  break;  }  [CE]  <identifier>  expected  [FE]    IOException  [CONTEXT]  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [BUGGY]  if(allNUL)  {  break;  }  [BUGGY]  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL)  {  break;  }	break;  	non-compiled	[CE]  <identifier>  expected	17	None	replace
9	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]      IOException  [CONTEXT]  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( " ");	break;  	non-compiled	[CE]  <identifier>  expected	17	None	replace
10	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(length));  [CE]  <identifier>  expected  [FE]        IOException  [CONTEXT]  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(length));  [BUGGY]  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( " ".equals(length));	break;  	non-compiled	[CE]  <identifier>  expected	17	None	replace
11	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. ");  [CE]  <identifier>  expected  [FE]    IOException  [CONTEXT]  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. ");  [BUGGY]  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2. ");	break;  	non-compiled	[CE]  <identifier>  expected	17	None	replace
