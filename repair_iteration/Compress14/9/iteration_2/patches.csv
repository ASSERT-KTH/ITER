bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
2	[BUG]  [BUGGY]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
3	[BUG]  [BUGGY]  while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
4	[BUG]  [BUGGY]  while(i  <  length)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
5	[BUG]  [BUGGY]  while(!allNUL  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(!allNUL  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(!allNUL  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
6	[BUG]  [BUGGY]  allNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
7	[BUG]  [BUGGY]  ||!allNUL)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  buffer[i]  =  buffer[i].getByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
8	[BUG]  [BUGGY]  ||!allNUL)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  continue;  }	  if(!allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
9	[BUG]  [BUGGY]  if(!allNUL  ||  length  ==  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  length  ==  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  length  ==  BYTE_MASK)  {  continue;  }	  if(!allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
10	[BUG]  [BUGGY]  if(!allNUL)  {  continue  false;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL)  {  continue  false;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  continue  false;  }	  if(!allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
11	[BUG]  [BUGGY]  while(!allNUL)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(!allNUL)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(!allNUL)  {  continue;  }	  if(!allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
12	[BUG]  [BUGGY]  while(!allNUL)  {  if(i  <  length)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(!allNUL)  {  if(i  <  length)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(!allNUL)  {  if(i  <  length)  {  continue;  }	  if(!allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternalException( " ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.throwInternalException( " ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.throwInternalException( " ");	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
14	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.throwAsIOException( " ");	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
15	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternalizationException( " ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.throwInternalizationException( " ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.throwInternalizationException( " ");	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
16	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal( "msg.js.internal.length ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.throwInternal( "msg.js.internal.length ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.throwInternal( "msg.js.internal.length ");	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
17	[BUG]  [BUGGY]  ||(i  <  length  &&  buffer[i]!=  end))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||(i  <  length  &&  buffer[i]!=  end))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||(i  <  length  &&  buffer[i]!=  end))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
18	[BUG]  [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.throwUnquotedException( " ");	  if(length    >    0)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
19	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.handleMissingException( " ");	  if(length    >    0)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
20	[BUG]  [BUGGY]  ||(i  <  length  &&  buffer[i]!=  end))  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||(i  <  length  &&  buffer[i]!=  end))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||(i  <  length  &&  buffer[i]!=  end))  {  throw  new  IllegalArgumentException( " ");	  if(length    >    0)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
21	[BUG]  [BUGGY]  aughtExceptionHandler.throwInvalidOctalException( " ");  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.throwInvalidOctalException( " ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.throwInvalidOctalException( " ");	  if(length    >    0)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
22	[BUG]  [BUGGY]  ||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
23	[BUG]  [BUGGY]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
24	[BUG]  [BUGGY]  allNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
25	[BUG]  [BUGGY]  AllNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  AllNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	AllNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
26	[BUG]  [BUGGY]  while(!allNUL  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(!allNUL  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(!allNUL  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
27	[BUG]  [BUGGY]  ||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
28	[BUG]  [BUGGY]  ||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  null;  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  null;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  null;  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
29	[BUG]  [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ");  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ".equals(i));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
30	[BUG]  [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ".equals(i));  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ".equals(i));  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ".equals(i));  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ".equals(i));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
31	[BUG]  [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ").equals(i);  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ").equals(i);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " ").equals(i);  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ".equals(i));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
32	[BUG]  [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " "  +  i);  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " "  +  i);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " "  +  i);  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ".equals(i));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
33	[BUG]  [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " "+i  + "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " "+i  + "  must  be  at  least  2 ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	try  {  [Delete]  catch(IOException  ioe)  {  throw  new  IllegalArgumentException( " "+i  + "  must  be  at  least  2 ");  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ".equals(i));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
34	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ",  allNUL);	  throw    new    IllegalStateException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
35	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");	  throw    new    IllegalStateException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
36	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  2 ");	  throw    new    IllegalStateException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
37	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  2. ");	  throw    new    IllegalStateException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
38	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  [Delete]  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	[Delete]	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
39	[BUG]  [BUGGY]  aughtExceptionHandler  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
40	[BUG]  [BUGGY]  allowNull(buffer[i]);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowNull(buffer[i]);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowNull(buffer[i]);	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
41	[BUG]  [BUGGY]  aughtExceptionHandler  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler  {  throw  new  IllegalArgumentException( " ".getMessage());  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler  {  throw  new  IllegalArgumentException( " ".getMessage());  }	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
42	[BUG]  [BUGGY]  if(length  <  =  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  =  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  =  BYTE_MASK)  {  continue;  }	  if(length    <    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
43	[BUG]  [BUGGY]  while(i  <  length)  {  if(length  <  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  if(length  <  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  if(length  <  BYTE_MASK)  {  continue;  }	  if(length    <    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
44	[BUG]  [BUGGY]  if(i  <  length)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  <  length)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  <  length)  {  continue;  }	  if(length    <    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
45	[BUG]  [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  BYTE_SIZE)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  BYTE_SIZE)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  BYTE_MASK  ||  length  >  BYTE_SIZE)  {  continue;  }	  if(length    <    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
46	[BUG]  [BUGGY]  if(length  <  2)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  2)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  2)  {  continue;  }	  if(length    <    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
47	[BUG]  [BUGGY]  if(length  >=  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >=  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >=  BYTE_MASK)  {  continue;  }	  if(length    <    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
48	[BUG]  [BUGGY]  if(!allNUL  &&  buffer[i]!=  '')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  &&  buffer[i]!=  '')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  &&  buffer[i]!=  '')  {  break;  }	  if(!allNUL    ||    buffer[i]!='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
49	[BUG]  [BUGGY]  if(buffer[i]!=''  ||  buffer[i]  ==  '-')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(buffer[i]!=''  ||  buffer[i]  ==  '-')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(buffer[i]!=''  ||  buffer[i]  ==  '-')  {  break;  }	  if(!allNUL    ||    buffer[i]!='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
50	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  0 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "ByTE_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
51	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  0. ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  0. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  0. ");	  throw    new    IllegalArgumentException(   "ByTE_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
52	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  0 ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  0 ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  0 ",  allNUL);	  throw    new    IllegalArgumentException(   "ByTE_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
53	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  1 ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  1 ");	  throw    new    IllegalArgumentException(   "ByTE_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
54	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  object  of  type. ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  object  of  type. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  an  object  of  type. ");	  throw    new    IllegalStateException(   "Byte    is    not    an    object    of    type   ");    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
55	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Byte  is  not  an  object  of  type ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalStateException( "Byte  is  not  an  object  of  type ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( "Byte  is  not  an  object  of  type ");	  throw    new    IllegalStateException(   "Byte    is    not    an    object    of    type   ");    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
56	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  object  of  type "  +  i);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  object  of  type "  +  i);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  an  object  of  type "  +  i);	  throw    new    IllegalStateException(   "Byte    is    not    an    object    of    type   ");    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
57	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  object  of  type: "  +  i);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  object  of  type: "  +  i);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  an  object  of  type: "  +  i);	  throw    new    IllegalStateException(   "Byte    is    not    an    object    of    type   ");    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
58	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  object  of  type "  +  getClass());  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  object  of  type "  +  getClass());  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  an  object  of  type "  +  getClass());	  throw    new    IllegalStateException(   "Byte    is    not    an    object    of    type   ");    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
59	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
60	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
61	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2  or  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
62	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2 ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2 ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2 ",  allNUL);	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
63	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "ByTE_MASK  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
64	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2 "+length);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2 "+length);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  2 "+length);	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
65	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte  ' "+i+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte  ' "+i+ "'  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Byte  ' "+i+ "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Byte    '   "+i+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
66	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "+i+ "'  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "+i+ "'  must  be  at  least  2  or  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "+i+ "'  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Byte    '   "+i+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
67	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
68	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2. ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2. ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
69	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  0 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
70	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  1 ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
71	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  3 ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  3 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
72	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0L;  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0L;  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  return  0L;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    return    0;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
73	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  return  0;  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  return  0;  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length);  return  0;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    return    0;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
74	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    return    0;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
75	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  return  0;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    return    0;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
76	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  System.arraycopy(buffer,  i,  buffer,  0,  length);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	System.arraycopy(buffer,  i,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    return    0;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
77	[BUG]  [BUGGY]  if(buffer[i]!='')  {  break;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(buffer[i]!='')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(buffer[i]!='')  {  break;  }	  if(allNUL    ||    buffer[i]!='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
78	[BUG]  [BUGGY]  if(allNUL  &&  buffer[i]!=  '')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  &&  buffer[i]!=  '')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  &&  buffer[i]!=  '')  {  break;  }	  if(allNUL    ||    buffer[i]!='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
79	[BUG]  [BUGGY]  if(buffer[i]!=''  ||  buffer[i]  ==  '.')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(buffer[i]!=''  ||  buffer[i]  ==  '.')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(buffer[i]!=''  ||  buffer[i]  ==  '.')  {  break;  }	  if(allNUL    ||    buffer[i]!='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
80	[BUG]  [BUGGY]  if(buffer[i]!=''  ||  buffer[i]!=  '-')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(buffer[i]!=''  ||  buffer[i]!=  '-')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(buffer[i]!=''  ||  buffer[i]!=  '-')  {  break;  }	  if(allNUL    ||    buffer[i]!='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
81	[BUG]  [BUGGY]  if(buffer[i]!=''  ||  buffer[i]  ==  '')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(buffer[i]!=''  ||  buffer[i]  ==  '')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(buffer[i]!=''  ||  buffer[i]  ==  '')  {  break;  }	  if(allNUL    ||    buffer[i]!='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
82	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  + ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  + ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  + ",  allNUL);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ",    allNUL);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
83	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ", "BYTE_MASK,  allNUL);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ", "BYTE_MASK,  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ", "BYTE_MASK,  allNUL);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ",    allNUL);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
84	[BUG]  [BUGGY]  ||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
85	[BUG]  [BUGGY]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
86	[BUG]  [BUGGY]  while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
87	[BUG]  [BUGGY]  if(length  <  2)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  2)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  2)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
88	[BUG]  [BUGGY]  while(i  <  length)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
89	[BUG]  [BUGGY]  if(length  <  2)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  2)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  2)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
90	[BUG]  [BUGGY]  while(!allNUL  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(!allNUL  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(!allNUL  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
91	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".trim());  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".trim());  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( " ".trim());	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
92	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(buffer[i]));  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(buffer[i]));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(buffer[i]));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
93	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(i));  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(i));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(i));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
94	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(length));  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(length));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(length));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
95	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(end));  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(end));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(end));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
96	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
97	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Byte  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalStateException( "Byte  should  not  be  null. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( "Byte  should  not  be  null. ");	  throw    new    IllegalStateException(   "Byte    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
98	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Bytes  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Bytes  should  not  be  null. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Bytes  should  not  be  null. ");	  throw    new    IllegalStateException(   "Byte    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
99	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  should  not  be  null.  Invalid  start  of  expression. ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  should  not  be  null.  Invalid  start  of  expression. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  should  not  be  null.  Invalid  start  of  expression. ");	  throw    new    IllegalStateException(   "Byte    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
100	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  should  not  be  null.  Invalid  start  of  offset. ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  should  not  be  null.  Invalid  start  of  offset. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  should  not  be  null.  Invalid  start  of  offset. ");	  throw    new    IllegalStateException(   "Byte    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
101	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  should  not  be  null.  If  this  is  a  non-null  value. ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  should  not  be  null.  If  this  is  a  non-null  value. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  should  not  be  null.  If  this  is  a  non-null  value. ");	  throw    new    IllegalStateException(   "Byte    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
102	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(i));  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(i));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(i));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
103	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(buffer[i]));  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(buffer[i]));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(buffer[i]));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
104	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".trim());  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".trim());  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( " ".trim());	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
105	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".getMessage());  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".getMessage());  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( " ".getMessage());	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
106	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(i)]);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(i)]);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(i)]);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
107	[BUG]  [BUGGY]  ||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByteArray();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
108	[BUG]  [BUGGY]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByteArray();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
109	[BUG]  [BUGGY]  while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByteArray();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
110	[BUG]  [BUGGY]  while(i  <  length)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByteArray();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
111	[BUG]  [BUGGY]  allNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allNUL  =  true;  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByteArray();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
112	[BUG]  [BUGGY]  ||!allNUL)  {  buffer[i]  =  buffer[i].toByteArray();  }  [CE]  illegal  start  of  expression  [FE]                                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  buffer[i]  =  buffer[i].toByteArray();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  buffer[i]  =  buffer[i].toByteArray();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByteArray();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
113	[BUG]  [BUGGY]  while(!allNUL)  {  for(int  i  =  start;  i  <  length;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [CE]  illegal  start  of  expression  [FE]                                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(!allNUL)  {  for(int  i  =  start;  i  <  length;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(!allNUL)  {  for(int  i  =  start;  i  <  length;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByteArray();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
114	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2.0 ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2.0 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2.0 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
115	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  1 ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  1 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    1   ");    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
116	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  1 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  1 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    1   ");    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
117	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
118	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  of ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  of ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  of ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
119	[BUG]  [BUGGY]  ||!allNUL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  throw  new  IllegalArgumentException( " ");  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
120	[BUG]  [BUGGY]  ||!allNUL)  {  throw  new  IllegalArgumentException( " ".equals(i);  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  throw  new  IllegalArgumentException( " ".equals(i);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  throw  new  IllegalArgumentException( " ".equals(i);  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
121	[BUG]  [BUGGY]  ||!allNUL)  {  throw  new  IllegalArgumentException( " ".trim());  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  throw  new  IllegalArgumentException( " ".trim());  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  throw  new  IllegalArgumentException( " ".trim());  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
122	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte_MASK  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte_MASK  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte_MASK  must  be  at  least  2 ");	  throw    new    IllegalStateException(   "BYTE_MASK    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
123	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ByTE_MASK  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "ByTE_MASK  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "ByTE_MASK  must  be  at  least  2 ");	  throw    new    IllegalStateException(   "BYTE_MASK    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
124	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte_MASK  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte_MASK  must  be  at  least  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte_MASK  must  be  at  least  2. ");	  throw    new    IllegalStateException(   "BYTE_MASK    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
125	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ByTE_MASK  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "ByTE_MASK  must  be  at  least  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "ByTE_MASK  must  be  at  least  2. ");	  throw    new    IllegalStateException(   "BYTE_MASK    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
127	[BUG]  [BUGGY]  ||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
128	[BUG]  [BUGGY]  while(i  <  length  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
129	[BUG]  [BUGGY]  while(i  <  length)  {  buffer[i]  =  buffer[i].toByte();  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  buffer[i]  =  buffer[i].toByte();  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  buffer[i]  =  buffer[i].toByte();	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
130	[BUG]  [BUGGY]  while(offset  <  length)  {  buffer[i]  =  buffer[i].toByte();  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length)  {  buffer[i]  =  buffer[i].toByte();  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length)  {  buffer[i]  =  buffer[i].toByte();	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
131	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2.0 ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2.0 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2.0 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2.0   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
132	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2.0 ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2.0 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2.0 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2.0   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
133	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0. ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0. ");	  throw    new    IllegalArgumentException(   "Byte-MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
134	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "Byte-MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
135	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0 ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0 ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0 ",  allNUL);	  throw    new    IllegalArgumentException(   "Byte-MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
136	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0  or  1 ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0  or  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0  or  1 ");	  throw    new    IllegalArgumentException(   "Byte-MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
137	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0: ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0: ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  0: ");	  throw    new    IllegalArgumentException(   "Byte-MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
138	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2. ".equals(buffer[i]));  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2. ".equals(buffer[i]));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2. ".equals(buffer[i]));	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
139	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ".equals(buffer[i]));  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ".equals(buffer[i]));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ".equals(buffer[i]));	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
140	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  buffer[i]);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  buffer[i]);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +  buffer[i]);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
141	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +(buffer[i]  <  =  length));  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +(buffer[i]  <  =  length));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 "  +(buffer[i]  <  =  length));	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
142	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ",  allNUL);	  Throwables.throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
143	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1 ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
144	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  length: "  +  i);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  length: "  +  i);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  length: "  +  i);	  throw    new    IllegalArgumentException(   "Byte    length:   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
145	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  length: "  +  start);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  length: "  +  start);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  length: "  +  start);	  throw    new    IllegalArgumentException(   "Byte    length:   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
146	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  length: "  +  end);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  length: "  +  end);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  length: "  +  end);	  throw    new    IllegalArgumentException(   "Byte    length:   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
147	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  length: "  +  offset);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  length: "  +  offset);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  length: "  +  offset);	  throw    new    IllegalArgumentException(   "Byte    length:   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
148	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte  length: "  +  length);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte  length: "  +  length);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Byte  length: "  +  length);	  throw    new    IllegalArgumentException(   "Byte    length:   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
149	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  length: "  +  length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  length: "  +  length+ "  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  length: "  +  length+ "  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Byte    length:   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
150	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
151	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
152	[BUG]  [BUGGY]  if(length  <  2)  {  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  2)  {  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  2)  {  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ");  }	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
153	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
154	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2 ",  allNUL);	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
155	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
156	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(length));  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( " ".equals(length));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( " ".equals(length));	  throw    new    IllegalStateException(   "   ".equals(i));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
157	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  to  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  to  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  to  be  at  least  2 ");	  throw    new    IllegalStateException(   "   ".equals(i));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
158	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  to  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  to  be  at  least  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  to  be  at  least  2. ");	  throw    new    IllegalStateException(   "   ".equals(i));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
159	[BUG]  [BUGGY]  ||  length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||  length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||  length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
160	[BUG]  [BUGGY]  while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
161	[BUG]  [BUGGY]  while(i  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
162	[BUG]  [BUGGY]  while(i  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
163	[BUG]  [BUGGY]  while(offset  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
164	[BUG]  [BUGGY]  while(i  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
165	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  at  least  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "ByTE_MASK  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "BYTE_MASK    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
166	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "BYTE_MASK  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "BYTE_MASK  must  be  at  least  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "BYTE_MASK  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "BYTE_MASK    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
167	[BUG]  [BUGGY]  allowLength(i)  {  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowLength(i)  {  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowLength(i)  {  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
168	[BUG]  [BUGGY]  if(i  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
169	[BUG]  [BUGGY]  ||  length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||  length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||  length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
170	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  else  {  System.arraycopy(buffer,  0,  buffer[start,  end]);  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  else  {  System.arraycopy(buffer,  0,  buffer[start,  end]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  else  {  System.arraycopy(buffer,  0,  buffer[start,  end]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
171	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
172	[BUG]  [BUGGY]  allowLength(i)  {  if(length  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowLength(i)  {  if(length  >  0)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowLength(i)  {  if(length  >  0)  {  continue;  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
173	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
175	[BUG]  [BUGGY]  while(offset  <  length)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
176	[BUG]  [BUGGY]  while(i  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
177	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
178	[BUG]  [BUGGY]  while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
179	[BUG]  [BUGGY]  while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
180	[BUG]  [BUGGY]  ||  length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||  length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||  length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
181	[BUG]  [BUGGY]  while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
182	[BUG]  [BUGGY]  while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
183	[BUG]  [BUGGY]  while(offset  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
184	[BUG]  [BUGGY]  while(i  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
185	[BUG]  [BUGGY]  while(i  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
186	[BUG]  [BUGGY]  allowLength(offset,  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowLength(offset,  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowLength(offset,  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
187	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Invalid  start  of  expression: "  +  i);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Invalid  start  of  expression: "  +  i);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Invalid  start  of  expression: "  +  i);	  throw    new    IllegalArgumentException(   "   ".equals(i));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
188	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK: "  +  i);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK: "  +  i);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK: "  +  i);	  throw    new    IllegalArgumentException(   "   ".equals(i));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
189	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  is  not  a  string  value. ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  is  not  a  string  value. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  is  not  a  string  value. ");	  throw    new    IllegalArgumentException(   "   ".equals(i));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
190	[BUG]  [BUGGY]  if(length  <  2)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  2)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  2)  {  break;  }	  if(allNUL    ||    length    <    2)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
191	[BUG]  [BUGGY]  if(length  <  2  ||  allNUL)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  2  ||  allNUL)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  2  ||  allNUL)  {  break;  }	  if(allNUL    ||    length    <    2)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
192	[BUG]  [BUGGY]  if(allNUL  ||  length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  length  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  length  <  2)  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL    ||    length    <    2)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
193	[BUG]  [BUGGY]  if(length  <  2  ||  end  <  2)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  2  ||  end  <  2)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  2  ||  end  <  2)  {  break;  }	  if(allNUL    ||    length    <    2)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
194	[BUG]  [BUGGY]  if(length  <  2  ||  length  <  2)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  2  ||  length  <  2)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  2  ||  length  <  2)  {  break;  }	  if(allNUL    ||    length    <    2)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
195	[BUG]  [BUGGY]  if(length  <  2  ||  start  <  2)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  2  ||  start  <  2)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  2  ||  start  <  2)  {  break;  }	  if(allNUL    ||    length    <    2)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
196	[BUG]  [BUGGY]  if(i  ==  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  ==  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  ==  BYTE_MASK)  {  continue;  }	  if(length    ==    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
197	[BUG]  [BUGGY]  if(i  ==  length)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  ==  length)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  ==  length)  {  continue;  }	  if(length    ==    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
198	[BUG]  [BUGGY]  if(length  ==  1)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ==  1)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  1)  {  continue;  }	  if(length    ==    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
199	[BUG]  [BUGGY]  if(length  ==  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ==  0)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  0)  {  continue;  }	  if(length    ==    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
200	[BUG]  [BUGGY]  if(length  ==  2)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ==  2)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  2)  {  continue;  }	  if(length    ==    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
201	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2. ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2. ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2. ",  allNUL);	  throw    new    IllegalArgumentException(   "Byte    '   "    +    length    +   "'    must    be    at    least    2   ",    allNUL);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
202	[BUG]  [BUGGY]  if(length  <  =  BYTE_MASK)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  =  BYTE_MASK)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  =  BYTE_MASK)  {  break;  }	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
203	[BUG]  [BUGGY]  if(length  <  =  BYTE_MASK  ||  allNUL)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  =  BYTE_MASK  ||  allNUL)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  =  BYTE_MASK  ||  allNUL)  {  break;  }	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
204	[BUG]  [BUGGY]  if(allNUL  &&  length  <  =  BYTE_MASK)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  &&  length  <  =  BYTE_MASK)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  &&  length  <  =  BYTE_MASK)  {  break;  }	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
205	[BUG]  [BUGGY]  if(length  <  =  BYTE_MASK  ||  length  <  =  BYTE_MASK)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  =  BYTE_MASK  ||  length  <  =  BYTE_MASK)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  =  BYTE_MASK  ||  length  <  =  BYTE_MASK)  {  break;  }	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
206	[BUG]  [BUGGY]  if(allNUL  ||  length  <  BYTE_MASK)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  length  <  BYTE_MASK)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  length  <  BYTE_MASK)  {  break;  }	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
207	[BUG]  [BUGGY]  if(allNUL  ||  length  ==  BYTE_MASK)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  length  ==  BYTE_MASK)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  length  ==  BYTE_MASK)  {  break;  }	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
208	[BUG]  [BUGGY]  if(allNUL  ||  length  <  =  1)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  length  <  =  1)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  length  <  =  1)  {  break;  }	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
209	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
210	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
211	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
212	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
213	[BUG]  [BUGGY]  aughtExceptionHandler.throwUnsupportedOctalException( " ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.throwUnsupportedOctalException( " ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.throwUnsupportedOctalException( " ");	  if(allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
214	[BUG]  [BUGGY]  aughtExceptionHandler.throwUnsupportedOperationException( " ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.throwUnsupportedOperationException( " ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.throwUnsupportedOperationException( " ");	  if(allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
215	[BUG]  [BUGGY]  if(buffer[i]  =='')  {  break;  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(buffer[i]  =='')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(buffer[i]  =='')  {  break;  }	  if(allNUL    ||    buffer[i]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
216	[BUG]  [BUGGY]  if(buffer[i]  ==''  ||  buffer[i]  ==  '-')  {  break;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(buffer[i]  ==''  ||  buffer[i]  ==  '-')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(buffer[i]  ==''  ||  buffer[i]  ==  '-')  {  break;  }	  if(allNUL    ||    buffer[i]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
217	[BUG]  [BUGGY]  if(allNUL  &&  buffer[i]  ==  '')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  &&  buffer[i]  ==  '')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  &&  buffer[i]  ==  '')  {  break;  }	  if(allNUL    ||    buffer[i]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
218	[BUG]  [BUGGY]  if(buffer[i]  ==''  ||  buffer[i]  ==  '')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(buffer[i]  ==''  ||  buffer[i]  ==  '')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(buffer[i]  ==''  ||  buffer[i]  ==  '')  {  break;  }	  if(allNUL    ||    buffer[i]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
219	[BUG]  [BUGGY]  if(buffer[i]  ==''  ||  buffer[i]  ==  'n')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(buffer[i]  ==''  ||  buffer[i]  ==  'n')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(buffer[i]  ==''  ||  buffer[i]  ==  'n')  {  break;  }	  if(allNUL    ||    buffer[i]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
220	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1. ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    1   ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
222	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
223	[BUG]  [BUGGY]  while(offset  <  length)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
224	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
225	[BUG]  [BUGGY]  while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
226	[BUG]  [BUGGY]  while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
227	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
228	[BUG]  [BUGGY]  ||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
229	[BUG]  [BUGGY]  while(offset  <  length  &&  buffer[i]!=  start)  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length  &&  buffer[i]!=  start)  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length  &&  buffer[i]!=  start)  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
230	[BUG]  [BUGGY]  while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
231	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]                                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ".);  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
232	[BUG]  [BUGGY]  ||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]                                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ".);  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
233	[BUG]  [BUGGY]  while(offset  <  length  &&  buffer[i]!=  start)  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]                                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length  &&  buffer[i]!=  start)  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length  &&  buffer[i]!=  start)  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ".);  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
234	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  end  + "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  end  + "'  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  end  + "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Byte    '   "    +    length    +   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
235	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  start  + "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  start  + "'  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  start  + "'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Byte    '   "    +    length    +   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
237	[BUG]  [BUGGY]  ||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
238	[BUG]  [BUGGY]  while(offset  <  length  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
239	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
240	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  offset;  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  offset;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  offset;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
241	[BUG]  [BUGGY]  allowLength(i)  {  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowLength(i)  {  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowLength(i)  {  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
242	[BUG]  [BUGGY]  ||  length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||  length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||  length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
243	[BUG]  [BUGGY]  ||(end  <  0  &&  offset  +  length)>  buffer[start  +  i])  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||(end  <  0  &&  offset  +  length)>  buffer[start  +  i])  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||(end  <  0  &&  offset  +  length)>  buffer[start  +  i])  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
244	[BUG]  [BUGGY]  ||(end  <  0  &&  offset  +  length)>  buffer[start  +  i])  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||(end  <  0  &&  offset  +  length)>  buffer[start  +  i])  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||(end  <  0  &&  offset  +  length)>  buffer[start  +  i])  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
245	[BUG]  [BUGGY]  allowLength(i)  {  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  1,  length);  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowLength(i)  {  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  1,  length);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowLength(i)  {  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  1,  length);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
246	[BUG]  [BUGGY]  allowLength(i)  {  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  0,  buffer[start  +  i],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowLength(i)  {  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  0,  buffer[start  +  i],  0,  length);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowLength(i)  {  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  0,  buffer[start  +  i],  0,  length);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
247	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "BYTE_MASK  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "BYTE_MASK  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "BYTE_MASK  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "BYTE_MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
248	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
249	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ",  allNUL);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ",  allNUL);	  throw    new    IllegalArgumentException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
250	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
251	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
252	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  should  not  be  null. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "ByTE_MASK  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "Byte_MASK    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
253	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "Byte_MASK    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
254	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  not  be  null. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "Byte_MASK    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
255	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Bytes  should  not  be  null. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Bytes  should  not  be  null. ");	  throw    new    IllegalArgumentException(   "Byte_MASK    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
256	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null.  All  of  them. ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null.  All  of  them. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null.  All  of  them. ");	  throw    new    IllegalArgumentException(   "Byte_MASK    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
257	[BUG]  [BUGGY]  if(i  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    ==    BYTE_MASK)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
258	[BUG]  [BUGGY]  ||  length  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||  length  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||  length  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    ==    BYTE_MASK)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
259	[BUG]  [BUGGY]  if(i  ==  length)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  ==  length)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  ==  length)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    ==    BYTE_MASK)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
260	[BUG]  [BUGGY]  while(i  <  length)  {  if(length  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  if(length  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  if(length  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    ==    BYTE_MASK)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
261	[BUG]  [BUGGY]  while(i  <  length)  {  if(length  ==  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  if(length  ==  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  if(length  ==  BYTE_MASK)  {  continue;  }	  if(length    ==    BYTE_MASK)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
262	[BUG]  [BUGGY]  if(i  ==  end)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  ==  end)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  ==  end)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    ==    BYTE_MASK)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
263	[BUG]  [BUGGY]  if(i  ==  start)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  ==  start)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  ==  start)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    ==    BYTE_MASK)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
264	[BUG]  [BUGGY]  ||!allNUL)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  throw  new  IllegalStateException( " ");  }	  if(!allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
265	[BUG]  [BUGGY]  ||!allNUL)  {  throw  new  IllegalStateException( " ".equals(i);  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  throw  new  IllegalStateException( " ".equals(i);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  throw  new  IllegalStateException( " ".equals(i);  }	  if(!allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
266	[BUG]  [BUGGY]  ||!allNUL)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(!allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
267	[BUG]  [BUGGY]  ||!allNUL)  {  throw  new  IllegalStateException( " ".trim());  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  throw  new  IllegalStateException( " ".trim());  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  throw  new  IllegalStateException( " ".trim());  }	  if(!allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
268	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1 ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1 ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1 ",  allNUL);	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    >    -1   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
269	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1. ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1. ");	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    >    -1   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
270	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1 ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1 ");	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    >    -1   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
271	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  -1 ");  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  -1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >  -1 ");	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    >    -1   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
272	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1  or  1 ");  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1  or  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1  or  1 ");	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    >    -1   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
273	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  0 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
274	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
275	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  1 ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
276	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  3 ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  3 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
277	[BUG]  [BUGGY]  if(allNUL)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL)  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL)  {  return  0L;  }	  if(allNUL)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
278	[BUG]  [BUGGY]  if(!allNUL)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL)  {  return  0;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  return  0;  }	  if(allNUL)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
279	[BUG]  [BUGGY]  while(i  <  end)  {  if(allNUL)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  end)  {  if(allNUL)  {  return  0;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  end)  {  if(allNUL)  {  return  0;  }	  if(allNUL)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
280	[BUG]  [BUGGY]  ||  allNUL)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||  allNUL)  {  return  0;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||  allNUL)  {  return  0;  }	  if(allNUL)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
281	[BUG]  [BUGGY]  if(i  <  length  ||  length  >  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  <  length  ||  length  >  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  <  length  ||  length  >  BYTE_MASK)  {  continue;  }	  if(length    <    BYTE_MASK    ||    length    >    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
282	[BUG]  [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK  ||  end  >  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK  ||  end  >  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK  ||  end  >  BYTE_MASK)  {  continue;  }	  if(length    <    BYTE_MASK    ||    length    >    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
283	[BUG]  [BUGGY]  if(length  <  =  BYTE_MASK  ||  length  >  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  =  BYTE_MASK  ||  length  >  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  =  BYTE_MASK  ||  length  >  BYTE_MASK)  {  continue;  }	  if(length    <    BYTE_MASK    ||    length    >    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
284	[BUG]  [BUGGY]  if(offset  <  BYTE_MASK  ||  offset  >  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(offset  <  BYTE_MASK  ||  offset  >  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(offset  <  BYTE_MASK  ||  offset  >  BYTE_MASK)  {  continue;  }	  if(length    <    BYTE_MASK    ||    length    >    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
285	[BUG]  [BUGGY]  if(length  <  BYTE_MASK  ||  end  >  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  BYTE_MASK  ||  end  >  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  BYTE_MASK  ||  end  >  BYTE_MASK)  {  continue;  }	  if(length    <    BYTE_MASK    ||    length    >    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
286	[BUG]  [BUGGY]  if(start  <  BYTE_MASK  ||  end  >  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(start  <  BYTE_MASK  ||  end  >  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(start  <  BYTE_MASK  ||  end  >  BYTE_MASK)  {  continue;  }	  if(length    <    BYTE_MASK    ||    length    >    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
287	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  end  + "'  must  be  at  least  2  bytes.   ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  end  + "'  must  be  at  least  2  bytes.   ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  end  + "'  must  be  at  least  2  bytes.   ");	  throw    new    IllegalArgumentException(   "Byte    '   "    +    length    +   "'    must    be    at    least    2    bytes.   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
288	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  start  + "'  must  be  at  least  2  bytes.   ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  start  + "'  must  be  at  least  2  bytes.   ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  start  + "'  must  be  at  least  2  bytes.   ");	  throw    new    IllegalArgumentException(   "Byte    '   "    +    length    +   "'    must    be    at    least    2    bytes.   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
289	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes.  If(length  <  2)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  bytes. ");  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes.  If(length  <  2)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  bytes. ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes.  If(length  <  2)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  bytes. ");  }	  throw    new    IllegalArgumentException(   "Byte    '   "    +    length    +   "'    must    be    at    least    2    bytes.   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
290	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes.  If(length  <  BYTE_MASK)  {  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes. ");  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes.  If(length  <  BYTE_MASK)  {  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes. ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes.  If(length  <  BYTE_MASK)  {  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes. ");  }	  throw    new    IllegalArgumentException(   "Byte    '   "    +    length    +   "'    must    be    at    least    2    bytes.   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
291	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
292	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  0 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
293	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  0. ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  0. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  0. ");	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
294	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  0 ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  0 ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  0 ",  allNUL);	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
295	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  0: ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  0: ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  0: ");	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
296	[BUG]  [BUGGY]  if(length  <  2)  {  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2.   ");  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  2)  {  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2.   ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  2)  {  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2.   ");  }	  throw    new    IllegalStateException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
297	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2.   ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2.   ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2.   ");	  throw    new    IllegalStateException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
298	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2.0 ");  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2.0 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2.0 ");	  throw    new    IllegalStateException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
299	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
300	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
301	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  3 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  3 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
302	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
303	[BUG]  [BUGGY]  ||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
304	[BUG]  [BUGGY]  while(i  <  length  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length  &&  buffer[i]!=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
305	[BUG]  [BUGGY]  while(i  <  length)  {  buffer[i]  =  buffer[i].getByte();  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  buffer[i]  =  buffer[i].getByte();  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  buffer[i]  =  buffer[i].getByte();	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
306	[BUG]  [BUGGY]  while(offset  <  length)  {  buffer[i]  =  buffer[i].getByte();  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length)  {  buffer[i]  =  buffer[i].getByte();  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length)  {  buffer[i]  =  buffer[i].getByte();	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
307	[BUG]  [BUGGY]  while(i  <  end)  {  buffer[i]  =  buffer[i].getByte();  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  end)  {  buffer[i]  =  buffer[i].getByte();  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  end)  {  buffer[i]  =  buffer[i].getByte();	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
308	[BUG]  [BUGGY]  while(i  <  end)  {  if(allNUL)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  end)  {  if(allNUL)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  end)  {  if(allNUL)  {  continue;  }	  if(allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
309	[BUG]  [BUGGY]  while(i  <  length)  {  if(allNUL)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  if(allNUL)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  if(allNUL)  {  continue;  }	  if(allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
310	[BUG]  [BUGGY]  if(allNUL  ||  end)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  end)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  end)  {  continue;  }	  if(allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
311	[BUG]  [BUGGY]  ||  allNUL)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||  allNUL)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||  allNUL)  {  continue;  }	  if(allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
312	[BUG]  [BUGGY]  if(allNUL  ||  length  <  2)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  length  <  2)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  length  <  2)  {  continue;  }	  if(allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
313	[BUG]  [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2  or  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2  or  2 ");	  throw    new    IllegalStateException(   "BYTE_MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
314	[BUG]  [BUGGY]  if(end  ||  allNUL)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(end  ||  allNUL)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(end  ||  allNUL)  {  break;  }	  if(allNUL    ||    end)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
315	[BUG]  [BUGGY]  if(!allNUL  &&  end)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  &&  end)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  &&  end)  {  break;  }	  if(allNUL    ||    end)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
316	[BUG]  [BUGGY]  if(end  ||  end)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(end  ||  end)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(end  ||  end)  {  break;  }	  if(allNUL    ||    end)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
317	[BUG]  [BUGGY]  if(allNUL  &&  end)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  &&  end)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  &&  end)  {  break;  }	  if(allNUL    ||    end)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
318	[BUG]  [BUGGY]  if(allNUL  ||  end)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  end)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  end)  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL    ||    end)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
319	[BUG]  [BUGGY]  if(allNUL  ||  end)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  end)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  end)  {  throw  new  IllegalStateException( " ");  }	  if(allNUL    ||    end)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
320	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte  ' "+i+ "'  must  be  at  least  2.   ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte  ' "+i+ "'  must  be  at  least  2.   ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Byte  ' "+i+ "'  must  be  at  least  2.   ");	  throw    new    IllegalArgumentException(   "Byte    '   "+i+   "'    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
321	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  buffer[ "+i+ ", "+end+ "] ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  buffer[ "+i+ ", "+end+ "] ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Failed  to  parse  buffer[ "+i+ ", "+end+ "] ");	  throw    new    IllegalStateException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
322	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  byte[ "+i+ "] ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  byte[ "+i+ "] ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Failed  to  parse  byte[ "+i+ "] ");	  throw    new    IllegalStateException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
323	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  byte[ "+start+ "] ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  byte[ "+start+ "] ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Failed  to  parse  byte[ "+start+ "] ");	  throw    new    IllegalStateException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
324	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  buffer[ "+i+ "] ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  buffer[ "+i+ "] ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Failed  to  parse  buffer[ "+i+ "] ");	  throw    new    IllegalStateException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
325	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  byte[ "+i+ ", "+end+ "] ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  byte[ "+i+ ", "+end+ "] ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Failed  to  parse  byte[ "+i+ ", "+end+ "] ");	  throw    new    IllegalStateException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
326	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  buffer[ "+i+ "]. ");  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse  buffer[ "+i+ "]. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Failed  to  parse  buffer[ "+i+ "]. ");	  throw    new    IllegalStateException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
327	[BUG]  [BUGGY]  if(!allNUL  &&  end  >  buffer[i])  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  &&  end  >  buffer[i])  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  &&  end  >  buffer[i])  {  break;  }	  if(!allNUL    ||    end    >    buffer[i])    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
328	[BUG]  [BUGGY]  if(!allNUL  ||  end  <  buffer[i])  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  end  <  buffer[i])  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  end  <  buffer[i])  {  break;  }	  if(!allNUL    ||    end    >    buffer[i])    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
329	[BUG]  [BUGGY]  if(!allNUL  ||  end  ==  buffer[i])  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  end  ==  buffer[i])  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  end  ==  buffer[i])  {  break;  }	  if(!allNUL    ||    end    >    buffer[i])    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
330	[BUG]  [BUGGY]  if(!allNUL  ||  end  >=  buffer[i])  {  break;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  end  >=  buffer[i])  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  end  >=  buffer[i])  {  break;  }	  if(!allNUL    ||    end    >    buffer[i])    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
331	[BUG]  [BUGGY]  if(!allNUL  ||  end!=  buffer[i])  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  end!=  buffer[i])  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  end!=  buffer[i])  {  break;  }	  if(!allNUL    ||    end    >    buffer[i])    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
332	[BUG]  [BUGGY]  if(end  >  buffer[i])  {  break;  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(end  >  buffer[i])  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(end  >  buffer[i])  {  break;  }	  if(!allNUL    ||    end    >    buffer[i])    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
333	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2   ".equals(length));  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2   ".equals(length));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2   ".equals(length));	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
334	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  for  buffer[i]: "  +  buffer[i]);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  for  buffer[i]: "  +  buffer[i]);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  for  buffer[i]: "  +  buffer[i]);	  throw    new    IllegalStateException(   "   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
335	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "': "  +  buffer[i]);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "': "  +  buffer[i]);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "': "  +  buffer[i]);	  throw    new    IllegalStateException(   "   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
336	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  ' "  +  buffer[i]  + "'  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  ' "  +  buffer[i]  + "'  must  be  at  least  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  ' "  +  buffer[i]  + "'  must  be  at  least  2. ");	  throw    new    IllegalStateException(   "   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
337	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  ' "  +  buffer[i]  + "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  ' "  +  buffer[i]  + "'  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  ' "  +  buffer[i]  + "'  must  be  at  least  2 ");	  throw    new    IllegalStateException(   "   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
338	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  ' "  +  buffer[i]  + "'  must  be  at  least  2 ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  ' "  +  buffer[i]  + "'  must  be  at  least  2 ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  ' "  +  buffer[i]  + "'  must  be  at  least  2 ",  allNUL);	  throw    new    IllegalStateException(   "   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
339	[BUG]  [BUGGY]  if(!allNUL  &&  buffer[i]  ==  '')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  &&  buffer[i]  ==  '')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  &&  buffer[i]  ==  '')  {  break;  }	  if(!allNUL    ||    buffer[i]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
340	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "Byte-MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
341	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Byte-MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
342	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2  or  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Byte-MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
343	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2 ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2 ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2 ",  allNUL);	  throw    new    IllegalArgumentException(   "Byte-MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
344	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2  of ");  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2  of ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2  of ");	  throw    new    IllegalArgumentException(   "Byte-MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
345	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  two. ");  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  two. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  two. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    two.   ");    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
346	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  end  + "'  must  be  at  least  2.   ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  end  + "'  must  be  at  least  2.   ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  end  + "'  must  be  at  least  2.   ");	  throw    new    IllegalArgumentException(   "Byte    '   "    +    length    +   "'    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
347	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  start  + "'  must  be  at  least  2.   ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  start  + "'  must  be  at  least  2.   ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  start  + "'  must  be  at  least  2.   ");	  throw    new    IllegalArgumentException(   "Byte    '   "    +    length    +   "'    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
348	[BUG]  [BUGGY]  if(i  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  >  0)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  >  0)  {  continue;  }	  if(length    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
349	[BUG]  [BUGGY]  if(length  <  =  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  =  0)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  =  0)  {  continue;  }	  if(length    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
350	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  should  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  should  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  should  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    should    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
351	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  should  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  should  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  should  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    should    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
352	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  should  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  should  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  should  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    should    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
353	[BUG]  [BUGGY]  while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    new    ByteArrayInputStream(buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
354	[BUG]  [BUGGY]  ||  length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||  length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||  length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    new    ByteArrayInputStream(buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
355	[BUG]  [BUGGY]  while(i  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    new    ByteArrayInputStream(buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
356	[BUG]  [BUGGY]  while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    new    ByteArrayInputStream(buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
357	[BUG]  [BUGGY]  while(offset  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    new    ByteArrayInputStream(buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
358	[BUG]  [BUGGY]  while(i  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    new    ByteArrayInputStream(buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
359	[BUG]  [BUGGY]  while(offset  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    new    ByteArrayInputStream(buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
360	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ByTE_MASK  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "ByTE_MASK  must  be  >  0 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "ByTE_MASK  must  be  >  0 ");	  throw    new    IllegalStateException(   "BYTE_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
361	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte_MASK  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte_MASK  must  be  >  0 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte_MASK  must  be  >  0 ");	  throw    new    IllegalStateException(   "BYTE_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
362	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "BYTE_MASK  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalStateException( "BYTE_MASK  must  be  >  0 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( "BYTE_MASK  must  be  >  0 ");	  throw    new    IllegalStateException(   "BYTE_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
363	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.. ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  a  string  state.. ");	  throw    new    IllegalStateException(   "Byte    is    not    a    string    state.   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
364	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  All  of  them  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  All  of  them  must  be  at  least  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  a  string  state.  All  of  them  must  be  at  least  2. ");	  throw    new    IllegalStateException(   "Byte    is    not    a    string    state.   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
365	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  end  of  the  buffer[ ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  end  of  the  buffer[ ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  end  of  the  buffer[ ");	  throw    new    IllegalStateException(   "Byte    is    not    a    string    state.   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
366	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  end  of  the  buffer[ "  +  start  + "]  does  not  exist. ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  end  of  the  buffer[ "  +  start  + "]  does  not  exist. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  end  of  the  buffer[ "  +  start  + "]  does  not  exist. ");	  throw    new    IllegalStateException(   "Byte    is    not    a    string    state.   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
367	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  end  of  the  buffer[ "+i+ "]  does  not  exist. ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  end  of  the  buffer[ "+i+ "]  does  not  exist. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  end  of  the  buffer[ "+i+ "]  does  not  exist. ");	  throw    new    IllegalStateException(   "Byte    is    not    a    string    state.   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
368	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "BYTE_MASK  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "BYTE_MASK  must  be  >  0 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "BYTE_MASK  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "BYTE_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
369	[BUG]  [BUGGY]  ||  length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||  length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||  length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
370	[BUG]  [BUGGY]  while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
371	[BUG]  [BUGGY]  while(i  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
372	[BUG]  [BUGGY]  while(i  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
373	[BUG]  [BUGGY]  while(offset  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
374	[BUG]  [BUGGY]  while(i  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  length)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
375	[BUG]  [BUGGY]  if(!allNUL  &&  buffer[start]  ==  '')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  &&  buffer[start]  ==  '')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  &&  buffer[start]  ==  '')  {  break;  }	  if(!allNUL    ||    buffer[start]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
376	[BUG]  [BUGGY]  if(!allNUL  &&  buffer[start]!=  '')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  &&  buffer[start]!=  '')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  &&  buffer[start]!=  '')  {  break;  }	  if(!allNUL    ||    buffer[start]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
377	[BUG]  [BUGGY]  if(!allNUL  &&  buffer[start]  ==  '')  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  &&  buffer[start]  ==  '')  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  &&  buffer[start]  ==  '')  {  continue;  }	  if(!allNUL    ||    buffer[start]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
378	[BUG]  [BUGGY]  if(i  >  start)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  >  start)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  >  start)  {  continue;  }	  if(length    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
379	[BUG]  [BUGGY]  if(length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
380	[BUG]  [BUGGY]  if(length  >  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  throw  new  IllegalStateException( " ");  }	  if(length    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
381	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  end  + "'  must  be  at  least  2   ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  end  + "'  must  be  at  least  2   ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  end  + "'  must  be  at  least  2   ",  allNUL);	  throw    new    IllegalArgumentException(   "Byte    '   "    +    length    +   "'    must    be    at    least    2   ",    allNUL);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
382	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  or  2 ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  or  2 ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  or  2 ",  allNUL);	  throw    new    IllegalArgumentException(   "Byte    '   "    +    length    +   "'    must    be    at    least    2   ",    allNUL);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
383	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  start  + "'  must  be  at  least  2   ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  start  + "'  must  be  at  least  2   ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  start  + "'  must  be  at  least  2   ",  allNUL);	  throw    new    IllegalArgumentException(   "Byte    '   "    +    length    +   "'    must    be    at    least    2   ",    allNUL);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
384	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
385	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
386	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
387	[BUG]  [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  length;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  length;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  for(int  i  =  start;  i  <  length;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
388	[BUG]  [BUGGY]  if(i  >  start)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  >  start)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  >  start)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
389	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
390	[BUG]  [BUGGY]  allowNonLocal(i)  {  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowNonLocal(i)  {  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowNonLocal(i)  {  if(length  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
391	[BUG]  [BUGGY]  if(i  >  end)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  >  end)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  >  end)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
392	[BUG]  [BUGGY]  allowNonLocal(i)  {  if(length  >  0)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowNonLocal(i)  {  if(length  >  0)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowNonLocal(i)  {  if(length  >  0)  {  continue;  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
393	[BUG]  [BUGGY]  if(i  >  start)  {  continue;  }  else  {  System.arraycopy(buffer,  0,  buffer[start,  end]);  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  >  start)  {  continue;  }  else  {  System.arraycopy(buffer,  0,  buffer[start,  end]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  >  start)  {  continue;  }  else  {  System.arraycopy(buffer,  0,  buffer[start,  end]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
394	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ByTE_MASK  must  be  >  0. ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "ByTE_MASK  must  be  >  0. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "ByTE_MASK  must  be  >  0. ");	  throw    new    IllegalStateException(   "BYTE_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
395	[BUG]  [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  must  be  >  0. ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  must  be  >  0. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "BYTE_MASK  must  be  >  0. ");	  throw    new    IllegalStateException(   "BYTE_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
396	[BUG]  [BUGGY]  while(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
397	[BUG]  [BUGGY]  if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
398	[BUG]  [BUGGY]  if(length  >  buffer[i]  ||  end  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i]  ||  end  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i]  ||  end  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
399	[BUG]  [BUGGY]  if(length  >  buffer[i]  ||  start  >=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i]  ||  start  >=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i]  ||  start  >=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
400	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  We  might  have  side  effects  and  can't  be  depressed. ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  We  might  have  side  effects  and  can't  be  depressed. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  a  string  state.  We  might  have  side  effects  and  can't  be  depressed. ");	  throw    new    IllegalStateException(   "Byte    is    not    a    string    state.   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
401	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  start  of  offset  does  not  exist. ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  start  of  offset  does  not  exist. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  start  of  offset  does  not  exist. ");	  throw    new    IllegalStateException(   "Byte    is    not    a    string    state.   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
402	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  We  might  have  side  effects  and  can't  be  removed ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  We  might  have  side  effects  and  can't  be  removed ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  a  string  state.  We  might  have  side  effects  and  can't  be  removed ");	  throw    new    IllegalStateException(   "Byte    is    not    a    string    state.   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
403	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  We  might  have  side  effects  and  can't  be  deformed. ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  We  might  have  side  effects  and  can't  be  deformed. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  a  string  state.  We  might  have  side  effects  and  can't  be  deformed. ");	  throw    new    IllegalStateException(   "Byte    is    not    a    string    state.   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
404	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  We  might  have  side  effects  and  can't  be  removed. ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  We  might  have  side  effects  and  can't  be  removed. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  a  string  state.  We  might  have  side  effects  and  can't  be  removed. ");	  throw    new    IllegalStateException(   "Byte    is    not    a    string    state.   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
405	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  i);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( " "  +  i);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( " "  +  i);	  throw    new    IllegalStateException(   "   ".equals(i));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
406	[BUG]  [BUGGY]  while(start  >=  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  >=  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  >=  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
407	[BUG]  [BUGGY]  while(start  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
408	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getbyte();  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getbyte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getbyte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
409	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  block[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  block[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  block[i].getByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
410	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  1 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  at  least  1 ");	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
411	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  2 ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  2 ");	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
412	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
413	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
414	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
415	[BUG]  [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
416	[BUG]  [BUGGY]  if(length  >  BYTE_MASK  ||  length  >  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  BYTE_MASK  ||  length  >  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  BYTE_MASK  ||  length  >  BYTE_MASK)  {  continue;  }	  if(length    <    BYTE_MASK    ||    length    >    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
417	[BUG]  [BUGGY]  if(length  >  buffer[i]  ||  end  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i]  ||  end  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i]  ||  end  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
418	[BUG]  [BUGGY]  if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
419	[BUG]  [BUGGY]  if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
420	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  byte[offset];  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  byte[offset];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  byte[offset];  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
421	[BUG]  [BUGGY]  allowNonLocal(i)  {  if(length  >  0)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowNonLocal(i)  {  if(length  >  0)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowNonLocal(i)  {  if(length  >  0)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    0)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
422	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  i,  length);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.handleMissingName(buffer,  i,  length);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.handleMissingName(buffer,  i,  length);	  if(length    >    0)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
423	[BUG]  [BUGGY]  aughtExceptionHandler.handleMalformedException( " ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.handleMalformedException( " ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.handleMalformedException( " ");	  if(length    >    0)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
424	[BUG]  [BUGGY]  throw  new  IllegalStateException( "ByTE_MASK  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "ByTE_MASK  must  be  at  least  2  or  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "ByTE_MASK  must  be  at  least  2  or  2 ");	  throw    new    IllegalStateException(   "BYTE_MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
425	[BUG]  [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2 "  +  i);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2 "  +  i);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2 "  +  i);	  throw    new    IllegalStateException(   "BYTE_MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
426	[BUG]  [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2 "  +  start);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2 "  +  start);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2 "  +  start);	  throw    new    IllegalStateException(   "BYTE_MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
427	[BUG]  [BUGGY]  if(allNUL  &&  end  >  buffer[i])  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  &&  end  >  buffer[i])  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  &&  end  >  buffer[i])  {  break;  }	  if(!allNUL    ||    end    >    buffer[i])    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
428	[BUG]  [BUGGY]  if(!allNUL  &&  start  >  buffer[i])  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  &&  start  >  buffer[i])  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  &&  start  >  buffer[i])  {  break;  }	  if(!allNUL    ||    end    >    buffer[i])    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
429	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >   ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >   ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  >   ");	  throw    new    IllegalArgumentException(   "Byte-MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
430	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  1 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  1 ");	  throw    new    IllegalArgumentException(   "Byte-MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
431	[BUG]  [BUGGY]  tate  <  NUMBER_INT  ||  allNUL)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  tate  <  NUMBER_INT  ||  allNUL)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	tate  <  NUMBER_INT  ||  allNUL)  {  throw  new  IllegalStateException( " ");  }	  if(allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
432	[BUG]  [BUGGY]  aught(new  IllegalStateException( " "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(new  IllegalStateException( " "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(new  IllegalStateException( " "))  {  throw  new  IllegalStateException( " ");  }	  if(allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
433	[BUG]  [BUGGY]  tate  <  NUMBER_INT  ||  allNUL)  {  throw  new  IllegalStateException( " "  +  i);  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  tate  <  NUMBER_INT  ||  allNUL)  {  throw  new  IllegalStateException( " "  +  i);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	tate  <  NUMBER_INT  ||  allNUL)  {  throw  new  IllegalStateException( " "  +  i);  }	  if(allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
434	[BUG]  [BUGGY]  tate  <  NUMBER_INT  ||  allNUL)  {  throw  new  IllegalStateException( " ".equals(i);  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  tate  <  NUMBER_INT  ||  allNUL)  {  throw  new  IllegalStateException( " ".equals(i);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	tate  <  NUMBER_INT  ||  allNUL)  {  throw  new  IllegalStateException( " ".equals(i);  }	  if(allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
435	[BUG]  [BUGGY]  tate  <  NUMBER_INT  ||  allNUL)  {  throw  new  IllegalStateException( " ".getMessage());  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  tate  <  NUMBER_INT  ||  allNUL)  {  throw  new  IllegalStateException( " ".getMessage());  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	tate  <  NUMBER_INT  ||  allNUL)  {  throw  new  IllegalStateException( " ".getMessage());  }	  if(allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
436	[BUG]  [BUGGY]  tate  <  NUMBER_INT  ||  allNUL)  {  throw  new  IllegalStateException( ". ");  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  tate  <  NUMBER_INT  ||  allNUL)  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	tate  <  NUMBER_INT  ||  allNUL)  {  throw  new  IllegalStateException( ". ");  }	  if(allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
437	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ".equals(length));  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ".equals(length));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2   ".equals(length));	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
438	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ".equals(length));  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ".equals(length));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ".equals(length));	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
439	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2   ".equals(length));  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2   ".equals(length));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2   ".equals(length));	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
440	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2   ".equals(buffer,  length));  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2   ".equals(buffer,  length));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2   ".equals(buffer,  length));	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
441	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2   ".equals(end));  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2   ".equals(end));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2   ".equals(end));	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
442	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  1 ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  1 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    1   ");    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
443	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  1 "  +  i);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  1 "  +  i);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  1 "  +  i);	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    1   ");    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
444	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ").equals(buffer[i]);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( " ").equals(buffer[i]);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( " ").equals(buffer[i]);	  throw    new    IllegalStateException(   "   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
445	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ").equals(buffer[i]));  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( " ").equals(buffer[i]));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( " ").equals(buffer[i]));	  throw    new    IllegalStateException(   "   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
446	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  buffer[i]);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( " "  +  buffer[i]);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( " "  +  buffer[i]);	  throw    new    IllegalStateException(   "   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
447	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  getMessage());  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( " "  +  getMessage());  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( " "  +  getMessage());	  throw    new    IllegalStateException(   "   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
448	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(buffer[i],  allNUL));  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( " ".equals(buffer[i],  allNUL));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( " ".equals(buffer[i],  allNUL));	  throw    new    IllegalStateException(   "   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
449	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
450	[BUG]  [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
451	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
452	[BUG]  [BUGGY]  while(start  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
453	[BUG]  [BUGGY]  if(length  >  buffer[i]  ||  end  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i]  ||  end  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i]  ||  end  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
454	[BUG]  [BUGGY]  if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
455	[BUG]  [BUGGY]  while(start  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
456	[BUG]  [BUGGY]  if(allNUL  &&  length  <  2)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  &&  length  <  2)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  &&  length  <  2)  {  break;  }	  if(allNUL    ||    length    <    2)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
457	[BUG]  [BUGGY]  if(length  ||  allNUL)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ||  allNUL)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ||  allNUL)  {  break;  }	  if(allNUL    ||    length    <    2)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
458	[BUG]  [BUGGY]  if(allNUL  ||  length  <  2)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  length  <  2)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  length  <  2)  {  throw  new  IllegalStateException( " ");  }	  if(allNUL    ||    length    <    2)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
459	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  at  least  2.0 ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  at  least  2.0 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "ByTE_MASK  must  be  at  least  2.0 ");	  throw    new    IllegalArgumentException(   "BYTE_MASK    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
460	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2. ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2.   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
461	[BUG]  [BUGGY]  while(start  >=  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  >=  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  >=  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
462	[BUG]  [BUGGY]  while(start  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
463	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  length;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  length;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  length;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
464	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  block[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  block[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  block[i].toByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
465	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  offset[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  offset[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  offset[i].toByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
466	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte().byteValue();  }  [CE]  illegal  start  of  expression  [FE]                                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte().byteValue();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte().byteValue();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
467	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  i);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  i);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( " "  +  i);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
468	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".getMessage());  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".getMessage());  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( " ".getMessage());	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
469	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(start));  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(start));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(start));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
470	[BUG]  [BUGGY]  allowNonEmpty(i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowNonEmpty(i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowNonEmpty(i)  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
471	[BUG]  [BUGGY]  aught(IllegalArgumentException.create(buffer,  i));  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(IllegalArgumentException.create(buffer,  i));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(IllegalArgumentException.create(buffer,  i));	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
472	[BUG]  [BUGGY]  aught(IllegalArgumentException.create(start,  i));  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(IllegalArgumentException.create(start,  i));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(IllegalArgumentException.create(start,  i));	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
473	[BUG]  [BUGGY]  aught(IllegalArgumentException.class,   "Unknown  type ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(IllegalArgumentException.class,   "Unknown  type ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(IllegalArgumentException.class,   "Unknown  type ");	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
474	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " "));  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(new  IllegalArgumentException( " "));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(new  IllegalArgumentException( " "));	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
475	[BUG]  [BUGGY]  aught(IllegalArgumentException.create(buffer,  i,  length));  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(IllegalArgumentException.create(buffer,  i,  length));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(IllegalArgumentException.create(buffer,  i,  length));	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
476	[BUG]  [BUGGY]  if(allNUL  &&  buffer[start]  ==  '')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  &&  buffer[start]  ==  '')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  &&  buffer[start]  ==  '')  {  break;  }	  if(!allNUL    ||    buffer[start]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
477	[BUG]  [BUGGY]  if(start  ==  end  ||  buffer[start]  ==  '')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(start  ==  end  ||  buffer[start]  ==  '')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(start  ==  end  ||  buffer[start]  ==  '')  {  break;  }	  if(!allNUL    ||    buffer[start]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
478	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(end));  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(end));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( " ".equals(end));	  throw    new    IllegalArgumentException(   "   ".equals(i));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
479	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  ' "  +  start  + "' ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  ' "  +  start  + "' ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  ' "  +  start  + "' ");	  throw    new    IllegalArgumentException(   "   ".equals(i));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
480	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  ' "  +  start  + "' ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  ' "  +  start  + "' ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  ' "  +  start  + "' ");	  throw    new    IllegalArgumentException(   "   ".equals(i));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
481	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  ' "  +  start  + "'. ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  ' "  +  start  + "'. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  >  ' "  +  start  + "'. ");	  throw    new    IllegalArgumentException(   "   ".equals(i));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
482	[BUG]  [BUGGY]  if(allNUL  ||  start  ==  end)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  start  ==  end)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  start  ==  end)  {  continue;  }	  if(allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
483	[BUG]  [BUGGY]  if(allNUL)  {  continue  true;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL)  {  continue  true;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL)  {  continue  true;  }	  if(allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
484	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  two.  Most  likely: ");  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  two.  Most  likely: ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  two.  Most  likely: ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    two.   ");    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
485	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  two.  Most  likely: "  +  i);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  two.  Most  likely: "  +  i);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  two.  Most  likely: "  +  i);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    two.   ");    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
486	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  1 ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  1 ");	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    >    -1   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
487	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1 "+length);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1 "+length);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  >  -1 "+length);	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    >    -1   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
488	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  1 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  >  1 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
489	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
490	[BUG]  [BUGGY]  if(end  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(end  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(end  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
491	[BUG]  [BUGGY]  if(i  >  start)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  >  start)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  >  start)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
492	[BUG]  [BUGGY]  if(end  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(end  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(end  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
493	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
494	[BUG]  [BUGGY]  if(end  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(end  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(end  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
495	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  return  0L;  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
496	[BUG]  [BUGGY]  if(start  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(start  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(start  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    ==    BYTE_MASK)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
497	[BUG]  [BUGGY]  while(i  <  end)  {  if(length  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(i  <  end)  {  if(length  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(i  <  end)  {  if(length  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    ==    BYTE_MASK)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
498	[BUG]  [BUGGY]  if(allNUL  ||  buffer[i]  =='')  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  buffer[i]  =='')  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  buffer[i]  =='')  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL    ||    buffer[i]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
499	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByteArray();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
500	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  BYTE_MASK)  {  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByteArray();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
501	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByteArray();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
502	[BUG]  [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  ==  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByteArray();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
503	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  return  0;  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  return  0;  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  return  0;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    return    0;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
504	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);  return  0;  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);  return  0;  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);  return  0;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    return    0;    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
505	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  1 ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  ' "+length+ "'  must  be  at  least  2  or  1 ");	  throw    new    IllegalArgumentException(   "Length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
506	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  at  least  2  or  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "ByTE_MASK  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "BYTE_MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
507	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  at  least  1 ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  at  least  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "ByTE_MASK  must  be  at  least  1 ");	  throw    new    IllegalArgumentException(   "BYTE_MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
508	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "BYTE_MASK  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "BYTE_MASK  must  be  at  least  2  or  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "BYTE_MASK  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "BYTE_MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
509	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null.  If(start  ==  start)  {  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null. ");  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null.  If(start  ==  start)  {  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null. ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null.  If(start  ==  start)  {  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null. ");  }	  throw    new    IllegalArgumentException(   "Byte_MASK    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
510	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null.  If(start  ==  start  +  i)  {  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null. ");  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null.  If(start  ==  start  +  i)  {  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null. ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null.  If(start  ==  start  +  i)  {  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null. ");  }	  throw    new    IllegalArgumentException(   "Byte_MASK    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
511	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2   ".equals(buffer[i]));  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2   ".equals(buffer[i]));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2   ".equals(buffer[i]));	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
512	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ".equals(buffer[i]));  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ".equals(buffer[i]));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ".equals(buffer[i]));	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
513	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ".equals(buffer[i]));  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ".equals(buffer[i]));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ".equals(buffer[i]));	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
514	[BUG]  [BUGGY]  while(start  >=  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  >=  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  >=  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    new    ByteArrayInputStream(buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
515	[BUG]  [BUGGY]  if(length  >  0)  {  int  start  =  offset;  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  int  start  =  offset;  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  int  start  =  offset;  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    new    ByteArrayInputStream(buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
516	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  offset;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  for(int  i  =  offset;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  for(int  i  =  offset;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    new    ByteArrayInputStream(buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
517	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  ByteArrayInputStream(buffer[i]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  ByteArrayInputStream(buffer[i]);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    new    ByteArrayInputStream(buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
518	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start  +  1;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  for(int  i  =  start  +  1;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  for(int  i  =  start  +  1;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    new    ByteArrayInputStream(buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
519	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i].getCharset());  }  [CE]  illegal  start  of  expression  [FE]                                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i].getCharset());  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i].getCharset());  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    new    ByteArrayInputStream(buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
520	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  1 ");  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  1 ");	  throw    new    IllegalArgumentException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
521	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  less  than  2 ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  less  than  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ "'  must  be  less  than  2 ");	  throw    new    IllegalArgumentException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
522	[BUG]  [BUGGY]  if(start  ||  end)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(start  ||  end)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(start  ||  end)  {  break;  }	  if(allNUL    ||    end)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
523	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  i);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalStateException( " "  +  i);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( " "  +  i);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
524	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(i));  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(i));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( " ".equalsIgnoreCase(i));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
525	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  i);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalStateException( " ",  i);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( " ",  i);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
526	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2 ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length "+length+ "  must  be  >  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
527	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
528	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes.  If(length  ==  BYTE_MASK)  {  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes. ");  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes.  If(length  ==  BYTE_MASK)  {  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes. ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes.  If(length  ==  BYTE_MASK)  {  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes. ");  }	  throw    new    IllegalArgumentException(   "Byte    '   "    +    length    +   "'    must    be    at    least    2    bytes.   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
529	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes.  If(length  <  =  0)  {  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes. ");  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes.  If(length  <  =  0)  {  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes. ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes.  If(length  <  =  0)  {  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  must  be  at  least  2  bytes. ");  }	  throw    new    IllegalArgumentException(   "Byte    '   "    +    length    +   "'    must    be    at    least    2    bytes.   ");    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
530	[BUG]  [BUGGY]  while(start  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
531	[BUG]  [BUGGY]  while(start  >=  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  >=  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  >=  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
532	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
533	[BUG]  [BUGGY]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
534	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >   ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >   ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "ByTE_MASK  must  be  >   ");	  throw    new    IllegalArgumentException(   "ByTE_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
535	[BUG]  [BUGGY]  while(!allNUL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(!allNUL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(!allNUL)  {  throw  new  IllegalArgumentException( " ");  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
536	[BUG]  [BUGGY]  result  |=!allNUL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  result  |=!allNUL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	result  |=!allNUL)  {  throw  new  IllegalArgumentException( " ");  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
537	[BUG]  [BUGGY]  while(!allNUL)  {  throw  new  IllegalArgumentException( " ".equals(i));  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(!allNUL)  {  throw  new  IllegalArgumentException( " ".equals(i));  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(!allNUL)  {  throw  new  IllegalArgumentException( " ".equals(i));  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
538	[BUG]  [BUGGY]  if(start  ==  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(start  ==  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(start  ==  BYTE_MASK)  {  continue;  }	  if(length    ==    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
539	[BUG]  [BUGGY]  if(end  ==  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(end  ==  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(end  ==  BYTE_MASK)  {  continue;  }	  if(length    ==    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
540	[BUG]  [BUGGY]  if(allNUL)  {  return  -1;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL)  {  return  -1;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL)  {  return  -1;  }	  if(allNUL)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
541	[BUG]  [BUGGY]  if(allNUL)  {  return  1;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL)  {  return  1;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL)  {  return  1;  }	  if(allNUL)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
542	[BUG]  [BUGGY]  if(length  >  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  BYTE_MASK)  {  continue;  }	  if(length    <    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
543	[BUG]  [BUGGY]  if(i  <  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  <  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  <  BYTE_MASK)  {  continue;  }	  if(length    <    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
544	[BUG]  [BUGGY]  if(length  <  =  1)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  =  1)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  =  1)  {  continue;  }	  if(length    <    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
545	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1 "  +  i);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1 "  +  i);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  1 "  +  i);	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    1   ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
546	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  length  of   "+length+ "  must  be  at  least  1 ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  length  of   "+length+ "  must  be  at  least  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  length  of   "+length+ "  must  be  at  least  1 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    1   ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
547	[BUG]  [BUGGY]  if(!allNUL  &&  length  <  =  BYTE_MASK)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  &&  length  <  =  BYTE_MASK)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  &&  length  <  =  BYTE_MASK)  {  break;  }	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
548	[BUG]  [BUGGY]  if(allNUL  ||  end  <  =  BYTE_MASK)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  end  <  =  BYTE_MASK)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  end  <  =  BYTE_MASK)  {  break;  }	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
549	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >   ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  must  be  >   ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  must  be  >   ");	  throw    new    IllegalArgumentException(   "Byte_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
550	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  object  of  type "  +  start);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  object  of  type "  +  start);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  an  object  of  type "  +  start);	  throw    new    IllegalStateException(   "Byte    is    not    an    object    of    type   ");    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
551	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  1 ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  1 ");	  throw    new    IllegalArgumentException(   "Byte-MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
552	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2 "+length);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2 "+length);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2 "+length);	  throw    new    IllegalArgumentException(   "Byte-MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
553	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2 "  +  start);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2 "  +  start);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte-MASK  must  be  at  least  2 "  +  start);	  throw    new    IllegalArgumentException(   "Byte-MASK    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
554	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2  or  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length[ "+length+ "  must  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
555	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  3 ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  3 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  3 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
556	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal( "msg.internal.start ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.throwInternal( "msg.internal.start ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.throwInternal( "msg.internal.start ");	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
557	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal( "msg.invalid.length ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.throwInternal( "msg.invalid.length ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.throwInternal( "msg.invalid.length ");	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
558	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal(i,  length);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.throwInternal(i,  length);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.throwInternal(i,  length);	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
559	[BUG]  [BUGGY]  aughtExceptionHandler.throwIOException( " ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.throwIOException( " ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.throwIOException( " ");	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
560	[BUG]  [BUGGY]  while(start  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
561	[BUG]  [BUGGY]  if(length  >  buffer[i]  ||  end  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i]  ||  end  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i]  ||  end  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
562	[BUG]  [BUGGY]  if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
563	[BUG]  [BUGGY]  if(length  >  buffer[i]  ||  start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i]  ||  start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i]  ||  start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
564	[BUG]  [BUGGY]  while(offset  <  length)  {  buffer[i]  =  start;  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length)  {  buffer[i]  =  start;  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length)  {  buffer[i]  =  start;  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
565	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ".);  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
566	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start  +  1;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start  +  1;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start  +  1;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
567	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  1 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  1 ");	  throw    new    IllegalStateException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
568	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  3 ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  3 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Unexpected  length  ' "+length+ "'  must  be  at  least  2  or  3 ");	  throw    new    IllegalStateException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
569	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  should  be  at  least  2  or  2 ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  should  be  at  least  2  or  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  should  be  at  least  2  or  2 ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    should    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
570	[BUG]  [BUGGY]  throw  new  IllegalStateException( " "  +  end.equals(buffer[i]));  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( " "  +  end.equals(buffer[i]));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( " "  +  end.equals(buffer[i]));	  throw    new    IllegalStateException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
571	[BUG]  [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK.equals(end));  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK.equals(end));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "BYTE_MASK.equals(end));	  throw    new    IllegalStateException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
572	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(start));  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( " ".equals(start));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( " ".equals(start));	  throw    new    IllegalStateException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
573	[BUG]  [BUGGY]  throw  new  IllegalStateException( "End  of  offset  ' "  +  end  + "'  must  be  at  least  1 ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "End  of  offset  ' "  +  end  + "'  must  be  at  least  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "End  of  offset  ' "  +  end  + "'  must  be  at  least  1 ");	  throw    new    IllegalStateException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
574	[BUG]  [BUGGY]  throw  new  IllegalStateException( "End  of  offset  ' "  +  start  + "'  must  be  at  least  1 ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "End  of  offset  ' "  +  start  + "'  must  be  at  least  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "End  of  offset  ' "  +  start  + "'  must  be  at  least  1 ");	  throw    new    IllegalStateException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
575	[BUG]  [BUGGY]  result  |=!allNUL)  {  throw  new  IllegalArgumentException( " ".equals(i));  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  result  |=!allNUL)  {  throw  new  IllegalArgumentException( " ".equals(i));  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	result  |=!allNUL)  {  throw  new  IllegalArgumentException( " ".equals(i));  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ".equals(i));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
576	[BUG]  [BUGGY]  if(!allNUL)  {  throw  new  IllegalArgumentException( " "  +  i);  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL)  {  throw  new  IllegalArgumentException( " "  +  i);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  throw  new  IllegalArgumentException( " "  +  i);  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ".equals(i));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
577	[BUG]  [BUGGY]  result  |=!allNUL)  {  throw  new  IllegalArgumentException( " "  +  i);  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  result  |=!allNUL)  {  throw  new  IllegalArgumentException( " "  +  i);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	result  |=!allNUL)  {  throw  new  IllegalArgumentException( " "  +  i);  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ".equals(i));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
578	[BUG]  [BUGGY]  if(!allNUL)  {  throw  new  IllegalArgumentException( " "+i+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL)  {  throw  new  IllegalArgumentException( " "+i+ "  must  be  at  least  2 ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  throw  new  IllegalArgumentException( " "+i+ "  must  be  at  least  2 ");  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ".equals(i));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
579	[BUG]  [BUGGY]  result  |=!allNUL)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  result  |=!allNUL)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	result  |=!allNUL)  {  throw  new  IllegalStateException( " ");  }	  if(!allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
580	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowNonEmpty(start,  end)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowNonEmpty(start,  end)  {  throw  new  IllegalStateException( " ");  }	  if(!allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
581	[BUG]  [BUGGY]  allowNonEmpty(start,  i)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowNonEmpty(start,  i)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowNonEmpty(start,  i)  {  throw  new  IllegalStateException( " ");  }	  if(!allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
582	[BUG]  [BUGGY]  result  |=!allNUL)  {  throw  new  IllegalStateException( " ".equals(i);  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  result  |=!allNUL)  {  throw  new  IllegalStateException( " ".equals(i);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	result  |=!allNUL)  {  throw  new  IllegalStateException( " ".equals(i);  }	  if(!allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
583	[BUG]  [BUGGY]  result  |=!allNUL)  {  throw  new  IllegalStateException( ". ");  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  result  |=!allNUL)  {  throw  new  IllegalStateException( ". ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	result  |=!allNUL)  {  throw  new  IllegalStateException( ". ");  }	  if(!allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
584	[BUG]  [BUGGY]  result  |=!allNUL)  {  throw  new  IllegalStateException( " ".  allNull();  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  result  |=!allNUL)  {  throw  new  IllegalStateException( " ".  allNull();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	result  |=!allNUL)  {  throw  new  IllegalStateException( " ".  allNull();  }	  if(!allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
585	[BUG]  [BUGGY]  result  |=!allNUL)  {  throw  new  IllegalStateException( " ".equals(start);  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  result  |=!allNUL)  {  throw  new  IllegalStateException( " ".equals(start);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	result  |=!allNUL)  {  throw  new  IllegalStateException( " ".equals(start);  }	  if(!allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
586	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2  or  2 ",  allNUL);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ",    allNUL);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
587	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ",  i);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ",  i);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ",  i);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ",    allNUL);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
588	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  offset);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  offset);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  offset);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
589	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  1 ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  >  1 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
590	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  should  not  be  null.  Invalid  start  of  offset: "  +  start);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  should  not  be  null.  Invalid  start  of  offset: "  +  start);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  should  not  be  null.  Invalid  start  of  offset: "  +  start);	  throw    new    IllegalStateException(   "Byte    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
591	[BUG]  [BUGGY]  if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[start])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
592	[BUG]  [BUGGY]  (int)BYTE_MASK  ||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  (int)BYTE_MASK  ||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	(int)BYTE_MASK  ||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
593	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start  +  1;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start  +  1;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start  +  1;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
594	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getbyte();  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getbyte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getbyte();  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
595	[BUG]  [BUGGY]  if(!allNUL  ||  buffer[start]  =='')  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  buffer[start]  =='')  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  buffer[start]  =='')  {  continue;  }	  if(!allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
596	[BUG]  [BUGGY]  if(!allNUL  ||  buffer[i]  =='')  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  buffer[i]  =='')  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  buffer[i]  =='')  {  continue;  }	  if(!allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
597	[BUG]  [BUGGY]  if(!allNUL  ||  buffer[i]!='')  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  buffer[i]!='')  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  buffer[i]!='')  {  continue;  }	  if(!allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
598	[BUG]  [BUGGY]  if(!allNUL)  {  continue  true;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL)  {  continue  true;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  continue  true;  }	  if(!allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
599	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ ".'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ ".'  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ ".'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
600	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ ",'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ ",'  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Unexpected  length  ' "+length+ ",'  must  be  at  least  2 ");	  throw    new    IllegalArgumentException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
601	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2   ".equals(offset));  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2   ".equals(offset));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2   ".equals(offset));	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
602	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ".equals(length));  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ".equals(length));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2   ".equals(length));	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ".equals(length));    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
603	[BUG]  [BUGGY]  if(length  >  0  ||  buffer[start]  =='')  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0  ||  buffer[start]  =='')  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0  ||  buffer[start]  =='')  {  continue;  }	  if(length    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
604	[BUG]  [BUGGY]  if(length  >  0)  {  continue  BYTE_MASK;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  continue  BYTE_MASK;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  continue  BYTE_MASK;  }	  if(length    >    0)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
605	[BUG]  [BUGGY]  aughtExceptionUtils.throwAsIOException( " ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionUtils.throwAsIOException( " ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionUtils.throwAsIOException( " ");	  if(length    >    0)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
606	[BUG]  [BUGGY]  aughtExceptionHandler( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ");	  if(length    >    0)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
607	[BUG]  [BUGGY]  aughtExceptionHandler( "Unexpected  length  ' "+length+ "'  must  be  in  the  range  [ "+i+ "]. ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler( "Unexpected  length  ' "+length+ "'  must  be  in  the  range  [ "+i+ "]. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler( "Unexpected  length  ' "+length+ "'  must  be  in  the  range  [ "+i+ "]. ");	  if(length    >    0)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
608	[BUG]  [BUGGY]  aughtExceptionHandler( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ",  allNUL);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ",  allNUL);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler( "Unexpected  length  ' "+length+ "'  must  be  at  least  2 ",  allNUL);	  if(length    >    0)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
609	[BUG]  [BUGGY]  aughtExceptionHandler( "Unexpected  length  ' "+length+ "'  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler( "Unexpected  length  ' "+length+ "'  must  be  at  least  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler( "Unexpected  length  ' "+length+ "'  must  be  at  least  2. ");	  if(length    >    0)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
610	[BUG]  [BUGGY]  aughtExceptionHandler( "Unexpected  length  ' "+length+ "'  must  be  in  the  range  [ "+offset+ "] ");  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler( "Unexpected  length  ' "+length+ "'  must  be  in  the  range  [ "+offset+ "] ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler( "Unexpected  length  ' "+length+ "'  must  be  in  the  range  [ "+offset+ "] ");	  if(length    >    0)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
611	[BUG]  [BUGGY]  ||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||  length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
612	[BUG]  [BUGGY]  ||  length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||  length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||  length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
613	[BUG]  [BUGGY]  while(start  >=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  >=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  >=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
614	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ ".'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ ".'  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Unexpected  length  ' "+length+ ".'  must  be  at  least  2 ");	  throw    new    IllegalStateException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
615	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ ",'  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Unexpected  length  ' "+length+ ",'  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Unexpected  length  ' "+length+ ",'  must  be  at  least  2 ");	  throw    new    IllegalStateException(   "Unexpected    length    '   "+length+   "'    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
616	[BUG]  [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK  ||  length  >  BYTE_BACKSLASH)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK  ||  length  >  BYTE_BACKSLASH)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK  ||  length  >  BYTE_BACKSLASH)  {  continue;  }	  if(length    <    BYTE_MASK    ||    length    >    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
617	[BUG]  [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK  ||  length  >  BYTE_LONG)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK  ||  length  >  BYTE_LONG)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK  ||  length  >  BYTE_LONG)  {  continue;  }	  if(length    <    BYTE_MASK    ||    length    >    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
618	[BUG]  [BUGGY]  if(length!=  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length!=  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length!=  BYTE_MASK)  {  continue;  }	  if(length    ==    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
619	[BUG]  [BUGGY]  aughtIfNonArray( "  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtIfNonArray( "  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtIfNonArray( "  {  throw  new  IllegalStateException( " ");  }	  if(allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
620	[BUG]  [BUGGY]  aught(new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(new  IllegalStateException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(new  IllegalStateException( " ");  }	  if(allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
621	[BUG]  [BUGGY]  aught(new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(new  IllegalStateException( " ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(new  IllegalStateException( " ");	  if(allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
622	[BUG]  [BUGGY]  aught(new  IllegalStateException( " ").toString()));  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(new  IllegalStateException( " ").toString()));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(new  IllegalStateException( " ").toString()));	  if(allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
623	[BUG]  [BUGGY]  aughtIfNonArray( "  {  throw  new  IllegalStateException( " "));  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtIfNonArray( "  {  throw  new  IllegalStateException( " "));  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtIfNonArray( "  {  throw  new  IllegalStateException( " "));  }	  if(allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
624	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).allNUL();  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(new  IllegalArgumentException( " ")).allNUL();  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(new  IllegalArgumentException( " ")).allNUL();	  if(allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
625	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  should  not  be  null. ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  should  not  be  null. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  should  not  be  null. ");	  throw    new    IllegalStateException(   "Byte    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
626	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  should  not  be  null! ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  should  not  be  null! ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  should  not  be  null! ");	  throw    new    IllegalStateException(   "Byte    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
627	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  should  not  be  null.  All  of  them. ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  should  not  be  null.  All  of  them. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  should  not  be  null.  All  of  them. ");	  throw    new    IllegalStateException(   "Byte    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
628	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  should  not  be  null.  All  of  them  must  be  in  the  range  [ "  +  start  + "] ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  should  not  be  null.  All  of  them  must  be  in  the  range  [ "  +  start  + "] ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  should  not  be  null.  All  of  them  must  be  in  the  range  [ "  +  start  + "] ");	  throw    new    IllegalStateException(   "Byte    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
629	[BUG]  [BUGGY]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
630	[BUG]  [BUGGY]  if(length  >=  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >=  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >=  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]!=  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]!='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
631	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  length: "  +  length+ "  must  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  length: "  +  length+ "  must  be  at  least  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  length: "  +  length+ "  must  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "Byte    length:   "    +    length);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
632	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  in  the  range  [ "  +  start  + ", "  +  end  + "] ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  in  the  range  [ "  +  start  + ", "  +  end  + "] ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  in  the  range  [ "  +  start  + ", "  +  end  + "] ");	  throw    new    IllegalStateException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
633	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  in  the  range  [ "  +  start  + "] ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  in  the  range  [ "  +  start  + "] ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  in  the  range  [ "  +  start  + "] ");	  throw    new    IllegalStateException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
634	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  in  the  range  [ "  +  start  + ", "  +  end  + "]. ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  in  the  range  [ "  +  start  + ", "  +  end  + "]. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  in  the  range  [ "  +  start  + ", "  +  end  + "]. ");	  throw    new    IllegalStateException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
635	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  in  the  range  [ "  +  end  + "] ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  in  the  range  [ "  +  end  + "] ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  in  the  range  [ "  +  end  + "] ");	  throw    new    IllegalStateException(   "   ".equals(end));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
636	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2. ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  >  2. ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    >    2   ");    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
637	[BUG]  [BUGGY]  if(allNUL  ||  buffer[i]  ==  '.')  {  break;  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  buffer[i]  ==  '.')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  buffer[i]  ==  '.')  {  break;  }	  if(allNUL    ||    buffer[i]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
638	[BUG]  [BUGGY]  if(buffer[i]  ==''  ||  buffer[i]  ==  '.')  {  break;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(buffer[i]  ==''  ||  buffer[i]  ==  '.')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(buffer[i]  ==''  ||  buffer[i]  ==  '.')  {  break;  }	  if(allNUL    ||    buffer[i]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
639	[BUG]  [BUGGY]  if(!allNUL  ||  buffer[start]  ==  '.')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  buffer[start]  ==  '.')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  buffer[start]  ==  '.')  {  break;  }	  if(!allNUL    ||    buffer[start]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
640	[BUG]  [BUGGY]  if(!allNUL  ||  buffer[start]  ==  '/')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  buffer[start]  ==  '/')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  buffer[start]  ==  '/')  {  break;  }	  if(!allNUL    ||    buffer[start]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
641	[BUG]  [BUGGY]  if(!allNUL  ||  buffer[start]  ==  ',')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  buffer[start]  ==  ',')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  buffer[start]  ==  ',')  {  break;  }	  if(!allNUL    ||    buffer[start]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
642	[BUG]  [BUGGY]  if(!allNUL  ||  length  >  buffer[i])  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  length  >  buffer[i])  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  length  >  buffer[i])  {  break;  }	  if(!allNUL    ||    end    >    buffer[i])    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
643	[BUG]  [BUGGY]  if(!allNUL  ||  end  <  length)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  end  <  length)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  end  <  length)  {  break;  }	  if(!allNUL    ||    end    >    buffer[i])    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
644	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].subtract(offset,  offset  +  length);  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].subtract(offset,  offset  +  length);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].subtract(offset,  offset  +  length);  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
645	[BUG]  [BUGGY]  if(length  >  buffer[i]  ||  end  >  buffer[i].getByte())  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i]  ||  end  >  buffer[i].getByte())  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i]  ||  end  >  buffer[i].getByte())  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
646	[BUG]  [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  block[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  block[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  block[i].getByte();  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
647	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowNonEmpty(start,  end)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowNonEmpty(start,  end)  {  throw  new  IllegalArgumentException( " ");  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
648	[BUG]  [BUGGY]  allowNonEmpty(start)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowNonEmpty(start)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowNonEmpty(start)  {  throw  new  IllegalArgumentException( " ");  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
649	[BUG]  [BUGGY]  allowNonEmpty(start)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowNonEmpty(start)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowNonEmpty(start)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
650	[BUG]  [BUGGY]  allowNonEmpty(start,  i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowNonEmpty(start,  i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowNonEmpty(start,  i)  {  throw  new  IllegalArgumentException( " ");  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
651	[BUG]  [BUGGY]  allowNonEmpty(start,  end))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowNonEmpty(start,  end))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowNonEmpty(start,  end))  {  throw  new  IllegalArgumentException( " ");  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
652	[BUG]  [BUGGY]  allowNonEmpty(start))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowNonEmpty(start))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowNonEmpty(start))  {  throw  new  IllegalArgumentException( " ");  }	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
653	[BUG]  [BUGGY]  allowState(!allNUL)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowState(!allNUL)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowState(!allNUL)  {  throw  new  IllegalStateException( " ");  }	  if(!allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
654	[BUG]  [BUGGY]  allowSelf( "true "))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  allowSelf( "true "))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	allowSelf( "true "))  {  throw  new  IllegalStateException( " ");  }	  if(!allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
655	[BUG]  [BUGGY]  aughtException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtException( " ");  }	  if(!allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
656	[BUG]  [BUGGY]  aught(new  IllegalStateException( " ")).allNUL();  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(new  IllegalStateException( " ")).allNUL();  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(new  IllegalStateException( " ")).allNUL();	  if(!allNUL)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
657	[BUG]  [BUGGY]  if(allNUL  ||  length  <  =  2)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  length  <  =  2)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  length  <  =  2)  {  break;  }	  if(allNUL    ||    length    <    =    BYTE_MASK)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
658	[BUG]  [BUGGY]  if(allNUL  ||  length  >  buffer[start])  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  length  >  buffer[start])  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  length  >  buffer[start])  {  continue;  }	  if(allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
659	[BUG]  [BUGGY]  if(length  <  1)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  1)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  1)  {  continue;  }	  if(length    <    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
660	[BUG]  [BUGGY]  if(end  <  BYTE_MASK)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(end  <  BYTE_MASK)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(end  <  BYTE_MASK)  {  continue;  }	  if(length    <    BYTE_MASK)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
661	[BUG]  [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
662	[BUG]  [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  length;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  length;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  for(int  i  =  start;  i  <  length;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
663	[BUG]  [BUGGY]  ||(end  <  0))  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||(end  <  0))  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||(end  <  0))  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
664	[BUG]  [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  offset;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  offset;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  for(int  i  =  start;  i  <  offset;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
665	[BUG]  [BUGGY]  if(length  >=  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >=  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >=  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
666	[BUG]  [BUGGY]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
667	[BUG]  [BUGGY]  if(!allNUL  ||  buffer[i]!=  '.')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  buffer[i]!=  '.')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  buffer[i]!=  '.')  {  break;  }	  if(!allNUL    ||    buffer[i]!='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
668	[BUG]  [BUGGY]  if(!allNUL  &&  buffer[i]!=  '')  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  &&  buffer[i]!=  '')  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  &&  buffer[i]!=  '')  {  continue;  }	  if(!allNUL    ||    buffer[i]!='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
669	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  should  be  at  least  2. ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  should  be  at  least  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  should  be  at  least  2. ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    should    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
670	[BUG]  [BUGGY]  if(allNUL  ||  length  <  2)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  length  <  2)  {  return  0;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  length  <  2)  {  return  0;  }	  if(allNUL)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
671	[BUG]  [BUGGY]  if(allNUL  ||  end)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  end)  {  return  0;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  end)  {  return  0;  }	  if(allNUL)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
672	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 "  +  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 "  +  BYTE_MASK);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 "  +  BYTE_MASK);	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ",    allNUL);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
673	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  is  not  supported. ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  is  not  supported. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  is  not  supported. ");	  throw    new    IllegalArgumentException(   "   ".equals(i));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
674	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  is  not  supported. ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  is  not  supported. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  ' "  +  length  + "'  is  not  supported. ");	  throw    new    IllegalArgumentException(   "   ".equals(i));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
675	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  object  of  type "+length);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  object  of  type "+length);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  an  object  of  type "+length);	  throw    new    IllegalStateException(   "Byte    is    not    an    object    of    type   ");    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
676	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
677	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  else  {  System.arraycopy(buffer,  0,  buffer[start,  end]);  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  else  {  System.arraycopy(buffer,  0,  buffer[start,  end]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  else  {  System.arraycopy(buffer,  0,  buffer[start,  end]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
678	[BUG]  [BUGGY]  ||(end  >  0  &&  buffer[start  +  i]!=  '.'))  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||(end  >  0  &&  buffer[start  +  i]!=  '.'))  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||(end  >  0  &&  buffer[start  +  i]!=  '.'))  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
679	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  return  0L;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  return  0L;  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
680	[BUG]  [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer[start,  end]);  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer[start,  end]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  >  0)  {  System.arraycopy(buffer,  start,  buffer[start,  end]);  }  else  {  System.arraycopy(buffer,  start  +  1,  buffer[start,  end]);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start,    end]);    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
681	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  must  be  in  the  range  [ "  +  start  + "] ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  must  be  in  the  range  [ "  +  start  + "] ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  must  be  in  the  range  [ "  +  start  + "] ");	  throw    new    IllegalStateException(   "   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
682	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  can  not  parse: "  +  buffer[i]);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  can  not  parse: "  +  buffer[i]);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  can  not  parse: "  +  buffer[i]);	  throw    new    IllegalStateException(   "   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
683	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  must  be  in  the  range  [ "  +  start  + ", "  +  buffer[i]  + "] ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  must  be  in  the  range  [ "  +  start  + ", "  +  buffer[i]  + "] ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  must  be  in  the  range  [ "  +  start  + ", "  +  buffer[i]  + "] ");	  throw    new    IllegalStateException(   "   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
684	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  must  be  in  the  range  [ "  +  buffer[i]  + "] ");  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  must  be  in  the  range  [ "  +  buffer[i]  + "] ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  must  be  in  the  range  [ "  +  buffer[i]  + "] ");	  throw    new    IllegalStateException(   "   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
685	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  instance  of   "  +  buffer[i]);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  instance  of   "  +  buffer[i]);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  an  instance  of   "  +  buffer[i]);	  throw    new    IllegalStateException(   "   ".equals(buffer[i]));    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
686	[BUG]  [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByteArray();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
687	[BUG]  [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  length;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  length;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  for(int  i  =  start;  i  <  length;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByteArray();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
688	[BUG]  [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  =end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  =end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  for(int  i  =  start;  i  <  =end;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByteArray();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
689	[BUG]  [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  offset;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  offset;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  for(int  i  =  start;  i  <  offset;  i++)  {  buffer[i]  =  buffer[i].toByteArray();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByteArray();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
690	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(length));  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(length));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(length));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
691	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(end));  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(end));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( " ".equals(end));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
692	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Byte  is  not  a  string  state. ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalStateException( "Byte  is  not  a  string  state. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalStateException( "Byte  is  not  a  string  state. ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
693	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Try  again. ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Try  again. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Try  again. ");	  throw    new    IllegalStateException(   "Byte    is    not    a    string    state.   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
694	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  start  of  the  buffer  does  not  exist. ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  start  of  the  buffer  does  not  exist. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  start  of  the  buffer  does  not  exist. ");	  throw    new    IllegalStateException(   "Byte    is    not    a    string    state.   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
695	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  start  of  the  buffer[ "  +  start  + "]  does  not  exist. ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  start  of  the  buffer[ "  +  start  + "]  does  not  exist. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  a  string  state.  Please  check  that  the  start  of  the  buffer[ "  +  start  + "]  does  not  exist. ");	  throw    new    IllegalStateException(   "Byte    is    not    a    string    state.   ");    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
696	[BUG]  [BUGGY]  aughtInvalidEOF( "  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtInvalidEOF( "  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtInvalidEOF( "  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
697	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ").toString()));  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(new  IllegalArgumentException( " ").toString()));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(new  IllegalArgumentException( " ").toString()));	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
698	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(new  IllegalArgumentException( " ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(new  IllegalArgumentException( " ");	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
699	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ").allNull());  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(new  IllegalArgumentException( " ").allNull());  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(new  IllegalArgumentException( " ").allNull());	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
700	[BUG]  [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
701	[BUG]  [BUGGY]  ||(end  <  0))  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||(end  <  0))  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||(end  <  0))  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
702	[BUG]  [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  offset;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  offset;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  for(int  i  =  start;  i  <  offset;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
703	[BUG]  [BUGGY]  while(start  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  <  end)  {  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    new    ByteArrayInputStream(buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
704	[BUG]  [BUGGY]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    new    ByteArrayInputStream(buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
705	[BUG]  [BUGGY]  while(start  >=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  >=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  >=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  ByteArrayInputStream(buffer[i]);  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    new    ByteArrayInputStream(buffer[i]);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
706	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2.0. ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2.0. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2.0. ");	  throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2.0   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
707	[BUG]  [BUGGY]  if(!allNUL  ||  end  >  buffer[start])  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  end  >  buffer[start])  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  end  >  buffer[start])  {  continue;  }	  if(!allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
708	[BUG]  [BUGGY]  if(!allNUL  ||  end  >  buffer[i])  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  end  >  buffer[i])  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  end  >  buffer[i])  {  continue;  }	  if(!allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
709	[BUG]  [BUGGY]  if(!allNUL  &&  i  <  length)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  &&  i  <  length)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  &&  i  <  length)  {  continue;  }	  if(!allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
710	[BUG]  [BUGGY]  if(!allNUL  &&  end  <  =  length)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  &&  end  <  =  length)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  &&  end  <  =  length)  {  continue;  }	  if(!allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
711	[BUG]  [BUGGY]  if(!allNUL  ||  offset  >  length)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  offset  >  length)  {  continue;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  offset  >  length)  {  continue;  }	  if(!allNUL)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
712	[BUG]  [BUGGY]  if(i  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  >  0)  {  continue;  }  else  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
713	[BUG]  [BUGGY]  if(i  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(i  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(i  >  0)  {  System.arraycopy(buffer,  start,  buffer[start  +  i],  0,  length);  }	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
714	[BUG]  [BUGGY]  ||(end  >  0  &&  buffer[start  +  i]!=  '.'))  {  continue;  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||(end  >  0  &&  buffer[start  +  i]!=  '.'))  {  continue;  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||(end  >  0  &&  buffer[start  +  i]!=  '.'))  {  continue;	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
715	[BUG]  [BUGGY]  ||(end  >  0  &&  buffer[start  +  i]!=  '-'))  {  continue;  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||(end  >  0  &&  buffer[start  +  i]!=  '-'))  {  continue;  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||(end  >  0  &&  buffer[start  +  i]!=  '-'))  {  continue;	  if(length    >    0)    {    continue;    }    else    {    System.arraycopy(buffer,    start,    buffer[start    +    i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
716	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  1. ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  1. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  1. ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    1   ");    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
717	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  length   "+length+ "  must  be  at  least  1 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  length   "+length+ "  must  be  at  least  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  length   "+length+ "  must  be  at  least  1 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    1   ");    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
718	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  4 ");  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  4 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2  or  4 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
719	[BUG]  [BUGGY]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
720	[BUG]  [BUGGY]  while(start  >=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  >=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  >=  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].toByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].toByte();    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
721	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2.0. ");  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2.0. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2.0. ");	  throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2.0   ");    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
722	[BUG]  [BUGGY]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  BYTE_MASK;  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
723	[BUG]  [BUGGY]  ||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  byte[length];  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  ||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  byte[length];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	||!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  byte[length];  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
724	[BUG]  [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  byte[length];  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  byte[length];  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  new  byte[length];  }	  if(!allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
725	[BUG]  [BUGGY]  aughtExceptionHandler.handleInternal();  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.handleInternal();  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.handleInternal();	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
726	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal( "Current  exception ");  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.throwInternal( "Current  exception ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.throwInternal( "Current  exception ");	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
727	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal( "msg.internal.length ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.throwInternal( "msg.internal.length ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.throwInternal( "msg.internal.length ");	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
728	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal( "msg.unknown.length ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtExceptionHandler.throwInternal( "msg.unknown.length ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtExceptionHandler.throwInternal( "msg.unknown.length ");	  aughtExceptionHandler.throwInternal();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
729	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  instance  of   "+length);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte  is  not  an  instance  of   "+length);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte  is  not  an  instance  of   "+length);	  throw    new    IllegalStateException(   "   ".equals(i));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
730	[BUG]  [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  is  not  an  object  of  type "+length);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  is  not  an  object  of  type "+length);  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "BYTE_MASK  is  not  an  object  of  type "+length);	  throw    new    IllegalStateException(   "   ".equals(i));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
731	[BUG]  [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2  or  2. ");  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2  or  2. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "BYTE_MASK  must  be  at  least  2  or  2. ");	  throw    new    IllegalStateException(   "   ".equals(i));    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
732	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ").equals(i));  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(new  IllegalArgumentException( " ").equals(i));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(new  IllegalArgumentException( " ").equals(i));	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ".equals(i));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
733	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ").equals(end));  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(new  IllegalArgumentException( " ").equals(end));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(new  IllegalArgumentException( " ").equals(end));	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ".equals(i));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
734	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ").equals(length));  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(new  IllegalArgumentException( " ").equals(length));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(new  IllegalArgumentException( " ").equals(length));	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ".equals(i));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
735	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ").equals(getMessage()));  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(new  IllegalArgumentException( " ").equals(getMessage()));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(new  IllegalArgumentException( " ").equals(getMessage()));	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ".equals(i));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
736	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ").equals(start));  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aught(new  IllegalArgumentException( " ").equals(start));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aught(new  IllegalArgumentException( " ").equals(start));	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ".equals(i));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
737	[BUG]  [BUGGY]  aughtException( " ".equals(i));  [CE]  illegal  start  of  expression  [FE]                                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  aughtException( " ".equals(i));  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	aughtException( " ".equals(i));	  if(!allNUL)    {    throw    new    IllegalArgumentException(   "   ".equals(i));    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
738	[BUG]  [BUGGY]  while(start  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
739	[BUG]  [BUGGY]  while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(offset  <  length)  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
740	[BUG]  [BUGGY]  while(start  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  <  end)  {  if(length  >  buffer[i])  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
741	[BUG]  [BUGGY]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(length    >    buffer[i])    {    for(int    i    =    start;    i    <    end;    i++)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
742	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Bytes-MASK  must  be  >  0 ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Bytes-MASK  must  be  >  0 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Bytes-MASK  must  be  >  0 ");	  throw    new    IllegalArgumentException(   "Byte-MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
743	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  NULL. ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  NULL. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  NULL. ");	  throw    new    IllegalArgumentException(   "Byte_MASK    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
744	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null! ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null! ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte_MASK  should  not  be  null! ");	  throw    new    IllegalArgumentException(   "Byte_MASK    should    not    be    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
745	[BUG]  [BUGGY]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  if(length    >    0)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
746	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  4 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  4 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2  or  4 ");	  throw    new    IllegalArgumentException(   "Length   "+length+   "    must    be    at    least    2    or    2   ");    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
747	[BUG]  [BUGGY]  if(!allNUL  ||  buffer[i]  ==  '.')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  buffer[i]  ==  '.')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  buffer[i]  ==  '.')  {  break;  }	  if(!allNUL    ||    buffer[i]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
748	[BUG]  [BUGGY]  if(!allNUL  ||  buffer[i]  ==  '-')  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  buffer[i]  ==  '-')  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  buffer[i]  ==  '-')  {  break;  }	  if(!allNUL    ||    buffer[i]    =='')    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
749	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Byte_MASK  must  be  >  0. ");  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalStateException( "Byte_MASK  must  be  >  0. ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalStateException( "Byte_MASK  must  be  >  0. ");	  throw    new    IllegalStateException(   "BYTE_MASK    must    be    >    0   ");    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
750	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Byte  of   "+length+ "  must  be  at  least  1 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  throw  new  IllegalArgumentException( "Byte  of   "+length+ "  must  be  at  least  1 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	throw  new  IllegalArgumentException( "Byte  of   "+length+ "  must  be  at  least  1 ");	  throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    1   ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
751	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ ",  end  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ ",  end  must  be  at  least  2 ");  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	Throwables.throw  new  IllegalArgumentException( "Length  of "+length+ ",  end  must  be  at  least  2 ");	  Throwables.throw    new    IllegalArgumentException(   "Length    of   "+length+   "    must    be    at    least    2   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
752	[BUG]  [BUGGY]  if(end  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(end  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(end  ==  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    ==    BYTE_MASK)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
753	[BUG]  [BUGGY]  if(length  <  =  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(length  <  =  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(length  <  =  BYTE_MASK)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    ==    BYTE_MASK)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
754	[BUG]  [BUGGY]  if(start  ==  end)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(start  ==  end)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(start  ==  end)  {  continue;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(length    ==    BYTE_MASK)    {    continue;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
755	[BUG]  [BUGGY]  if(allNUL  ||  length)  {  break;  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  length)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  length)  {  break;  }	  if(allNUL    ||    end)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
756	[BUG]  [BUGGY]  if(!allNUL  ||  end)  {  break;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(!allNUL  ||  end)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(!allNUL  ||  end)  {  break;  }	  if(allNUL    ||    end)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
757	[BUG]  [BUGGY]  if(allNUL  ||  end  <  =  length)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;      [BUGGY]  if(allNUL  ||  end  <  =  length)  {  break;  }  [BUGGY]      }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  start++;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	69	69	1	replace	if(allNUL  ||  end  <  =  length)  {  break;  }	  if(allNUL    ||    end)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
