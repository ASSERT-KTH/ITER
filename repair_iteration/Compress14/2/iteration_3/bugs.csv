bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  end  =  offset  +  length.length;  [CE]  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length.length;	  int    end    =    offset    +    length.length    -    4;    	non-compiled	[CE]  	28	None	replace
2	[BUG]  [BUGGY]  int  end  =  offset  +  length.length  /  4;  [CE]  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length.length  /  4;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length.length  /  4;	  int    end    =    offset    +    length.length    -    4;    	non-compiled	[CE]  	28	None	replace
3	[BUG]  [BUGGY]  int  end  =  offset  +  length.length  -  3;  [CE]  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length.length  -  3;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length.length  -  3;	  int    end    =    offset    +    length.length    -    4;    	non-compiled	[CE]  	28	None	replace
4	[BUG]  [BUGGY]  int  end  =  offset  +  length.length  /  2;  [CE]  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length.length  /  2;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length.length  /  2;	  int    end    =    offset    +    length.length    -    4;    	non-compiled	[CE]  	28	None	replace
5	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK  -  1;  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK  -  1;	  int    end    =    offset    +    length    *    BYTE_MASK    -    1;    	non-compiled	[CE]  	24	None	replace
6	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  /  1;  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  /  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  /  1;	  int    end    =    offset    +    length    *    BYTE_MASK    -    1;    	non-compiled	[CE]  	24	None	replace
7	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  /  2  -  1;  [CE]  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  /  2  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  /  2  -  1;	  int    end    =    offset    +    length    *    BYTE_MASK    -    1;    	non-compiled	[CE]  	24	None	replace
8	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  buffer.length  -  1;  [CE]  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  buffer.length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  buffer.length  -  1;	  int    end    =    offset    +    length    *    BYTE_MASK    -    1;    	non-compiled	[CE]  	24	None	replace
9	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  -  2;  [CE]  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  -  2;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  -  2;	  int    end    =    offset    +    length    *    BYTE_MASK    -    1;    	non-compiled	[CE]  	24	None	replace
10	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  buffer.length  -  BYTE_MASK;  [CE]  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  buffer.length  -  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  buffer.length  -  BYTE_MASK;	  int    end    =    offset    +    length    -    buffer.length;    	non-compiled	[CE]  	21	None	replace
11	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  buffer.length  -  1;  [CE]  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  buffer.length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  buffer.length  -  1;	  int    end    =    offset    +    length    -    buffer.length;    	non-compiled	[CE]  	21	None	replace
12	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  buffer.length  +  1;  [CE]  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  buffer.length  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  buffer.length  +  1;	  int    end    =    offset    +    length    -    buffer.length;    	non-compiled	[CE]  	21	None	replace
13	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  buffer[offset.length  -  1];  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  buffer[offset.length  -  1];  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  buffer[offset.length  -  1];	  int    end    =    offset    +    length    -    buffer.length;    	non-compiled	[CE]  	21	None	replace
14	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  buffer.length  -  2;  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  buffer.length  -  2;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  buffer.length  -  2;	  int    end    =    offset    +    length    -    buffer.length;    	non-compiled	[CE]  	21	None	replace
15	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  length);  [CE]  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  length);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length,  length);	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    	non-compiled	[CE]  	7	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  +  1);  [CE]  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  +  1);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length  +  1);	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    	non-compiled	[CE]  	7	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  -  1);  [CE]  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  -  1);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length  -  1);	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    	non-compiled	[CE]  	7	None	replace
18	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  BYTE_MASK);  [CE]  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  BYTE_MASK);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length,  BYTE_MASK);	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    	non-compiled	[CE]  	7	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  size);  [CE]  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  size);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length,  size);	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    	non-compiled	[CE]  	7	None	replace
20	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  0);  [CE]  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  0);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length,  0);	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    	non-compiled	[CE]  	7	None	replace
21	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  -  start);  [CE]  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  -  start);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length  -  start);	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    	non-compiled	[CE]  	7	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  length);  result  =  BYTE_MASK;  [CE]  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  length);  result  =  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length,  length);  result  =  BYTE_MASK;	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  	12	None	replace
23	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  -  1);  result  =  BYTE_MASK;  [CE]  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  -  1);  result  =  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length  -  1);  result  =  BYTE_MASK;	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  	12	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  +  1);  result  =  BYTE_MASK;  [CE]  [FE]                                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  +  1);  result  =  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length  +  1);  result  =  BYTE_MASK;	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  	12	None	replace
25	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  result,  offset,  length);  [CE]  [FE]                                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  result,  offset,  length);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  result,  offset,  length);	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  	12	None	replace
26	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  -  2);  result  =  BYTE_MASK;  [CE]  [FE]                                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  -  2);  result  =  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length  -  2);  result  =  BYTE_MASK;	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  	12	None	replace
27	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK  +  4;  [CE]  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK  +  4;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK  +  4;	  int    end    =    offset    +    length    *    BYTE_MASK    +    4;    	non-compiled	[CE]  	26	None	replace
28	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  /  4;  [CE]  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  /  4;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  /  4;	  int    end    =    offset    +    length    *    BYTE_MASK    +    4;    	non-compiled	[CE]  	26	None	replace
29	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  3;  [CE]  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  3;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  +  3;	  int    end    =    offset    +    length    *    BYTE_MASK    +    4;    	non-compiled	[CE]  	26	None	replace
30	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  8;  [CE]  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  8;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  +  8;	  int    end    =    offset    +    length    *    BYTE_MASK    +    4;    	non-compiled	[CE]  	26	None	replace
31	[BUG]  [BUGGY]  byte  end  =  buffer.length  +  length  -  1;  [CE]  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  byte  end  =  buffer.length  +  length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	byte  end  =  buffer.length  +  length  -  1;	  int    end    =    buffer.length    +    length    -    1;    	non-compiled	[CE]  	3	None	replace
32	[BUG]  [BUGGY]  int  end  =  buffer.length  +  length  /  1;  [CE]  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  buffer.length  +  length  /  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  buffer.length  +  length  /  1;	  int    end    =    buffer.length    +    length    -    1;    	non-compiled	[CE]  	3	None	replace
33	[BUG]  [BUGGY]  int  end  =  buffer.length  +  offset  -  1;  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  buffer.length  +  offset  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  buffer.length  +  offset  -  1;	  int    end    =    buffer.length    +    length    -    1;    	non-compiled	[CE]  	3	None	replace
34	[BUG]  [BUGGY]  long  end  =  buffer.length  +  length  -  1;  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  long  end  =  buffer.length  +  length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	long  end  =  buffer.length  +  length  -  1;	  int    end    =    buffer.length    +    length    -    1;    	non-compiled	[CE]  	3	None	replace
35	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  /  2;  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  /  2;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  /  2;	  int    end    =    offset    +    length    *    BYTE_MASK    +    2;    	non-compiled	[CE]  	25	None	replace
36	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  buffer.length  +  2;  [CE]  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  buffer.length  +  2;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  buffer.length  +  2;	  int    end    =    offset    +    length    *    BYTE_MASK    +    2;    	non-compiled	[CE]  	25	None	replace
37	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length  -  1;  [CE]  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length  -  1;	  int    end    =    offset    +    length    *    BYTE_MASK    +    buffer.length;    	non-compiled	[CE]  	23	None	replace
38	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK  +  buffer.length;  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK  +  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK  +  buffer.length;	  int    end    =    offset    +    length    *    BYTE_MASK    +    buffer.length;    	non-compiled	[CE]  	23	None	replace
39	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length  +  1;  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length  +  1;	  int    end    =    offset    +    length    *    BYTE_MASK    +    buffer.length;    	non-compiled	[CE]  	23	None	replace
40	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length  -  2;  [CE]  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length  -  2;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length  -  2;	  int    end    =    offset    +    length    *    BYTE_MASK    +    buffer.length;    	non-compiled	[CE]  	23	None	replace
41	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  buffer[offset.length  -  1];  [CE]  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  buffer[offset.length  -  1];  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  +  buffer[offset.length  -  1];	  int    end    =    offset    +    length    *    BYTE_MASK    +    buffer.length;    	non-compiled	[CE]  	23	None	replace
42	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length  /  BYTE_SIZE;  [CE]  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length  /  BYTE_SIZE;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length  /  BYTE_SIZE;	  int    end    =    offset    +    length    *    BYTE_MASK    +    buffer.length;    	non-compiled	[CE]  	23	None	replace
43	[BUG]  [BUGGY]  final  int  end  =  offset.length();  [CE]  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  offset.length();  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  offset.length();	  final    int    end    =    buffer.length();    	non-compiled	[CE]  	8	None	replace
44	[BUG]  [BUGGY]  final  int  end  =  buffer.length()  -  offset;  [CE]  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  buffer.length()  -  offset;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  buffer.length()  -  offset;	  final    int    end    =    buffer.length();    	non-compiled	[CE]  	8	None	replace
45	[BUG]  [BUGGY]  final  int  end  =  buffer.length()  -  1;  [CE]  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  buffer.length()  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  buffer.length()  -  1;	  final    int    end    =    buffer.length();    	non-compiled	[CE]  	8	None	replace
46	[BUG]  [BUGGY]  final  int  end  =  buffer.length()  +  offset;  [CE]  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  buffer.length()  +  offset;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  buffer.length()  +  offset;	  final    int    end    =    buffer.length();    	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  final  int  end  =  buffer.length()  +  1;  [CE]  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  buffer.length()  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  buffer.length()  +  1;	  final    int    end    =    buffer.length();    	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  final  int  end  =  buffer.length()  +  length;  [CE]  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  buffer.length()  +  length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  buffer.length()  +  length;	  final    int    end    =    buffer.length();    	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  2  +  buffer.length;  [CE]  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  2  +  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  2  +  buffer.length;	  int    end    =    offset    +    length    *    2;    	non-compiled	[CE]  	13	None	replace
50	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  2  +  BYTE_MASK;  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  2  +  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  2  +  BYTE_MASK;	  int    end    =    offset    +    length    *    2;    	non-compiled	[CE]  	13	None	replace
51	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  2  -  BYTE_MASK;  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  2  -  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  2  -  BYTE_MASK;	  int    end    =    offset    +    length    *    2;    	non-compiled	[CE]  	13	None	replace
52	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  4;  [CE]  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  4;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  4;	  int    end    =    offset    +    length    *    2;    	non-compiled	[CE]  	13	None	replace
53	[BUG]  [BUGGY]  final  int  end  =  offset  -  buffer.length;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  offset  -  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  offset  -  buffer.length;	  final    int    end    =    buffer.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
54	[BUG]  [BUGGY]  final  int  end  =  offset.length  -  buffer.length;  [CE]  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  offset.length  -  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  offset.length  -  buffer.length;	  final    int    end    =    buffer.length    -    offset;    	non-compiled	[CE]  	31	None	replace
55	[BUG]  [BUGGY]  final  int  end  =  offset  +  buffer.length  -  offset;  [CE]  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  offset  +  buffer.length  -  offset;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  offset  +  buffer.length  -  offset;	  final    int    end    =    buffer.length    -    offset;    	non-compiled	[CE]  	31	None	replace
56	[BUG]  [BUGGY]  final  int  end  =  buffer.length  -  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  buffer.length  -  offset  +  length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  buffer.length  -  offset  +  length;	  final    int    end    =    buffer.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
57	[BUG]  [BUGGY]  final  int  end  =  length  -  buffer.length;  [CE]  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  length  -  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  length  -  buffer.length;	  final    int    end    =    buffer.length    -    offset;    	non-compiled	[CE]  	31	None	replace
58	[BUG]  [BUGGY]  final  int  end  =  buffer.length  -  length;  [CE]  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  buffer.length  -  length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  buffer.length  -  length;	  final    int    end    =    buffer.length    -    offset;    	non-compiled	[CE]  	31	None	replace
59	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  length);  result  +=  BYTE_MASK;  [CE]  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  length);  result  +=  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length,  length);  result  +=  BYTE_MASK;	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    +=    BYTE_MASK;    	non-compiled	[CE]  	10	None	replace
60	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  -  1);  result  +=  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  -  1);  result  +=  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length  -  1);  result  +=  BYTE_MASK;	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    +=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
61	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  +  1);  result  +=  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  +  1);  result  +=  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length  +  1);  result  +=  BYTE_MASK;	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    +=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
62	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  length);  result  +=  BYTE_SIZE;  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  length);  result  +=  BYTE_SIZE;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length,  length);  result  +=  BYTE_SIZE;	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    +=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
63	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  -  2);  result  +=  BYTE_MASK;  [CE]  [FE]                                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  -  2);  result  +=  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length  -  2);  result  +=  BYTE_MASK;	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    +=    BYTE_MASK;    	non-compiled	[CE]  	10	None	replace
64	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  +=  2;  [CE]  [FE]                                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  +=  2;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  +=  2;	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    +=    BYTE_MASK;    	non-compiled	[CE]  	10	None	replace
65	[BUG]  [BUGGY]  int  end  =  offset  +  length.length  -  2L;  [CE]  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length.length  -  2L;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length.length  -  2L;	  int    end    =    offset    +    length.length    -    2;    	non-compiled	[CE]  	35	None	replace
66	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  result,  length);  [CE]  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  result,  length);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  result,  length);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    result    +=    length;    	non-compiled	[CE]  	40	None	replace
67	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  +=  BYTE_MASK;  [CE]  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  +=  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  +=  BYTE_MASK;	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    result    +=    length;    	non-compiled	[CE]  	40	None	replace
68	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  result  +=  length;  [CE]  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  result  +=  length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  end);  result  +=  length;	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    result    +=    length;    	non-compiled	[CE]  	40	None	replace
69	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  result,  0);  [CE]  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  result,  0);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  result,  0);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    result    +=    length;    	non-compiled	[CE]  	40	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  result  +  length);  [CE]  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  result  +  length);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  result  +  length);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    result    +=    length;    	non-compiled	[CE]  	40	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  result,  width);  [CE]  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  result,  width);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  result,  width);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    result    +=    length;    	non-compiled	[CE]  	40	None	replace
72	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  3;  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  3;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  3;	  int    end    =    offset    +    length    -    3;    	non-compiled	[CE]  	14	None	replace
73	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  1L;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  1L;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  1L;	  int    end    =    offset    +    length    -    1L;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
74	[BUG]  [BUGGY]  int  end  =  buffer.length  +  length  *  1;  [CE]  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  buffer.length  +  length  *  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  buffer.length  +  length  *  1;	  int    end    =    offset    +    length    *    1;    	non-compiled	[CE]  	20	None	replace
75	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  1L;  [CE]  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  1L;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  +  1L;	  int    end    =    offset    +    length    *    BYTE_MASK    +    1;    	non-compiled	[CE]  	22	None	replace
76	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  buffer.length  +  1;  [CE]  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  buffer.length  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  buffer.length  +  1;	  int    end    =    offset    +    length    *    BYTE_MASK    +    1;    	non-compiled	[CE]  	22	None	replace
77	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  result  =  BYTE_MASK;  [CE]  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  result  =  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  end);  result  =  BYTE_MASK;	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  	38	None	replace
78	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  1);  result  =  BYTE_MASK;  [CE]  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  1);  result  =  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length  -  1);  result  =  BYTE_MASK;	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  	38	None	replace
79	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  result;  [CE]  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  result;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  result;	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  	38	None	replace
80	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  BYTE_SIZE;  [CE]  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  BYTE_SIZE;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  BYTE_SIZE;	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  	38	None	replace
81	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length  -  1;  [CE]  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length  -  1;	  int    end    =    offset    +    length    /    BYTE_MASK,    buffer.length;    	non-compiled	[CE]  	17	None	replace
82	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  2,  buffer.length;  [CE]  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  2,  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  2,  buffer.length;	  int    end    =    offset    +    length    /    BYTE_MASK,    buffer.length;    	non-compiled	[CE]  	17	None	replace
83	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length  -  2;  [CE]  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length  -  2;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length  -  2;	  int    end    =    offset    +    length    /    BYTE_MASK,    buffer.length;    	non-compiled	[CE]  	17	None	replace
84	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length  -  1,  length;  [CE]  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length  -  1,  length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length  -  1,  length;	  int    end    =    offset    +    length    /    BYTE_MASK,    buffer.length;    	non-compiled	[CE]  	17	None	replace
85	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK,  buffer.length;  [CE]  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK,  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK,  buffer.length;	  int    end    =    offset    +    length    /    BYTE_MASK,    buffer.length;    	non-compiled	[CE]  	17	None	replace
86	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  2  *  BYTE_MASK,  buffer.length;  [CE]  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  2  *  BYTE_MASK,  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  2  *  BYTE_MASK,  buffer.length;	  int    end    =    offset    +    length    /    BYTE_MASK,    buffer.length;    	non-compiled	[CE]  	17	None	replace
87	[BUG]  [BUGGY]  long  end  =  offset  -  buffer.length;  [CE]  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  long  end  =  offset  -  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	long  end  =  offset  -  buffer.length;	  long    end    =    buffer.length    -    offset;    	non-compiled	[CE]  	33	None	replace
88	[BUG]  [BUGGY]  long  end  =  buffer.length  -  offset  +  length;  [CE]  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  long  end  =  buffer.length  -  offset  +  length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	long  end  =  buffer.length  -  offset  +  length;	  long    end    =    buffer.length    -    offset;    	non-compiled	[CE]  	33	None	replace
89	[BUG]  [BUGGY]  long  end  =  offset.length  -  buffer.length;  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  long  end  =  offset.length  -  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	long  end  =  offset.length  -  buffer.length;	  long    end    =    buffer.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
90	[BUG]  [BUGGY]  long  end  =  buffer.length  -  length;  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  long  end  =  buffer.length  -  length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	long  end  =  buffer.length  -  length;	  long    end    =    buffer.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
91	[BUG]  [BUGGY]  short  end  =  buffer.length  -  offset;  [CE]  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  short  end  =  buffer.length  -  offset;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	short  end  =  buffer.length  -  offset;	  long    end    =    buffer.length    -    offset;    	non-compiled	[CE]  	33	None	replace
92	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK  +  3;  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK  +  3;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK  +  3;	  int    end    =    offset    +    length    /    BYTE_MASK    +    1;    	non-compiled	[CE]  	15	None	replace
93	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK  +  1L;  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK  +  1L;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK  +  1L;	  int    end    =    offset    +    length    /    BYTE_MASK    +    1;    	non-compiled	[CE]  	15	None	replace
94	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_SIZE  +  1;  [CE]  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_SIZE  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_SIZE  +  1;	  int    end    =    offset    +    length    /    BYTE_MASK    +    1;    	non-compiled	[CE]  	15	None	replace
95	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  1,  buffer.length  -  2;  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  1,  buffer.length  -  2;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  1,  buffer.length  -  2;	  int    end    =    offset    +    length    -    1,    buffer.length    -    1;    	non-compiled	[CE]  	37	None	replace
96	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  1,  buffer.length  -  1;  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  1,  buffer.length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  1,  buffer.length  -  1;	  int    end    =    offset    +    length    -    1,    buffer.length    -    1;    	non-compiled	[CE]  	37	None	replace
97	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  1,  buffer.length  -  4;  [CE]  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  1,  buffer.length  -  4;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  1,  buffer.length  -  4;	  int    end    =    offset    +    length    -    1,    buffer.length    -    1;    	non-compiled	[CE]  	37	None	replace
98	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  1,  buffer.length  -  3;  [CE]  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  1,  buffer.length  -  3;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  1,  buffer.length  -  3;	  int    end    =    offset    +    length    -    1,    buffer.length    -    1;    	non-compiled	[CE]  	37	None	replace
99	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  1,  buffer.length  -  1;  [CE]  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  1,  buffer.length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  1,  buffer.length  -  1;	  int    end    =    offset    +    length    -    1,    buffer.length    -    1;    	non-compiled	[CE]  	37	None	replace
100	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  2,  buffer.length  -  1;  [CE]  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  2,  buffer.length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  2,  buffer.length  -  1;	  int    end    =    offset    +    length    -    1,    buffer.length    -    1;    	non-compiled	[CE]  	37	None	replace
101	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  2  /  1;  [CE]  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  2  /  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  2  /  1;	  int    end    =    offset    +    length    /    1;    	non-compiled	[CE]  	1	None	replace
102	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_SIZE  +  2;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_SIZE  +  2;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_SIZE  +  2;	  int    end    =    offset    +    length    /    BYTE_MASK    +    2;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
103	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  2  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  2  *  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  2  *  BYTE_MASK;	  int    end    =    offset    +    length    -    2    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
104	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  1  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  1  *  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  1  *  BYTE_MASK;	  int    end    =    offset    +    length    -    2    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
105	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  4  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  4  *  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  4  *  BYTE_MASK;	  int    end    =    offset    +    length    -    2    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
106	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK.length  -  1;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK.length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK.length  -  1;	  int    end    =    offset    +    length    /    BYTE_MASK.length;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
107	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK.length  +  1;  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK.length  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK.length  +  1;	  int    end    =    offset    +    length    /    BYTE_MASK.length;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
108	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK.length;  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK.length;	  int    end    =    offset    +    length    /    BYTE_MASK.length;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
109	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK.length  *  2;  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK.length  *  2;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK.length  *  2;	  int    end    =    offset    +    length    /    BYTE_MASK.length;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
110	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  buffer.length;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  buffer.length;	  int    end    =    offset    +    length    /    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
111	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  buffer.length  -  1;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  buffer.length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  buffer.length  -  1;	  int    end    =    offset    +    length    /    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
112	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  buffer.length  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  buffer.length  *  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  buffer.length  *  BYTE_MASK;	  int    end    =    offset    +    length    /    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
113	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  buffer.length  +  1;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  buffer.length  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  buffer.length  +  1;	  int    end    =    offset    +    length    /    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
114	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  buffer[offset.length  -  1];  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  buffer[offset.length  -  1];  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  buffer[offset.length  -  1];	  int    end    =    offset    +    length    /    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
115	[BUG]  [BUGGY]  int  end  =  offset  -  buffer.length;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  -  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  -  buffer.length;	  int    end    =    buffer.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
116	[BUG]  [BUGGY]  int  end  =  offset.length  -  buffer.length;  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset.length  -  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset.length  -  buffer.length;	  int    end    =    buffer.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
117	[BUG]  [BUGGY]  int  end  =  offset  +  buffer.length  -  offset;  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  buffer.length  -  offset;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  buffer.length  -  offset;	  int    end    =    buffer.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
118	[BUG]  [BUGGY]  int  end  =  buffer.length  -  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  buffer.length  -  offset  +  length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  buffer.length  -  offset  +  length;	  int    end    =    buffer.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
119	[BUG]  [BUGGY]  byte  end  =  buffer.length  -  offset;  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  byte  end  =  buffer.length  -  offset;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	byte  end  =  buffer.length  -  offset;	  int    end    =    buffer.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
120	[BUG]  [BUGGY]  int  end  =  offset  +  buffer.length  -  length;  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  buffer.length  -  length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  buffer.length  -  length;	  int    end    =    buffer.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
121	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length,  length);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length,  length);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length,  length);	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
122	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length  +  1);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length  +  1);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length  +  1);	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
123	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length  -  1);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length  -  1);	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
124	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length,  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length,  BYTE_MASK);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length,  BYTE_MASK);	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
125	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length,  0);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length,  0);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length,  0);	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
126	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length  -  2);  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length  -  2);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length  -  2);	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
127	[BUG]  [BUGGY]  int  end  =  offset  +  length.length  /  1;  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length.length  /  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length.length  /  1;	  int    end    =    offset    +    length.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
128	[BUG]  [BUGGY]  int  end  =  offset  +  length.length  -  1L;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length.length  -  1L;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length.length  -  1L;	  int    end    =    offset    +    length.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
129	[BUG]  [BUGGY]  final  int  end  =  offset.length;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  offset.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  offset.length;	  final    int    end    =    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
130	[BUG]  [BUGGY]  final  int  end  =  offset;  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  offset;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  offset;	  final    int    end    =    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
131	[BUG]  [BUGGY]  final  int  end  =  buffer.length  -  1;  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  buffer.length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  buffer.length  -  1;	  final    int    end    =    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
132	[BUG]  [BUGGY]  final  int  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  offset  +  length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  offset  +  length;	  final    int    end    =    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
133	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  4  +  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  4  +  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  4  +  BYTE_MASK;	  int    end    =    offset    +    length    /    4;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
134	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  4  +  1;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  4  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  4  +  1;	  int    end    =    offset    +    length    /    4;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
135	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  BYTE_SIZE;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  BYTE_SIZE;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  BYTE_SIZE;	  int    end    =    offset    +    length    *    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
136	[BUG]  [BUGGY]  byte  end  =  offset  +  length  *  BYTE_SIZE;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  byte  end  =  offset  +  length  *  BYTE_SIZE;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	byte  end  =  offset  +  length  *  BYTE_SIZE;	  int    end    =    offset    +    length    *    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
137	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_SIZE  +  1;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_SIZE  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_SIZE  +  1;	  int    end    =    offset    +    length    *    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
138	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_SIZE  /  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_SIZE  /  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_SIZE  /  BYTE_MASK;	  int    end    =    offset    +    length    *    BYTE_MASK    /    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
139	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_SIZE  /  BYTE_SIZE;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_SIZE  /  BYTE_SIZE;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_SIZE  /  BYTE_SIZE;	  int    end    =    offset    +    length    *    BYTE_MASK    /    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
140	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  /  BYTE_SIZE  +  1;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  /  BYTE_SIZE  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  /  BYTE_SIZE  +  1;	  int    end    =    offset    +    length    *    BYTE_MASK    /    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
141	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_SIZE  /  BYTE_MILLIS;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_SIZE  /  BYTE_MILLIS;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_SIZE  /  BYTE_MILLIS;	  int    end    =    offset    +    length    *    BYTE_MASK    /    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
142	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_SIZE  /  BYTE_BYTE;  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_SIZE  /  BYTE_BYTE;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_SIZE  /  BYTE_BYTE;	  int    end    =    offset    +    length    *    BYTE_MASK    /    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
143	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  2  -  1;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  2  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  2  -  1;	  int    end    =    offset    +    length    *    2    -    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
144	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  4  -  1;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  4  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  4  -  1;	  int    end    =    offset    +    length    *    2    -    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
145	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  0;  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  0;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  0;	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
146	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length  -  1);  result  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length  -  1);  result  =  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length  -  1);  result  =  BYTE_MASK;	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
147	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length  +  1);  result  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length  +  1);  result  =  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length  +  1);  result  =  BYTE_MASK;	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
148	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  2  +  1;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  2  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  2  +  1;	  int    end    =    offset    +    length    *    2    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
149	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  4  +  1;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  4  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  4  +  1;	  int    end    =    offset    +    length    *    2    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
150	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  2  +  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  2  +  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  2  +  BYTE_MASK;	  int    end    =    offset    +    length    /    2;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
151	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  2  +  buffer.length;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  2  +  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  2  +  buffer.length;	  int    end    =    offset    +    length    /    2;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
152	[BUG]  [BUGGY]  int  end  =  offset  *  BYTE_MASK  +  length  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  *  BYTE_MASK  +  length  *  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  *  BYTE_MASK  +  length  *  BYTE_MASK;	  int    end    =    offset    /    BYTE_MASK    +    length    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
153	[BUG]  [BUGGY]  int  end  =  offset  /  length  *  BYTE_MASK  +  length  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  /  length  *  BYTE_MASK  +  length  *  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  /  length  *  BYTE_MASK  +  length  *  BYTE_MASK;	  int    end    =    offset    /    BYTE_MASK    +    length    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
154	[BUG]  [BUGGY]  int  end  =  length  /  BYTE_MASK  +  offset  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  length  /  BYTE_MASK  +  offset  *  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  length  /  BYTE_MASK  +  offset  *  BYTE_MASK;	  int    end    =    offset    /    BYTE_MASK    +    length    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
155	[BUG]  [BUGGY]  int  end  =  offset  /  BYTE_MASK  +  length  *  BYTE_MASK  +  buffer.length;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  /  BYTE_MASK  +  length  *  BYTE_MASK  +  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  /  BYTE_MASK  +  length  *  BYTE_MASK  +  buffer.length;	  int    end    =    offset    /    BYTE_MASK    +    length    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
156	[BUG]  [BUGGY]  int  end  =  offset  /  BYTE_MASK  +  length  /  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  /  BYTE_MASK  +  length  /  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  /  BYTE_MASK  +  length  /  BYTE_MASK;	  int    end    =    offset    /    BYTE_MASK    +    length    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
157	[BUG]  [BUGGY]  int  end  =  offset  /  length  +  BYTE_MASK  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  /  length  +  BYTE_MASK  *  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  /  length  +  BYTE_MASK  *  BYTE_MASK;	  int    end    =    offset    /    BYTE_MASK    +    length    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
158	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  1);  [CE]  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  1);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length  -  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  	9	None	replace
159	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  start);  [CE]  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  start);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length  -  start);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  	9	None	replace
160	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  +  1);  [CE]  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  +  1);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length  +  1);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  	9	None	replace
161	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  offset);  [CE]  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  offset);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length  -  offset);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  	9	None	replace
162	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length,  length);  [CE]  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length,  length);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length,  length);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  	9	None	replace
163	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  result);  [CE]  [FE]                                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  result);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  result);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  	9	None	replace
164	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  2  +  1L;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  2  +  1L;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  2  +  1L;	  int    end    =    offset    +    length    *    2    +    1;    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
165	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  +=  length;  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  +=  length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  +=  length;	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    +=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
166	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  -=  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  -=  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  -=  BYTE_MASK;	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    +=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
167	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  result);  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  result);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length,  result);	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    +=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
168	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  =  result  +=  BYTE_MASK;  [CE]  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  =  result  +=  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  =  result  +=  BYTE_MASK;	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    +=    BYTE_MASK;    	non-compiled	[CE]  	10	None	replace
169	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  =  0;  [CE]  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  =  0;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  =  0;	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  	12	None	replace
170	[BUG]  [BUGGY]  final  int  end  =  buffer.length()  /  BYTE_MASK;  [CE]  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  buffer.length()  /  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  buffer.length()  /  BYTE_MASK;	  final    int    end    =    buffer.length();    	non-compiled	[CE]  	8	None	replace
171	[BUG]  [BUGGY]  final  int  end  =  buffer.length()  *  BYTE_MASK;  [CE]  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  buffer.length()  *  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  buffer.length()  *  BYTE_MASK;	  final    int    end    =    buffer.length();    	non-compiled	[CE]  	8	None	replace
172	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  6;  [CE]  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  6;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  6;	  int    end    =    offset    +    length    -    1L;    	non-compiled	[CE]  	4	None	replace
173	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length  +  length;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length  +  length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length  +  length;	  int    end    =    offset    +    length    *    BYTE_MASK    +    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
174	[BUG]  [BUGGY]  int  end  =  offset  /  length  *  BYTE_SIZE;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  /  length  *  BYTE_SIZE;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  /  length  *  BYTE_SIZE;	  int    end    =    offset    +    length    *    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
175	[BUG]  [BUGGY]  int  end  =  offset  *  BYTE_SIZE;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  *  BYTE_SIZE;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  *  BYTE_SIZE;	  int    end    =    offset    +    length    *    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
176	[BUG]  [BUGGY]  float  end  =  offset  +  length  *  BYTE_SIZE;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  float  end  =  offset  +  length  *  BYTE_SIZE;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	float  end  =  offset  +  length  *  BYTE_SIZE;	  int    end    =    offset    +    length    *    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
177	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_SIZE  /  BYTE_MILLISECOND;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_SIZE  /  BYTE_MILLISECOND;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_SIZE  /  BYTE_MILLISECOND;	  int    end    =    offset    +    length    *    BYTE_MASK    /    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
178	[BUG]  [BUGGY]  int  end  =  offset  /  length  +  length  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  /  length  +  length  *  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  /  length  +  length  *  BYTE_MASK;	  int    end    =    offset    /    BYTE_MASK    +    length    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
179	[BUG]  [BUGGY]  int  end  =  length  *  BYTE_MASK  +  offset  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  length  *  BYTE_MASK  +  offset  *  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  length  *  BYTE_MASK  +  offset  *  BYTE_MASK;	  int    end    =    offset    /    BYTE_MASK    +    length    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
180	[BUG]  [BUGGY]  int  end  =  offset  /  BYTE_MASK  +  length  *  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  /  BYTE_MASK  +  length  *  BYTE_MASK  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  /  BYTE_MASK  +  length  *  BYTE_MASK  +  1;	  int    end    =    offset    /    BYTE_MASK    +    length    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
181	[BUG]  [BUGGY]  final  int  end  =  offset  +  buffer.length;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  offset  +  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  offset  +  buffer.length;	  final    int    end    =    buffer.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
182	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length  -  start);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length  -  start);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length  -  start);	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
183	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length  +  2);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length  +  2);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length  +  2);	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
184	[BUG]  [BUGGY]  final  int  end  =  buffer.length  +  offset;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  buffer.length  +  offset;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  buffer.length  +  offset;	  final    int    end    =    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
185	[BUG]  [BUGGY]  char  end  =  buffer.length  +  length  -  1;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  char  end  =  buffer.length  +  length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	char  end  =  buffer.length  +  length  -  1;	  int    end    =    buffer.length    +    length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
186	[BUG]  [BUGGY]  float  end  =  buffer.length  +  length  -  1;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  float  end  =  buffer.length  +  length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	float  end  =  buffer.length  +  length  -  1;	  int    end    =    buffer.length    +    length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
187	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  start);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  start);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length,  start);	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
188	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  BYTE_MASK  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  BYTE_MASK  +  1;	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
189	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  1;  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  1;	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
190	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  buffer[offset].length;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  buffer[offset].length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  buffer[offset].length;	  int    end    =    offset    +    length    -    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
191	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  -  1L;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  -  1L;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  -  1L;	  int    end    =    offset    +    length    *    BYTE_MASK    -    1;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
192	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_SIZE  -  1;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_SIZE  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_SIZE  -  1;	  int    end    =    offset    +    length    *    BYTE_MASK    -    1;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
193	[BUG]  [BUGGY]  int  end  =  offset  /  length  *  1;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  /  length  *  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  /  length  *  1;	  int    end    =    offset    +    length    *    1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
194	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  3;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  3;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  3;	  int    end    =    offset    +    length    *    1;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
195	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length  -  start;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length  -  start;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length  -  start;	  int    end    =    offset    +    length    /    BYTE_MASK,    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
196	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_SIZE,  buffer.length;  [CE]  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_SIZE,  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_SIZE,  buffer.length;	  int    end    =    offset    +    length    /    BYTE_MASK,    buffer.length;    	non-compiled	[CE]  	17	None	replace
197	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length  +  1;  [CE]  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length  +  1;	  int    end    =    offset    +    length    /    BYTE_MASK,    buffer.length;    	non-compiled	[CE]  	17	None	replace
198	[BUG]  [BUGGY]  int  end  =  offset  +  length.length  -  6;  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length.length  -  6;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length.length  -  6;	  int    end    =    offset    +    length.length    -    4;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
199	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  4  +  buffer.length;  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  4  +  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  4  +  buffer.length;	  int    end    =    offset    +    length    /    4;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
200	[BUG]  [BUGGY]  char  end  =  buffer.length  -  offset;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  char  end  =  buffer.length  -  offset;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	char  end  =  buffer.length  -  offset;	  int    end    =    buffer.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
201	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  0;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  0;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  0;	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
202	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  BYTE_MASK  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  BYTE_MASK  +  1;	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
203	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  3  -  1;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  3  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  3  -  1;	  int    end    =    offset    +    length    *    2    -    1;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
204	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  end);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
205	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  2);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  2);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length  -  2);	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
206	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  start);  result  +=  length;  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length  -  start);  result  +=  length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length  -  start);  result  +=  length;	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    result    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
207	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  -=  length;  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  -=  length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  -=  length;	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    result    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
208	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  2.0  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  2.0  *  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  2.0  *  BYTE_MASK;	  int    end    =    offset    +    length    -    2    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
209	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK.length  +  2;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK.length  +  2;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK.length  +  2;	  int    end    =    offset    +    length    /    BYTE_MASK.length;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
210	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  2  |  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  2  |  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  2  |  BYTE_MASK;	  int    end    =    offset    +    length    /    2;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
211	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length  +  1,  length);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length  +  1,  length);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length  +  1,  length);	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
212	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  buffer.length  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  buffer.length  *  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  buffer.length  *  BYTE_MASK;	  int    end    =    offset    +    length    -    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
213	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  buffer.length  -  4;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  buffer.length  -  4;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  buffer.length  -  4;	  int    end    =    offset    +    length    -    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
214	[BUG]  [BUGGY]  int  end  =  offset  /  BYTE_SIZE  +  length  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  /  BYTE_SIZE  +  length  *  BYTE_MASK;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  /  BYTE_SIZE  +  length  *  BYTE_MASK;	  int    end    =    offset    +    length    *    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
215	[BUG]  [BUGGY]  int  end  =  offset  /  BYTE_SIZE  +  length  *  BYTE_SIZE;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  /  BYTE_SIZE  +  length  *  BYTE_SIZE;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  /  BYTE_SIZE  +  length  *  BYTE_SIZE;	  int    end    =    offset    +    length    *    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
216	[BUG]  [BUGGY]  int  end  =  offset  -  length  *  BYTE_SIZE;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  -  length  *  BYTE_SIZE;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  -  length  *  BYTE_SIZE;	  int    end    =    offset    +    length    *    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
217	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  +  1);  result  +=  length;  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length  +  1);  result  +=  length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length  +  1);  result  +=  length;	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    +=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
218	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  /  BYTE_LENGTH;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  /  BYTE_LENGTH;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  /  BYTE_LENGTH;	  int    end    =    offset    +    length    *    BYTE_MASK    /    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
219	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  /  BYTE_LONG;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  /  BYTE_LONG;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  /  BYTE_LONG;	  int    end    =    offset    +    length    *    BYTE_MASK    /    BYTE_SIZE;    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
220	[BUG]  [BUGGY]  final  int  end  =  offset,  length;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  offset,  length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  offset,  length;	  final    int    end    =    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
221	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  =  result;  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  =  result;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  =  result;	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
222	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  buffer.length  -  2;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  buffer.length  -  2;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  buffer.length  -  2;	  int    end    =    offset    +    length    /    buffer.length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
223	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  1,  buffer,  0,  length  -  1;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  1,  buffer,  0,  length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  1,  buffer,  0,  length  -  1;	  int    end    =    offset    +    length    -    1,    buffer.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
224	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  4,  buffer.length  -  1;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  -  4,  buffer.length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  4,  buffer.length  -  1;	  int    end    =    offset    +    length    -    1,    buffer.length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
225	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  2);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length,  2);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length,  2);	  System.arraycopy(buffer,    0,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
226	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  +=  length  -  1;  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  +=  length  -  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  +=  length  -  1;	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    result    +=    length;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
227	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  result;  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  result;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  result;	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
228	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  JsonStringEncoder.getInstance().encodeAsByte(buffer,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  JsonStringEncoder.getInstance().encodeAsByte(buffer,  offset,  length);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  JsonStringEncoder.getInstance().encodeAsByte(buffer,  offset,  length);	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
229	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  JsonStringEncoder.getInstance().parseByte(buffer,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  JsonStringEncoder.getInstance().parseByte(buffer,  offset,  length);  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  JsonStringEncoder.getInstance().parseByte(buffer,  offset,  length);	  System.arraycopy(buffer,    offset,    buffer,    offset,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
230	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  2L;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  2L;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  2L;	  int    end    =    offset    +    length    -    1L;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
231	[BUG]  [BUGGY]  long  end  =  offset  +  length  -  buffer.length;  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  long  end  =  offset  +  length  -  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	long  end  =  offset  +  length  -  buffer.length;	  long    end    =    buffer.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
232	[BUG]  [BUGGY]  final  int  end  =  offset  +  length  -  buffer.length;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  final  int  end  =  offset  +  length  -  buffer.length;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  offset  +  length  -  buffer.length;	  final    int    end    =    buffer.length    -    offset;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
233	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  result  +  1;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  result  +  1;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  result  +  1;	  System.arraycopy(buffer,    offset,    buffer,    0,    length);    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
234	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  2.0;  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;      [BUGGY]  int  end  =  offset  +  length  /  2.0;  [BUGGY]      int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  2.0;	  int    end    =    offset    +    length    /    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
