bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  1;  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  /  1;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  1;	  int    end    =    offset    +    length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  2  -  1;  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  *  2  -  1;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  2  -  1;	  int    end    =    offset    +    length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  int  end  =  buffer.length  +  length  -  1;  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  buffer.length  +  length  -  1;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  buffer.length  +  length  -  1;	  int    end    =    offset    +    length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
4	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  1L;  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  -  1L;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  1L;	  int    end    =    offset    +    length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
5	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  2;  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  /  2;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  2;	  int    end    =    offset    +    length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
6	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
8	[BUG]  [BUGGY]  final  int  end  =  buffer.length();  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  final  int  end  =  buffer.length();  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  buffer.length();	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  +=  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  +=  BYTE_MASK;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  +=  BYTE_MASK;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
11	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  BYTE_MASK;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  offset,  length);  result  =  BYTE_MASK;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
12	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  =  BYTE_MASK;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);  result  =  BYTE_MASK;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
13	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  2;  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  *  2;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  2;	  int    end    =    offset    +    length    -    2;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
14	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  3;  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  -  3;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  3;	  int    end    =    offset    +    length    -    2;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
15	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK  +  1;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK  +  1;	  int    end    =    offset    +    length    /    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
16	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_SIZE;  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  /  BYTE_SIZE;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_SIZE;	  int    end    =    offset    +    length    /    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
17	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length;  [CE]  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK,  buffer.length;	  int    end    =    offset    +    length    /    BYTE_MASK;    	non-compiled	[CE]  	5	None	replace
18	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK.length;  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK.length;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK.length;	  int    end    =    offset    +    length    /    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  2  +  1;  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  *  2  +  1;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  2  +  1;	  int    end    =    offset    +    length    +    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  1;  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  *  1;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  1;	  int    end    =    offset    +    length    +    1;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
21	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  buffer.length;  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  -  buffer.length;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  buffer.length;	  int    end    =    offset    +    length    -    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
22	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  1;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  +  1;	  int    end    =    offset    +    length    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length;  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  +  buffer.length;	  int    end    =    offset    +    length    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  -  1;  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  -  1;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  -  1;	  int    end    =    offset    +    length    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
25	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  2;  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  2;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  +  2;	  int    end    =    offset    +    length    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
26	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  4;  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  +  4;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  +  4;	  int    end    =    offset    +    length    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
27	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  4;  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  /  4;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  4;	  int    end    =    offset    +    length    -    4;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
28	[BUG]  [BUGGY]  int  end  =  offset  +  length.length  -  4;  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length.length  -  4;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length.length  -  4;	  int    end    =    offset    +    length    -    4;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
29	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK  +  2;  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  /  BYTE_MASK  +  2;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  BYTE_MASK  +  2;	  int    end    =    offset    +    length    /    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
30	[BUG]  [BUGGY]  int  end  =  offset  +  length.length  -  1;  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length.length  -  1;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length.length  -  1;	  int    end    =    offset    +    length    -    1;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
31	[BUG]  [BUGGY]  final  int  end  =  buffer.length  -  offset;  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  final  int  end  =  buffer.length  -  offset;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  buffer.length  -  offset;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
32	[BUG]  [BUGGY]  final  int  end  =  buffer.length;  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  final  int  end  =  buffer.length;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	final  int  end  =  buffer.length;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
33	[BUG]  [BUGGY]  long  end  =  buffer.length  -  offset;  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  long  end  =  buffer.length  -  offset;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	long  end  =  buffer.length  -  offset;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
34	[BUG]  [BUGGY]  int  end  =  offset  +  length  +  4;  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  +  4;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  +  4;	  int    end    =    offset    +    length    +    2;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
35	[BUG]  [BUGGY]  int  end  =  offset  +  length.length  -  2;  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length.length  -  2;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length.length  -  2;	  int    end    =    offset    +    length    -    2;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
36	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  2  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  -  2  *  BYTE_MASK;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  2  *  BYTE_MASK;	  int    end    =    offset    +    length    -    2;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
37	[BUG]  [BUGGY]  int  end  =  offset  +  length  -  1,  buffer.length  -  1;  [CE]  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  -  1,  buffer.length  -  1;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  -  1,  buffer.length  -  1;	  int    end    =    offset    +    length    -    2;    	non-compiled	[CE]  	4	None	replace
38	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  BYTE_MASK;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  =  BYTE_MASK;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
39	[BUG]  [BUGGY]  int  end  =  buffer.length  -  offset;  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  buffer.length  -  offset;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  buffer.length  -  offset;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
40	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  +=  length;  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  +=  length;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);  result  +=  length;	      	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
41	[BUG]  [BUGGY]  int  end  =  offset  /  BYTE_MASK  +  length  *  BYTE_MASK;  [CE]  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  /  BYTE_MASK  +  length  *  BYTE_MASK;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  /  BYTE_MASK  +  length  *  BYTE_MASK;	  int    end    =    offset    +    length    *    BYTE_MASK;    	non-compiled	[CE]  	3	None	replace
42	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_SIZE;  [CE]  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  *  BYTE_SIZE;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_SIZE;	  int    end    =    offset    +    length    *    BYTE_MASK;    	non-compiled	[CE]  	3	None	replace
43	[BUG]  [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  /  BYTE_SIZE;  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  *  BYTE_MASK  /  BYTE_SIZE;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  *  BYTE_MASK  /  BYTE_SIZE;	  int    end    =    offset    +    length    *    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
44	[BUG]  [BUGGY]  int  end  =  offset  +  length  /  buffer.length;  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;    [BUGGY]  int  end  =  offset  +  length  /  buffer.length;  [BUGGY]    int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  allNUL  =  false;  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	58	58	1	replace	int  end  =  offset  +  length  /  buffer.length;	  int    end    =    offset    +    length    /    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
