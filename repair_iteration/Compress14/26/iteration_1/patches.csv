bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  1);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctalOrBinary(buffer,  offset,  length  -  1);	  return    parseOctalOrBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  buffer.length);	  return    parseOctalOrBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
3	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  +  1);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctalOrBinary(buffer,  offset,  length  +  1);	  return    parseOctalOrBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
4	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  val);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  val);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  val);	  return    parseOctalOrBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
5	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  0,  length);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  0,  length);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctalOrBinary(buffer,  offset,  0,  length);	  return    parseOctalOrBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
6	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length,  0);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctalOrBinary(buffer,  offset,  length,  0);	  return    parseOctalOrBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
7	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  2);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctalOrBinary(buffer,  offset,  length  -  2);	  return    parseOctalOrBinary(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
8	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  -  1);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  -  1);	  return    parseOctal(buffer,    offset,    length    -    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
9	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  +  1);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  +  1);	  return    parseOctal(buffer,    offset,    length    -    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
10	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  -  2);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  -  2);	  return    parseOctal(buffer,    offset,    length    -    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
11	[BUG]  [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  1,  buffer.length);  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctalOrBinary(buffer,  offset,  length  -  1,  buffer.length);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctalOrBinary(buffer,  offset,  length  -  1,  buffer.length);	  return    parseOctal(buffer,    offset,    length    -    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
12	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  +  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  +  1,  buffer.length);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length  +  1,  buffer.length);	  return    parseOctal(buffer,    offset,    length    -    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
13	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  /  1,  buffer.length);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  /  1,  buffer.length);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length  /  1,  buffer.length);	  return    parseOctal(buffer,    offset,    length    -    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
14	[BUG]  [BUGGY]  return  parse(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parse(buffer,  offset,  length  -  1);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parse(buffer,  offset,  length  -  1);	  return    parse(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
15	[BUG]  [BUGGY]  return  parse(buffer,  offset,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parse(buffer,  offset,  length,  buffer.length);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parse(buffer,  offset,  length,  buffer.length);	  return    parse(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
16	[BUG]  [BUGGY]  return  parse(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parse(buffer,  offset,  length  +  1);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parse(buffer,  offset,  length  +  1);	  return    parse(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
17	[BUG]  [BUGGY]  return  parse(buffer,  offset,  length,  val);  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parse(buffer,  offset,  length,  val);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parse(buffer,  offset,  length,  val);	  return    parse(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
18	[BUG]  [BUGGY]  return  parse(buffer,  offset,  length,  0);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parse(buffer,  offset,  length,  0);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parse(buffer,  offset,  length,  0);	  return    parse(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
19	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  +  2);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length  +  2);	  return    parseOctal(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
20	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  +  3);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  +  3);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length  +  3);	  return    parseOctal(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
21	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  /  1);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  /  1);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length  /  1);	  return    parseOctal(buffer,    offset,    length    +    1);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  3);  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  3);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length,  3);	  return    parseOctal(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
23	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  2);  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  2);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length,  2);	  return    parseOctal(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
24	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  32);  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  32);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length,  32);	  return    parseOctal(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
25	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  1);  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  1);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length,  1);	  return    parseOctal(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
26	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  4);  [CE]  <identifier>  expected  [FE]                            IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  4);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length,  4);	  return    parseOctal(buffer,    offset,    length,    0);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
27	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  3);  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  -  3);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length  -  3);	  return    parseOctal(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
28	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  6);  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  -  6);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length  -  6);	  return    parseOctal(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
29	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  4);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  -  4);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length  -  4);	  return    parseOctal(buffer,    offset,    length    -    1);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
30	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	throw  new  IllegalArgumentException( " ");	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
31	[BUG]  [BUGGY]  parseOctalOrBinary(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  parseOctalOrBinary(buffer,  offset,  length);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	parseOctalOrBinary(buffer,  offset,  length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
32	[BUG]  [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	if(length  <  =  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
33	[BUG]  [BUGGY]  if(length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  if(length  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	if(length  >  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
34	[BUG]  [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  long  value ");  }  [CE]  <identifier>  expected  [FE]                              IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  long  value ");  }  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	if(length  <  =  0)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  long  value ");  }	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  val,  buffer.length);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  val,  buffer.length);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length,  val,  buffer.length);	  return    parseOctal(buffer,    offset,    length,    val);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
36	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  val,  BYTE_MASK);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  val,  BYTE_MASK);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length,  val,  BYTE_MASK);	  return    parseOctal(buffer,    offset,    length,    val);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
37	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  val);  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  val);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length  -  1,  val);	  return    parseOctal(buffer,    offset,    length,    val);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
38	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  val,  length);  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  val,  length);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  val,  length);	  return    parseOctal(buffer,    offset,    length,    val);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
39	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  0,  length  -  1);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  0,  length  -  1);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  0,  length  -  1);	  return    parseOctal(buffer,    offset,    0,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
40	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  0,  length  +  1);  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  0,  length  +  1);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  0,  length  +  1);	  return    parseOctal(buffer,    offset,    0,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
41	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  0,  buffer.length);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  0,  buffer.length);	  return    parseOctal(buffer,    offset,    0,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
42	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  0,  length,  buffer.length);  [CE]  <identifier>  expected  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  0,  length,  buffer.length);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  0,  length,  buffer.length);	  return    parseOctal(buffer,    offset,    0,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
43	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  0,  length  -  2);  [CE]  <identifier>  expected  [FE]                          IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  0,  length  -  2);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  0,  length  -  2);	  return    parseOctal(buffer,    offset,    0,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
44	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  -  1);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  -  1);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length  -  1);	  return    parseOctal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
45	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  +  1);  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  +  1);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length  +  1);	  return    parseOctal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
46	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset]);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer[offset]);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length,  buffer[offset]);	  return    parseOctal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
47	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  -  2);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  -  2);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length  -  2);	  return    parseOctal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
48	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  +  2);  [CE]  <identifier>  expected  [FE]        IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  +  2);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length  -  1,  buffer.length  +  2);	  return    parseOctal(buffer,    offset,    length    -    1,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
49	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
50	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  0,  buffer.length);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length,  0,  buffer.length);	  return    parseOctal(buffer,    offset,    0,    length);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
51	[BUG]  [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  +  2);  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parseOctal(buffer,  offset,  length,  buffer.length  +  2);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parseOctal(buffer,  offset,  length,  buffer.length  +  2);	  return    parseOctal(buffer,    offset,    length,    buffer.length);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
52	[BUG]  [BUGGY]  return  parse(buffer,  offset,  length  -  2);  [timeout]  [FE]        IOException    [CONTEXT]    public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  if  ((buffer[offset]  &  0x80)  ==  0)  {    [BUGGY]  return  parse(buffer,  offset,  length  -  2);  [BUGGY]    }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(     "At  offset     "  +  offset  +     ",     "  +  length  +     "  byte     "  +     "binary  number  exceeds  maximum  signed  long  value   ");  }  val  =  (val  <<  8)  +  (buffer[offset  +  i]  &  0xff);  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	135	135	1	replace	return  parse(buffer,  offset,  length  -  2);	  return    parse(buffer,    offset,    length);    	non-compiled	[timeout]	9	None	replace
