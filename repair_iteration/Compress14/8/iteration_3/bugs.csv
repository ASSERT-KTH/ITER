bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  allNUL  |=(end  <  <  1)?  false  :  end;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=(end  <  <  1)?  false  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=(end  <  <  1)?  false  :  end;	  allNUL    |=(end    <    <    length)?    false    :    end;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
2	[BUG]  [BUGGY]  allNUL  |=(length  <  <  end)?  false  :  end;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=(length  <  <  end)?  false  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=(length  <  <  end)?  false  :  end;	  allNUL    |=(end    <    <    length)?    false    :    end;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
3	[BUG]  [BUGGY]  allNUL  |=(end  <  <  6)?  false  :  end;  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=(end  <  <  6)?  false  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=(end  <  <  6)?  false  :  end;	  allNUL    |=(end    <    <    length)?    false    :    end;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
4	[BUG]  [BUGGY]  allNUL  |=(end  <  <  3)?  false  :  end;  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=(end  <  <  3)?  false  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=(end  <  <  3)?  false  :  end;	  allNUL    |=(end    <    <    length)?    false    :    end;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
5	[BUG]  [BUGGY]  allNUL  |=(end  <  <  8)?  false  :  end;  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=(end  <  <  8)?  false  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=(end  <  <  8)?  false  :  end;	  allNUL    |=(end    <    <    length)?    false    :    end;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
6	[BUG]  [BUGGY]  allNUL  |=(end  <  <  length)?  false  :  end  +  1;  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=(end  <  <  length)?  false  :  end  +  1;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=(end  <  <  length)?  false  :  end  +  1;	  allNUL    |=(end    <    <    length)?    false    :    end;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
7	[BUG]  [BUGGY]  allNUL  |=(end  <  <  4)?  false  :  end;  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=(end  <  <  4)?  false  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=(end  <  <  4)?  false  :  end;	  allNUL    |=(end    <    <    length)?    false    :    end;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
8	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  0,  end);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  0,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  0,  end);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
9	[BUG]  [BUGGY]  if(length  >  0)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  end);  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(length  >  0)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  end);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(length  >  0)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  end);  }	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer[i],  0,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
11	[BUG]  [BUGGY]  AllNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  0,  end);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  0,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  0,  end);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
12	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
13	[BUG]  [BUGGY]  allNUL  |=  end  &&  BYTE_MASK  ==  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  end  &&  BYTE_MASK  ==  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  end  &&  BYTE_MASK  ==  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    ==    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
14	[BUG]  [BUGGY]  allNUL  |=  start  &&  end  ==  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  start  &&  end  ==  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  start  &&  end  ==  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    ==    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
15	[BUG]  [BUGGY]  allNUL  |=  length  &&  end  ==  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  length  &&  end  ==  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  length  &&  end  ==  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    ==    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
16	[BUG]  [BUGGY]  allNUL  |=  end  &&  start  ==  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  end  &&  start  ==  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  end  &&  start  ==  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    ==    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
17	[BUG]  [BUGGY]  allNUL  |=  end  &&  BYTE_MASK!=  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  end  &&  BYTE_MASK!=  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  end  &&  BYTE_MASK!=  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    ==    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
18	[BUG]  [BUGGY]  allNUL  |=  end  &&  offset  ==  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  end  &&  offset  ==  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  end  &&  offset  ==  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    ==    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
19	[BUG]  [BUGGY]  allNUL  |=  end  &&  buffer[i]  ==  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  end  &&  buffer[i]  ==  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  end  &&  buffer[i]  ==  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    ==    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
20	[BUG]  [BUGGY]  allNUL  =(i  >  0)?   "   "  :  end;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(i  >  0)?   "   "  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(i  >  0)?   "   "  :  end;	  allNUL    =(end    >    0)?       "   "    :    end;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
21	[BUG]  [BUGGY]  allNUL  =(end  <  0)?   "   "  :  end;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  <  0)?   "   "  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  <  0)?   "   "  :  end;	  allNUL    =(end    >    0)?       "   "    :    end;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
22	[BUG]  [BUGGY]  allNUL  =(start  >  0)?   "   "  :  end;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(start  >  0)?   "   "  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(start  >  0)?   "   "  :  end;	  allNUL    =(end    >    0)?       "   "    :    end;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
23	[BUG]  [BUGGY]  combint[]  buffer  =(byte[])buffer.clone();  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  combint[]  buffer  =(byte[])buffer.clone();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	combint[]  buffer  =(byte[])buffer.clone();	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
24	[BUG]  [BUGGY]  combint[]  buffer  =(byte[])offset.clone();  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  combint[]  buffer  =(byte[])offset.clone();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	combint[]  buffer  =(byte[])offset.clone();	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
25	[BUG]  [BUGGY]  combint[]  buffer  =(byte[])end.clone();  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  combint[]  buffer  =(byte[])end.clone();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	combint[]  buffer  =(byte[])end.clone();	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
26	[BUG]  [BUGGY]  combint[]  buffer  =(byte[])this.currentByte.clone();  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  combint[]  buffer  =(byte[])this.currentByte.clone();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	combint[]  buffer  =(byte[])this.currentByte.clone();	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
27	[BUG]  [BUGGY]  allowNonLocal(start,  end);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start,  end);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
28	[BUG]  [BUGGY]  combint(start,  end);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  combint(start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	combint(start,  end);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
29	[BUG]  [BUGGY]  combint[]  buffer  =(byte[])this.currentByte;  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  combint[]  buffer  =(byte[])this.currentByte;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	combint[]  buffer  =(byte[])this.currentByte;	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
30	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  false;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  false;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  false;	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
31	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  true;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  true;	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
32	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  0,  length);  allNUL  =  true;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  0,  length);  allNUL  =  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  0,  length);  allNUL  =  true;	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
33	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  0,  length);  allNUL  =  false;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  0,  length);  allNUL  =  false;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  0,  length);  allNUL  =  false;	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
34	[BUG]  [BUGGY]  ((  byte[])buffer[start  +  i]).append('  ',  end);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[start  +  i]).append('  ',  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[start  +  i]).append('  ',  end);	  ((    byte[])buffer[start    +    i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
35	[BUG]  [BUGGY]  ((  byte[])buffer[i  +  start]).append('  ');  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i  +  start]).append('  ');  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i  +  start]).append('  ');	  ((    byte[])buffer[start    +    i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
36	[BUG]  [BUGGY]  ((  byte[])buffer[start  +  offset]).append('  ');  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[start  +  offset]).append('  ');  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[start  +  offset]).append('  ');	  ((    byte[])buffer[start    +    i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
37	[BUG]  [BUGGY]  ((  byte[])buffer[offset  +  i]).append('  ');  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[offset  +  i]).append('  ');  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[offset  +  i]).append('  ');	  ((    byte[])buffer[start    +    i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
38	[BUG]  [BUGGY]  ((  byte[])buffer[start  +  i]).append('  ',  length);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[start  +  i]).append('  ',  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[start  +  i]).append('  ',  length);	  ((    byte[])buffer[start    +    i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
39	[BUG]  [BUGGY]  ((  byte[])buffer[end  +  i]).append('  ');  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[end  +  i]).append('  ');  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[end  +  i]).append('  ');	  ((    byte[])buffer[start    +    i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
40	[BUG]  [BUGGY]  ||  allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ||  allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  false;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	||  allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  false;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    allNUL    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
41	[BUG]  [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
42	[BUG]  [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
43	[BUG]  [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
44	[BUG]  [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '/')  {  return  0  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '/')  {  return  0  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '/')  {  return  0	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
45	[BUG]  [BUGGY]  allowNonLocal(start,  end)  {  if(buffer[i]  =='')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start,  end)  {  if(buffer[i]  =='')  {  return  0L;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start,  end)  {  if(buffer[i]  =='')  {  return  0L;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
46	[BUG]  [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '/')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '/')  {  return  0L;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '/')  {  return  0L;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
47	[BUG]  [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
48	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
49	[BUG]  [BUGGY]  if(length  >  0)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(length  >  0)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(length  >  0)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);  }	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
50	[BUG]  [BUGGY]  AllNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
51	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  length);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
52	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  0,  buffer[start,  i],  end,  length);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  0,  buffer[start,  i],  end,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  0,  buffer[start,  i],  end,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
53	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length  +  1);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length  +  1);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length  +  1);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
54	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  false;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  false;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  false;	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    start,    end);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  start,  end);  allNUL  =  true;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  i,  buffer,  start,  end);  allNUL  =  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  i,  buffer,  start,  end);  allNUL  =  true;	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    start,    end);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
56	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  false;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  false;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  false;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    start,    end);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
57	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  true;  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  true;	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    start,    end);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
58	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  allNUL  =  true;  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  allNUL  =  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length);  allNUL  =  true;	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    start,    end);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
59	[BUG]  [BUGGY]  allNUL  -=  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  -=  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  -=  BYTE_MASK;	  allNUL    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
60	[BUG]  [BUGGY]  allNUL  =  end;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  end;	  allNUL    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
61	[BUG]  [BUGGY]  allNUL  =  i;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  i;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  i;	  allNUL    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
62	[BUG]  [BUGGY]  allNUL  =  length;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  length;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  length;	  allNUL    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
63	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  i,  buffer,  0,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  i,  buffer,  0,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
64	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
65	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  start);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
66	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  start);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  start);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  end,  buffer,  0,  start);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
67	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
68	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
69	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i,  end);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  0,  buffer,  i,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
72	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  start,  end);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  i,  buffer,  start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  i,  buffer,  start,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
73	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  i);  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end,  i);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end,  i);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
74	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i,  start,  end);  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  i,  start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  0,  buffer,  i,  start,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
75	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  +  1);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
76	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  i,  buffer,  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  i,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
77	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  +  1);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
78	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  1);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
79	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
80	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  end,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
81	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i  +  1];  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i  +  1];  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer[i  +  1];	  byte[]    buffer[]    =(byte[])buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
82	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i-1];  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i-1];  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer[i-1];	  byte[]    buffer[]    =(byte[])buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
83	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].length;  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].length;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer[i].length;	  byte[]    buffer[]    =(byte[])buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
84	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i++];  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i++];  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer[i++];	  byte[]    buffer[]    =(byte[])buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
85	[BUG]  [BUGGY]  allNUL  =  '['  ||  end;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  '['  ||  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  '['  ||  end;	  allNUL    =    '[';    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
86	[BUG]  [BUGGY]  allNUL  =  '['  +  i);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  '['  +  i);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  '['  +  i);	  allNUL    =    '[';    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
87	[BUG]  [BUGGY]  allNUL  =  '['  ||  end  >  buffer[i]);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  '['  ||  end  >  buffer[i]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  '['  ||  end  >  buffer[i]);	  allNUL    =    '[';    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
88	[BUG]  [BUGGY]  allNUL  =  '['  +  i  +  1;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  '['  +  i  +  1;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  '['  +  i  +  1;	  allNUL    =    '[';    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
89	[BUG]  [BUGGY]  ((  byte[])buffer[i]).return(0,  length);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).return(0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).return(0,  length);	  ((    byte[])buffer[i]).return(0L);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
90	[BUG]  [BUGGY]  ((  byte[])buffer[i]).return(0L,  length);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).return(0L,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).return(0L,  length);	  ((    byte[])buffer[i]).return(0L);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
91	[BUG]  [BUGGY]  ((  byte[])buffer[i]).return(0L,  end);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).return(0L,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).return(0L,  end);	  ((    byte[])buffer[i]).return(0L);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
92	[BUG]  [BUGGY]  ((  byte[])buffer[i]).return(0,  end);  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).return(0,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).return(0,  end);	  ((    byte[])buffer[i]).return(0L);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
93	[BUG]  [BUGGY]  ((  byte[])buffer[i]).return(0);  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).return(0);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).return(0);	  ((    byte[])buffer[i]).return(0L);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
94	[BUG]  [BUGGY]  ((  byte[])buffer[i]).return(0L  +  1);  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).return(0L  +  1);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).return(0L  +  1);	  ((    byte[])buffer[i]).return(0L);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
95	[BUG]  [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    '.')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
96	[BUG]  [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    '.')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
97	[BUG]  [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')return  0;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')return  0;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')return  0;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    '.')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
98	[BUG]  [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    '.')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
99	[BUG]  [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0l;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0l;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0l;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    '.')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
100	[BUG]  [BUGGY]  allNUL  =   "BYTE_MASK "  +  i;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =   "BYTE_MASK "  +  i;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =   "BYTE_MASK "  +  i;	  allNUL    =       "BYTE_MASK   ";    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
101	[BUG]  [BUGGY]  allNUL  =! "BYTE_MASK ";  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =! "BYTE_MASK ";  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =! "BYTE_MASK ";	  allNUL    =       "BYTE_MASK   ";    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
102	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  [Delete]  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	[Delete]	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
103	[BUG]  [BUGGY]  AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
104	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
105	[BUG]  [BUGGY]  AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ ".  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ ".  must  be  at  least  2 ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ ".  must  be  at  least  2 ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
106	[BUG]  [BUGGY]  cast(buffer[i].getByte(),  start,  end);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer[i].getByte(),  start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer[i].getByte(),  start,  end);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
107	[BUG]  [BUGGY]  cast(buffer[i].getByte(),  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer[i].getByte(),  BYTE_MASK);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer[i].getByte(),  BYTE_MASK);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
108	[BUG]  [BUGGY]  cast(buffer[i].getByte());  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer[i].getByte());  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer[i].getByte());	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
109	[BUG]  [BUGGY]  cast(buffer[i].getByte(),  0,  length);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer[i].getByte(),  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer[i].getByte(),  0,  length);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
110	[BUG]  [BUGGY]  cast(buffer[i]);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer[i]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer[i]);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
111	[BUG]  [BUGGY]  cast(buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  0,  length);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
112	[BUG]  [BUGGY]  cast(buffer[i].getByte(),  end);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer[i].getByte(),  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer[i].getByte(),  end);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
113	[BUG]  [BUGGY]  allNUL  :  buffer[i];  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  :  buffer[i];  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  :  buffer[i];	  allNUL    :    null;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
114	[BUG]  [BUGGY]  allNUL  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  :  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  :  BYTE_MASK;	  allNUL    :    null;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
115	[BUG]  [BUGGY]  allNUL  :  buffer[i].byteValue();  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  :  buffer[i].byteValue();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  :  buffer[i].byteValue();	  allNUL    :    null;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
116	[BUG]  [BUGGY]  allNUL  :  Boolean.FALSE;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  :  Boolean.FALSE;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  :  Boolean.FALSE;	  allNUL    :    null;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
117	[BUG]  [BUGGY]  allNUL  :  buffer[i].getByte();  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  :  buffer[i].getByte();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  :  buffer[i].getByte();	  allNUL    :    null;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
118	[BUG]  [BUGGY]  allNUL  &=  end  ||  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=  end  ||  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  end  ||  BYTE_MASK;	  allNUL    &=    BYTE_MASK    ||    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
119	[BUG]  [BUGGY]  allNUL  &=  length  ||  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=  length  ||  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  length  ||  BYTE_MASK;	  allNUL    &=    BYTE_MASK    ||    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
120	[BUG]  [BUGGY]  allNUL  &=  BYTE_MASK  ||  end;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=  BYTE_MASK  ||  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  BYTE_MASK  ||  end;	  allNUL    &=    BYTE_MASK    ||    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
121	[BUG]  [BUGGY]  allNUL  &=  start  ||  end;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=  start  ||  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  start  ||  end;	  allNUL    &=    BYTE_MASK    ||    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
122	[BUG]  [BUGGY]  allNUL  &=  offset  ||  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=  offset  ||  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  offset  ||  BYTE_MASK;	  allNUL    &=    BYTE_MASK    ||    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
123	[BUG]  [BUGGY]  allNUL  |=  BYTE_MASK  ||  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  BYTE_MASK  ||  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  BYTE_MASK  ||  BYTE_MASK;	  allNUL    &=    BYTE_MASK    ||    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
124	[BUG]  [BUGGY]  allNUL  &=  BYTE_MASK  ||  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=  BYTE_MASK  ||  BYTE_MASK  +  1;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  BYTE_MASK  ||  BYTE_MASK  +  1;	  allNUL    &=    BYTE_MASK    ||    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
125	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end.clone();  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])end.clone();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])end.clone();	  byte[]    buffer[]    =(byte[])buffer.clone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
126	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])i.clone();  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])i.clone();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])i.clone();	  byte[]    buffer[]    =(byte[])buffer.clone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
127	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])buffer.clone();  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer  =(byte[])buffer.clone();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer  =(byte[])buffer.clone();	  byte[]    buffer[]    =(byte[])buffer.clone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
128	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])byte.clone();  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])byte.clone();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])byte.clone();	  byte[]    buffer[]    =(byte[])buffer.clone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
129	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buff.clone();  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buff.clone();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buff.clone();	  byte[]    buffer[]    =(byte[])buffer.clone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
130	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])length.clone();  [CE]  illegal  start  of  expression  [FE]                                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])length.clone();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])length.clone();	  byte[]    buffer[]    =(byte[])buffer.clone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
131	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  start,  end);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  start,  end);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
132	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  0,  end);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  0,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  0,  end);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
133	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer[start,  i],  0,  end);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer[start,  i],  0,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer[start,  i],  0,  end);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
134	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  BYTE_MASK);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  BYTE_MASK);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
135	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  0,  buffer[start,  i],  0,  end);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  0,  buffer[start,  i],  0,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  0,  buffer[start,  i],  0,  end);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
136	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
137	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
138	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  i,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  i,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
139	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  i,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  i,  buffer,  0,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
140	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  end,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
141	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
142	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  i;  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  i;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  i;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
143	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  i;  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  i;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);  end  =  offset  +  i;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
144	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  i,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  i,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  length);	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    System.arraycopy(buffer,    start,    buffer,    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
145	[BUG]  [BUGGY]  ||  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ||  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	||  end)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    System.arraycopy(buffer,    start,    buffer,    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
146	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  length);	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    System.arraycopy(buffer,    start,    buffer,    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
147	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  length);	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    System.arraycopy(buffer,    start,    buffer,    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
148	[BUG]  [BUGGY]  allNUL  =(end  <  <  1)||(end  >  buffer[i]  &  0xfffffff));  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  <  <  1)||(end  >  buffer[i]  &  0xfffffff));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  <  <  1)||(end  >  buffer[i]  &  0xfffffff));	  allNUL    ='';    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
149	[BUG]  [BUGGY]  allNUL  =(end  <  <  1)||(end  >  buffer[i]  &  0xffffff));  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  <  <  1)||(end  >  buffer[i]  &  0xffffff));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  <  <  1)||(end  >  buffer[i]  &  0xffffff));	  allNUL    ='';    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
150	[BUG]  [BUGGY]  allNUL  =(end  <  <  1)||(end  >  buffer[i]  &  0xffffffff));  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  <  <  1)||(end  >  buffer[i]  &  0xffffffff));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  <  <  1)||(end  >  buffer[i]  &  0xffffffff));	  allNUL    ='';    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
151	[BUG]  [BUGGY]  AllNUL  :  true;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  true;	  if(allNUL)    {    allNUL    :    true;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
152	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aughtExceptionHandler.throwInternal();	  if(allNUL)    {    allNUL    :    true;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
153	[BUG]  [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aughtExceptionHandler.throwUnquotedException( " ");  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aughtExceptionHandler.throwUnquotedException( " ");	  if(allNUL)    {    allNUL    :    true;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
154	[BUG]  [BUGGY]  AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
155	[BUG]  [BUGGY]  AllNull  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNull  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNull  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
156	[BUG]  [BUGGY]  AllNUL  :  false;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  false;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  false;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
157	[BUG]  [BUGGY]  AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ").equals(start  +  i));  }  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ").equals(start  +  i));  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ").equals(start  +  i));  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
158	[BUG]  [BUGGY]  AllNUL  :  false;  }  else  {  throw  new  IllegalArgumentException( " ").equals(start  +  i));  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  false;  }  else  {  throw  new  IllegalArgumentException( " ").equals(start  +  i));  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  false;  }  else  {  throw  new  IllegalArgumentException( " ").equals(start  +  i));  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
159	[BUG]  [BUGGY]  AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ").equals(start  +  i);  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ").equals(start  +  i);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ").equals(start  +  i);  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
160	[BUG]  [BUGGY]  allNUL  &='';  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &='';  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &='';	  allNUL    |='';    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
161	[BUG]  [BUGGY]  allNUL  |=  '-';  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  '-';  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  '-';	  allNUL    |='';    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
162	[BUG]  [BUGGY]  allNUL  |=(end  +  i));  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=(end  +  i));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=(end  +  i));	  allNUL    |='';    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
163	[BUG]  [BUGGY]  allNUL  |=  2;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  2;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  2;	  allNUL    |=    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
164	[BUG]  [BUGGY]  allNUL  |=  1L;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  1L;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  1L;	  allNUL    |=    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
165	[BUG]  [BUGGY]  allNUL  &=  1;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=  1;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  1;	  allNUL    |=    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
166	[BUG]  [BUGGY]  allNUL  |=  0L;  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  0L;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  0L;	  allNUL    |=    1;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
167	[BUG]  [BUGGY]  allNUL  |=  FALSE;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  FALSE;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  FALSE;	  allNUL    |=    true;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
168	[BUG]  [BUGGY]  allNUL  |=  null;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  null;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  null;	  allNUL    |=    true;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
169	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getBytes(length);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getBytes(length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer[i].getBytes(length);	  byte[]    buffer[]    =(byte[])buffer[i].getBytes();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
170	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getBytes(offset);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getBytes(offset);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer[i].getBytes(offset);	  byte[]    buffer[]    =(byte[])buffer[i].getBytes();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
171	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getBytes(length  +  1);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getBytes(length  +  1);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer[i].getBytes(length  +  1);	  byte[]    buffer[]    =(byte[])buffer[i].getBytes();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
172	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getBytes(0);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getBytes(0);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer[i].getBytes(0);	  byte[]    buffer[]    =(byte[])buffer[i].getBytes();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
173	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getBytes(end);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getBytes(end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer[i].getBytes(end);	  byte[]    buffer[]    =(byte[])buffer[i].getBytes();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
174	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getBytes(length  *  2);  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getBytes(length  *  2);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer[i].getBytes(length  *  2);	  byte[]    buffer[]    =(byte[])buffer[i].getBytes();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
175	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  i,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  i,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  end);	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
176	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  end);	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
177	[BUG]  [BUGGY]  ((  byte[])buffer[i]).clear();  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).clear();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).clear();	  ((    byte[])buffer[i]).reset();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
178	[BUG]  [BUGGY]  ((  byte[])buffer[i]).get();  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).get();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).get();	  ((    byte[])buffer[i]).reset();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
179	[BUG]  [BUGGY]  ((  byte[])buffer[i]).set(end);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).set(end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).set(end);	  ((    byte[])buffer[i]).reset();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
180	[BUG]  [BUGGY]  ((  byte[])buffer[i]).set(length);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).set(length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).set(length);	  ((    byte[])buffer[i]).reset();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
181	[BUG]  [BUGGY]  ((  byte[])buffer[i]).getCode();  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).getCode();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).getCode();	  ((    byte[])buffer[i]).reset();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
182	[BUG]  [BUGGY]  ((  byte[])buffer[i]).set(end,  offset  +  length);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).set(end,  offset  +  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).set(end,  offset  +  length);	  ((    byte[])buffer[i]).reset();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
183	[BUG]  [BUGGY]  ((  byte[])buffer[i]).append('  ',  end);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).append('  ',  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).append('  ',  end);	  ((    byte[])buffer[i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
184	[BUG]  [BUGGY]  ((  byte[])buffer[i]).append(''+  start);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).append(''+  start);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).append(''+  start);	  ((    byte[])buffer[i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
185	[BUG]  [BUGGY]  ((  byte[])buffer[i]).append(''+  length);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).append(''+  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).append(''+  length);	  ((    byte[])buffer[i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
186	[BUG]  [BUGGY]  ((  byte[])buffer[i]).append('  ',  start);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).append('  ',  start);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).append('  ',  start);	  ((    byte[])buffer[i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
187	[BUG]  [BUGGY]  ((  byte[])buffer[i]).append('  ',  start  +  length);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).append('  ',  start  +  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).append('  ',  start  +  length);	  ((    byte[])buffer[i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
188	[BUG]  [BUGGY]  ((  byte[])buffer[i]).append(''+  end);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).append(''+  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).append(''+  end);	  ((    byte[])buffer[i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
189	[BUG]  [BUGGY]  AllNul  :  true;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNul  :  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNul  :  true;	  AllNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
190	[BUG]  [BUGGY]  AllNUL  :  null;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  null;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  null;	  AllNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
191	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  start,  end);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  start,  end);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
192	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  end,  length);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  end,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  end,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
193	[BUG]  [BUGGY]  if(length  >  0)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  start,  end);  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(length  >  0)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  start,  end);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(length  >  0)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  start,  end);  }	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
194	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer[i],  0,  end);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer[i],  0,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer[i],  0,  end);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
195	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  0,  buffer[i],  start,  end);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  0,  buffer[i],  start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  0,  buffer[i],  start,  end);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
196	[BUG]  [BUGGY]  allNUL  &=  length;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=  length;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  length;	  allNUL    &=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
197	[BUG]  [BUGGY]  allNUL  &=  end;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  end;	  allNUL    &=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
198	[BUG]  [BUGGY]  allNUL  &=  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=  BYTE_MASK  +  1;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  BYTE_MASK  +  1;	  allNUL    &=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
199	[BUG]  [BUGGY]  allNUL  &=  BYTE_MASK  ||  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=  BYTE_MASK  ||  offset  +  length;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  BYTE_MASK  ||  offset  +  length;	  allNUL    &=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
200	[BUG]  [BUGGY]  allNUL  ='   "'  +  i;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  ='   "'  +  i;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  ='   "'  +  i;	  allNUL    ='   "';    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
201	[BUG]  [BUGGY]  allNUL  |=  length;  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  length;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  length;	  allNUL    |=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
202	[BUG]  [BUGGY]  allNUL  |=  end;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  end;	  allNUL    |=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
203	[BUG]  [BUGGY]  allNUL  |=  i;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  i;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  i;	  allNUL    |=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
204	[BUG]  [BUGGY]  allNUL  |=  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  BYTE_MASK  +  1;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  BYTE_MASK  +  1;	  allNUL    |=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
205	[BUG]  [BUGGY]  allNUL  |=  BYTE_MASK  |  1;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  BYTE_MASK  |  1;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  BYTE_MASK  |  1;	  allNUL    |=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
206	[BUG]  [BUGGY]  allNUL  |=  BYTE_MASK  -  1;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  BYTE_MASK  -  1;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  BYTE_MASK  -  1;	  allNUL    |=    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
207	[BUG]  [BUGGY]  ((  byte)end).append(buffer[i]);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte)end).append(buffer[i]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte)end).append(buffer[i]);	  ((    char)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
208	[BUG]  [BUGGY]  ((  char)end).append(buffer[i]  +  length);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  char)end).append(buffer[i]  +  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  char)end).append(buffer[i]  +  length);	  ((    char)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
209	[BUG]  [BUGGY]  ((  char)end).append(buffer[i]  +  1);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  char)end).append(buffer[i]  +  1);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  char)end).append(buffer[i]  +  1);	  ((    char)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
210	[BUG]  [BUGGY]  ((  String)end).append(buffer[i]);  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  String)end).append(buffer[i]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  String)end).append(buffer[i]);	  ((    char)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
211	[BUG]  [BUGGY]  ((  char)end).append(buffer[i],  length);  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  char)end).append(buffer[i],  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  char)end).append(buffer[i],  length);	  ((    char)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
212	[BUG]  [BUGGY]  ((  char)start).append(buffer[i]);  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  char)start).append(buffer[i]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  char)start).append(buffer[i]);	  ((    char)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
213	[BUG]  [BUGGY]  AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
214	[BUG]  [BUGGY]  AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ ",  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ ",  must  be  at  least  2 ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ ",  must  be  at  least  2 ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
215	[BUG]  [BUGGY]  allNUL  |=  start  &&  end  <  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  start  &&  end  <  =  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  start  &&  end  <  =  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    <    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
216	[BUG]  [BUGGY]  allNUL  |=  end  &&  BYTE_MASK  <  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  end  &&  BYTE_MASK  <  =  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  end  &&  BYTE_MASK  <  =  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    <    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
217	[BUG]  [BUGGY]  allNUL  |=  length  &&  end  <  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  length  &&  end  <  =  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  length  &&  end  <  =  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    <    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
218	[BUG]  [BUGGY]  allNUL  |=  end  &&  start  <  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  end  &&  start  <  =  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  end  &&  start  <  =  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    <    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
219	[BUG]  [BUGGY]  allNUL  |=  end  &&  end  <  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  end  &&  end  <  =  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  end  &&  end  <  =  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    <    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
220	[BUG]  [BUGGY]  allNUL  |=  end  &&  buffer[i]  <  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  end  &&  buffer[i]  <  =  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  end  &&  buffer[i]  <  =  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    <    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
221	[BUG]  [BUGGY]  allNUL  |=  end  &&  offset  <  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  end  &&  offset  <  =  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  end  &&  offset  <  =  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    <    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
222	[BUG]  [BUGGY]  allNul  :  true;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNul  :  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNul  :  true;	  allNul    :    false;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
223	[BUG]  [BUGGY]  allNul  :  null;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNul  :  null;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNul  :  null;	  allNul    :    false;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
224	[BUG]  [BUGGY]  allNul  :  Boolean.FALSE;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNul  :  Boolean.FALSE;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNul  :  Boolean.FALSE;	  allNul    :    false;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
225	[BUG]  [BUGGY]  allNul  :  Boolean.TRUE;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNul  :  Boolean.TRUE;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNul  :  Boolean.TRUE;	  allNul    :    false;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
226	[BUG]  [BUGGY]  allowNonEmpty(i)  {  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(i)  {  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(i)  {  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
227	[BUG]  [BUGGY]  allowNonEmpty(i)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(i)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(i)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
228	[BUG]  [BUGGY]  allowNonEmpty(i)  {  if(allNUL)  {  allNul  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(i)  {  if(allNUL)  {  allNul  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(i)  {  if(allNUL)  {  allNul  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
229	[BUG]  [BUGGY]  allowNonEmpty(i)  {  allNul  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(i)  {  allNul  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(i)  {  allNul  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
230	[BUG]  [BUGGY]  AllNUL  :  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
231	[BUG]  [BUGGY]  allowNonEmpty(i)  {  if(allNUL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(i)  {  if(allNUL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(i)  {  if(allNUL)  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
232	[BUG]  [BUGGY]  allNUL  =  true;  }  else  if(i  >  start)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  }  else  if(i  >  start)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  }  else  if(i  >  start)  {  buffer[i]  =  buffer[i];  }	  allNUL    =    false;    }    else    if(i    >    start)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
233	[BUG]  [BUGGY]  allNUL  =  true;  }  else  if(i  <  start)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  }  else  if(i  <  start)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  }  else  if(i  <  start)  {  buffer[i]  =  buffer[i];  }	  allNUL    =    false;    }    else    if(i    >    start)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
234	[BUG]  [BUGGY]  allNUL  =  true;  }  else  if(i  >  end)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  }  else  if(i  >  end)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  }  else  if(i  >  end)  {  buffer[i]  =  buffer[i];  }	  allNUL    =    false;    }    else    if(i    >    start)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
235	[BUG]  [BUGGY]  allNUL  =  true;  }  else  if(i  <  end)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  }  else  if(i  <  end)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  }  else  if(i  <  end)  {  buffer[i]  =  buffer[i];  }	  allNUL    =    false;    }    else    if(i    >    start)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
236	[BUG]  [BUGGY]  allNUL  =  true;  }  else  if(i  >=  start)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  }  else  if(i  >=  start)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  }  else  if(i  >=  start)  {  buffer[i]  =  buffer[i];  }	  allNUL    =    false;    }    else    if(i    >    start)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
237	[BUG]  [BUGGY]  while(i  <  length)  {  buffer[i]  =  buffer[i];  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  while(i  <  length)  {  buffer[i]  =  buffer[i];  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	while(i  <  length)  {  buffer[i]  =  buffer[i];	  while(i    <    end)    {    buffer[i]    =    buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
238	[BUG]  [BUGGY]  while(i  <  start)  {  buffer[i]  =  buffer[i];  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  while(i  <  start)  {  buffer[i]  =  buffer[i];  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	while(i  <  start)  {  buffer[i]  =  buffer[i];	  while(i    <    end)    {    buffer[i]    =    buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
239	[BUG]  [BUGGY]  while(i  <  end)  {  buffer[i]  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  while(i  <  end)  {  buffer[i]  =  offset  +  length;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	while(i  <  end)  {  buffer[i]  =  offset  +  length;	  while(i    <    end)    {    buffer[i]    =    buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
240	[BUG]  [BUGGY]  while(i  <  offset)  {  buffer[i]  =  buffer[i];  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  while(i  <  offset)  {  buffer[i]  =  buffer[i];  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	while(i  <  offset)  {  buffer[i]  =  buffer[i];	  while(i    <    end)    {    buffer[i]    =    buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
241	[BUG]  [BUGGY]  while(i  <  end)  {  buffer[i]  =  new  byte[length];  [CE]  illegal  start  of  expression  [FE]                                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  while(i  <  end)  {  buffer[i]  =  new  byte[length];  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	while(i  <  end)  {  buffer[i]  =  new  byte[length];	  while(i    <    end)    {    buffer[i]    =    buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
242	[BUG]  [BUGGY]  while(i  <  end)  {  buffer[i]  =  buffer[i].length;  [CE]  illegal  start  of  expression  [FE]                                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  while(i  <  end)  {  buffer[i]  =  buffer[i].length;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	while(i  <  end)  {  buffer[i]  =  buffer[i].length;	  while(i    <    end)    {    buffer[i]    =    buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
243	[BUG]  [BUGGY]  allowNonEmpty(i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(i)  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
244	[BUG]  [BUGGY]  allowNull(buffer,  i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNull(buffer,  i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNull(buffer,  i)  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
245	[BUG]  [BUGGY]  allowNonArray(buffer[i])  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonArray(buffer[i])  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonArray(buffer[i])  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
246	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end)  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
247	[BUG]  [BUGGY]  allowNonArray(buffer[i]))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonArray(buffer[i]))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonArray(buffer[i]))  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
248	[BUG]  [BUGGY]  allowNonEmpty(start,  end))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end))  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
249	[BUG]  [BUGGY]  AllNUL  =  null;  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  =  null;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  =  null;	  AllNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
250	[BUG]  [BUGGY]  ALLNUL  :  true;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ALLNUL  :  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	ALLNUL  :  true;	  ALLNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
251	[BUG]  [BUGGY]  ALLNUL  :  null;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ALLNUL  :  null;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	ALLNUL  :  null;	  ALLNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
252	[BUG]  [BUGGY]  if(length  >  0)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(length  >  0)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(length  >  0)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
253	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  end,  buffer[i],  0,  length);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  end,  buffer[i],  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  end,  buffer[i],  0,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
254	[BUG]  [BUGGY]  AllNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
255	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  0,  buffer[i],  0,  length);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  0,  buffer[i],  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  0,  buffer[i],  0,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
256	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
257	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
258	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  length);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
259	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  0,  length);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  0,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
260	[BUG]  [BUGGY]  if(length  >  0)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(length  >  0)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(length  >  0)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  }	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
261	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  length,  i);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  length,  i);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  length,  i);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
262	[BUG]  [BUGGY]  AllNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
263	[BUG]  [BUGGY]  allNUL  &=  0;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=  0;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  0;	  allNUL    |=    0;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
264	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  end);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
265	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  1);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  1);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  1);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
266	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  start);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  start);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  -  start);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
267	[BUG]  [BUGGY]  System.arraycopy(buffer,  i  +  1,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  i  +  1,  buffer,  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  i  +  1,  buffer,  0,  length);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
268	[BUG]  [BUGGY]  System.arraycopy(buffer,  end  +  1,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  end  +  1,  buffer,  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  end  +  1,  buffer,  0,  length);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
269	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  +  1);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  +  1);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  length  +  1);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
270	[BUG]  [BUGGY]  AllNul  =  true;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNul  =  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNul  =  true;	  AllNul    =    false;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
271	[BUG]  [BUGGY]  AllNul  =  null;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNul  =  null;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNul  =  null;	  AllNul    =    false;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
272	[BUG]  [BUGGY]  AllNul(true);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNul(true);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNul(true);	  AllNul    =    false;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
273	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  allNUL  =  true;  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  allNUL  =  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  allNUL  =  true;	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
274	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  false;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  false;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  false;	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
275	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  0,  end);  allNUL  =  true;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  i,  buffer,  0,  end);  allNUL  =  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  i,  buffer,  0,  end);  allNUL  =  true;	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
276	[BUG]  [BUGGY]  AllNUL  |=  true;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  |=  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  |=  true;	  AllNUL    |=    false;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
277	[BUG]  [BUGGY]  AllNUL  |=  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  |=  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  |=  BYTE_MASK;	  AllNUL    |=    false;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
278	[BUG]  [BUGGY]  AllNUL  |=  0;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  |=  0;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  |=  0;	  AllNUL    |=    false;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
279	[BUG]  [BUGGY]  AllNUL  |=  null;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  |=  null;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  |=  null;	  AllNUL    |=    false;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
280	[BUG]  [BUGGY]  AllNUL  |=(i  ==  end?  true  :  false);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  |=(i  ==  end?  true  :  false);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  |=(i  ==  end?  true  :  false);	  AllNUL    |=    false;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
281	[BUG]  [BUGGY]  allowInteger(start,  end);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowInteger(start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowInteger(start,  end);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
282	[BUG]  [BUGGY]  allowMissingValue(length,  buffer[i]);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowMissingValue(length,  buffer[i]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowMissingValue(length,  buffer[i]);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
283	[BUG]  [BUGGY]  allowMutator(true);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowMutator(true);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowMutator(true);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
284	[BUG]  [BUGGY]  allowMissingValue(length);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowMissingValue(length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowMissingValue(length);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
285	[BUG]  [BUGGY]  allowLength(length);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowLength(length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowLength(length);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
286	[BUG]  [BUGGY]  allowMissingValue(start,  end);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowMissingValue(start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowMissingValue(start,  end);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
287	[BUG]  [BUGGY]  allowIntrospector(int  i,  start,  end);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowIntrospector(int  i,  start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowIntrospector(int  i,  start,  end);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
288	[BUG]  [BUGGY]  cast(buffer,  start,  end);  [CE]  illegal  start  of  type  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start,  end);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
289	[BUG]  [BUGGY]  cast(buffer,  start  +  length,  buffer[i]);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start  +  length,  buffer[i]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start  +  length,  buffer[i]);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
290	[BUG]  [BUGGY]  combint(buffer,  start,  end);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  combint(buffer,  start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	combint(buffer,  start,  end);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
291	[BUG]  [BUGGY]  combint[]  buffer  =(byte[])length;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  combint[]  buffer  =(byte[])length;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	combint[]  buffer  =(byte[])length;	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
292	[BUG]  [BUGGY]  combint(buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  combint(buffer,  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	combint(buffer,  0,  length);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
293	[BUG]  [BUGGY]  allNUL  =  Boolean.valueOf(i);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  Boolean.valueOf(i);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  Boolean.valueOf(i);	  allNUL    =    null;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
294	[BUG]  [BUGGY]  allNUL  =  Boolean.FALSE;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  Boolean.FALSE;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  Boolean.FALSE;	  allNUL    =    null;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
295	[BUG]  [BUGGY]  allNUL  |=  length  &&  buffer[i]  ==  '';  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  length  &&  buffer[i]  ==  '';  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  length  &&  buffer[i]  ==  '';	  allNUL    |=    BYTE_MASK    &&    buffer[i]    =='';    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
296	[BUG]  [BUGGY]  allNUL  |=  end  &&  buffer[i]  ==  '';  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  end  &&  buffer[i]  ==  '';  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  end  &&  buffer[i]  ==  '';	  allNUL    |=    BYTE_MASK    &&    buffer[i]    =='';    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
297	[BUG]  [BUGGY]  allNUL  |=  start  &&  buffer[i]  ==  '';  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  start  &&  buffer[i]  ==  '';  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  start  &&  buffer[i]  ==  '';	  allNUL    |=    BYTE_MASK    &&    buffer[i]    =='';    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
298	[BUG]  [BUGGY]  allNUL  |=  offset  &&  buffer[i]  ==  '';  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  offset  &&  buffer[i]  ==  '';  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  offset  &&  buffer[i]  ==  '';	  allNUL    |=    BYTE_MASK    &&    buffer[i]    =='';    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
299	[BUG]  [BUGGY]  allNUL  |=  i  &&  buffer[i]  ==  '';  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  i  &&  buffer[i]  ==  '';  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  i  &&  buffer[i]  ==  '';	  allNUL    |=    BYTE_MASK    &&    buffer[i]    =='';    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
300	[BUG]  [BUGGY]  allowNonEmpty(start)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start)  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
301	[BUG]  [BUGGY]  allowNonLocal(i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(i)  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
302	[BUG]  [BUGGY]  allowNonArray(buffer[i])  {  throw  new  IllegalArgumentException( " ".equals(buffer[i]));  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonArray(buffer[i])  {  throw  new  IllegalArgumentException( " ".equals(buffer[i]));  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonArray(buffer[i])  {  throw  new  IllegalArgumentException( " ".equals(buffer[i]));  }	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
303	[BUG]  [BUGGY]  allowNonEmpty(i)  {  throw  new  IllegalArgumentException( " ".equals(i));  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(i)  {  throw  new  IllegalArgumentException( " ".equals(i));  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(i)  {  throw  new  IllegalArgumentException( " ".equals(i));  }	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
304	[BUG]  [BUGGY]  allNUL  =(end  >  0)?   "n "  :  end;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  >  0)?   "n "  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  >  0)?   "n "  :  end;	  allNUL    =(end    >    0)?       "   "    :    end;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
305	[BUG]  [BUGGY]  allNUL  =(end  >  0)?   "- "  :  end;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  >  0)?   "- "  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  >  0)?   "- "  :  end;	  allNUL    =(end    >    0)?       "   "    :    end;    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
306	[BUG]  [BUGGY]  while(i  <  end)  {  buffer[i]  =  buffer[i]  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  while(i  <  end)  {  buffer[i]  =  buffer[i]  &  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	while(i  <  end)  {  buffer[i]  =  buffer[i]  &  BYTE_MASK;	  while(i    <    end)    {    buffer[i]    =    buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
307	[BUG]  [BUGGY]  while(i  <  end)  {  buffer[i]  =  buffer[i  +  1];  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  while(i  <  end)  {  buffer[i]  =  buffer[i  +  1];  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	while(i  <  end)  {  buffer[i]  =  buffer[i  +  1];	  while(i    <    end)    {    buffer[i]    =    buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
308	[BUG]  [BUGGY]  while(i  <  end)  {  buffer[i]  =  buffer[i].getByte();  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  while(i  <  end)  {  buffer[i]  =  buffer[i].getByte();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	while(i  <  end)  {  buffer[i]  =  buffer[i].getByte();	  while(i    <    end)    {    buffer[i]    =    buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
309	[BUG]  [BUGGY]  allowNonEmpty(i)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(i)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(i)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
310	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
311	[BUG]  [BUGGY]  allowNonEmpty(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
312	[BUG]  [BUGGY]  allNUL  =  '['  +(i  +  1)/  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  '['  +(i  +  1)/  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  '['  +(i  +  1)/  BYTE_MASK;	  allNUL    =    '[';    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
313	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  offset,  i,  length);  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  offset,  i,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  offset,  i,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
314	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  length,  i,  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  length,  i,  BYTE_MASK);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  length,  i,  BYTE_MASK);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
315	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  true;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  true;	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    start,    end);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
316	[BUG]  [BUGGY]  if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  true;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  true;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  true;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    start,    end);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
317	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  i);  allNUL  =  true;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  i);  allNUL  =  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  i);  allNUL  =  true;	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    start,    end);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
318	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer.get(i);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer.get(i);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer.get(i);	  byte[]    buffer[]    =(byte[])buffer.clone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
319	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])start.clone();  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])start.clone();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])start.clone();	  byte[]    buffer[]    =(byte[])buffer.clone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
320	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer.toArray(new  byte[buffer.length  ]);  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer.toArray(new  byte[buffer.length  ]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer.toArray(new  byte[buffer.length  ]);	  byte[]    buffer[]    =(byte[])buffer.clone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
321	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  i],  start,  length);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  i],  start,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  i],  start,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
322	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  i],  start,  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  i],  start,  BYTE_MASK);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  i],  start,  BYTE_MASK);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
323	[BUG]  [BUGGY]  if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    System.arraycopy(buffer,    start,    buffer,    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
324	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    System.arraycopy(buffer,    start,    buffer,    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
325	[BUG]  [BUGGY]  if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    System.arraycopy(buffer,    start,    buffer,    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
326	[BUG]  [BUGGY]  allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  '-')&&(buffer[i]!=  '+')&  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  '-')&&(buffer[i]!=  '+')&  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  '-')&&(buffer[i]!=  '+')&	  allNUL    ='';    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
327	[BUG]  [BUGGY]  allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  '>')&&(buffer[i]!=  '  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  '>')&&(buffer[i]!=  '  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  '>')&&(buffer[i]!=  '	  allNUL    ='';    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
328	[BUG]  [BUGGY]  allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  '-')&&(buffer[i]!=  '>')&  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  '-')&&(buffer[i]!=  '>')&  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  '-')&&(buffer[i]!=  '>')&	  allNUL    ='';    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
329	[BUG]  [BUGGY]  allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  '>')&&(buffer[i]!='<  ')&  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  '>')&&(buffer[i]!='<  ')&  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  '>')&&(buffer[i]!='<  ')&	  allNUL    ='';    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
330	[BUG]  [BUGGY]  allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  '')&&(buffer[i]!=  end)&&(buffer[  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  '')&&(buffer[i]!=  end)&&(buffer[  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  '')&&(buffer[i]!=  end)&&(buffer[	  allNUL    ='';    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
331	[BUG]  [BUGGY]  allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  end))  {  return  0;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  end))  {  return  0;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  >'')&&(buffer[i]!='')&&(buffer[i]!='')&&(buffer[i]!=  end))  {  return  0;	  allNUL    ='';    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
332	[BUG]  [BUGGY]  AllNUL  |=!allNUL;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  |=!allNUL;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  |=!allNUL;	  AllNUL    |=    false;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
333	[BUG]  [BUGGY]  AllNUL  |=  1;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  |=  1;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  |=  1;	  AllNUL    |=    false;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
334	[BUG]  [BUGGY]  allowNonLocal(start)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
335	[BUG]  [BUGGY]  allowNegatives(false)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNegatives(false)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNegatives(false)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
336	[BUG]  [BUGGY]  allowNonLocal(start,  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start,  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start,  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
337	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
338	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
339	[BUG]  [BUGGY]  allNUL  =!(buffer[i]  ==''  ||  buffer[i]  ==  'n'  ||  buffer[i]  ==  'r');  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =!(buffer[i]  ==''  ||  buffer[i]  ==  'n'  ||  buffer[i]  ==  'r');  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =!(buffer[i]  ==''  ||  buffer[i]  ==  'n'  ||  buffer[i]  ==  'r');	  allNUL    =    null;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
340	[BUG]  [BUGGY]  allNUL  =!(buffer[i]  ==''  ||  buffer[i]  ==  'n'  ||  buffer[i]  ==  'r'));  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =!(buffer[i]  ==''  ||  buffer[i]  ==  'n'  ||  buffer[i]  ==  'r'));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =!(buffer[i]  ==''  ||  buffer[i]  ==  'n'  ||  buffer[i]  ==  'r'));	  allNUL    =    null;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
341	[BUG]  [BUGGY]  allNUL  =!(buffer[i]  ==''  ||  buffer[i]  ==  'n'  ||  buffer[i]  ==  't'));  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =!(buffer[i]  ==''  ||  buffer[i]  ==  'n'  ||  buffer[i]  ==  't'));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =!(buffer[i]  ==''  ||  buffer[i]  ==  'n'  ||  buffer[i]  ==  't'));	  allNUL    =    null;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
342	[BUG]  [BUGGY]  allNUL  =!(buffer[i]  ==''  ||  buffer[i]  =='');  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =!(buffer[i]  ==''  ||  buffer[i]  =='');  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =!(buffer[i]  ==''  ||  buffer[i]  =='');	  allNUL    =    null;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
343	[BUG]  [BUGGY]  allNUL  =!(buffer[i]  ==''  ||  buffer[i]  ==  'n'  ||  buffer[i]  ==  't');  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =!(buffer[i]  ==''  ||  buffer[i]  ==  'n'  ||  buffer[i]  ==  't');  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =!(buffer[i]  ==''  ||  buffer[i]  ==  'n'  ||  buffer[i]  ==  't');	  allNUL    =    null;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
344	[BUG]  [BUGGY]  allNUL  =  0;  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  0;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  0;	  allNUL    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
345	[BUG]  [BUGGY]  allNUL  &&  buffer[i]  ==  '';  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &&  buffer[i]  ==  '';  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &&  buffer[i]  ==  '';	  allNUL    |=    BYTE_MASK    &&    buffer[i]    =='';    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
346	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  end);  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
347	[BUG]  [BUGGY]  if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  end);  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
348	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  i;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  i;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  i;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
349	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  end,  buffer,  0,  length);  end  =  offset  +  length;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
350	[BUG]  [BUGGY]  allNUL  :  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  :  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  :  System.arraycopy(buffer,  start,  buffer,  0,  end);	  allNUL    :    null;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
351	[BUG]  [BUGGY]  ((  byte[])buffer[start  +  i]).append('  ',  start  +  length);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[start  +  i]).append('  ',  start  +  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[start  +  i]).append('  ',  start  +  length);	  ((    byte[])buffer[start    +    i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
352	[BUG]  [BUGGY]  ((  byte[])buffer[start  +  i],  end).append('  ');  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[start  +  i],  end).append('  ');  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[start  +  i],  end).append('  ');	  ((    byte[])buffer[start    +    i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
353	[BUG]  [BUGGY]  ((  byte[])buffer[start  +  length]).append('  ');  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[start  +  length]).append('  ');  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[start  +  length]).append('  ');	  ((    byte[])buffer[start    +    i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
354	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  end,  offset);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  end,  offset);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  end,  offset);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
355	[BUG]  [BUGGY]  AllNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  start,  end);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  start,  end);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
356	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getBytes(start);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getBytes(start);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer[i].getBytes(start);	  byte[]    buffer[]    =(byte[])buffer[i].getBytes();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
357	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].toByteArray();  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].toByteArray();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer[i].toByteArray();	  byte[]    buffer[]    =(byte[])buffer[i].getBytes();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
358	[BUG]  [BUGGY]  allowNonLocal(start)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    '.')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
359	[BUG]  [BUGGY]  allowNegatives(false)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNegatives(false)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNegatives(false)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    '.')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
360	[BUG]  [BUGGY]  allowNonLocal(start,  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start,  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start,  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    '.')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
361	[BUG]  [BUGGY]  allowNonLocal(start)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    '.')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
362	[BUG]  [BUGGY]  allowNonLocal(start,  end)  {  if(bYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start,  end)  {  if(bYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start,  end)  {  if(bYTE_MASK)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    '.')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
363	[BUG]  [BUGGY]  allowNonArray(buffer,  start,  end);  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonArray(buffer,  start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonArray(buffer,  start,  end);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
364	[BUG]  [BUGGY]  cast(buffer,  start  +  length,  end  -  start);  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start  +  length,  end  -  start);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start  +  length,  end  -  start);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
365	[BUG]  [BUGGY]  combination(start,  end);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  combination(start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	combination(start,  end);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
366	[BUG]  [BUGGY]  allNUL  |=  start;  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  start;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  start;	  allNUL    |=    BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
367	[BUG]  [BUGGY]  if(allNUL)  {  allNUL  :  false;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  allNUL  :  false;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  allNUL  :  false;  }	  if(allNUL)    {    allNUL    :    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
368	[BUG]  [BUGGY]  if(allNUL)  {  allNul  :  false;  }  [CE]  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  allNul  :  false;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  allNul  :  false;  }	  if(allNUL)    {    allNUL    :    true;    }    	non-compiled	[CE]  	18	None	replace
369	[BUG]  [BUGGY]  if(allNUL)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  throw  new  IllegalStateException( " ");  }	  if(allNUL)    {    allNUL    :    true;    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
370	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);  allNUL  =  true;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);  allNUL  =  true;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);  allNUL  =  true;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
371	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  0,  length);  allNUL  =  true;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  0,  length);  allNUL  =  true;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  0,  length);  allNUL  =  true;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
372	[BUG]  [BUGGY]  AllNull  :  true;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNull  :  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNull  :  true;	  allNul    :    false;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
373	[BUG]  [BUGGY]  allowNonEmpty(start,  end);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
374	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end)  {  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end)  {	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
375	[BUG]  [BUGGY]  cast(buffer[i],  0,  length);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer[i],  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer[i],  0,  length);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
376	[BUG]  [BUGGY]  cast(buffer,  start,  end,  0L);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start,  end,  0L);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start,  end,  0L);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
377	[BUG]  [BUGGY]  ((  byte[])buffer[i]).set(start,  end);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).set(start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).set(start,  end);	  ((    byte[])buffer[i]).reset();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
378	[BUG]  [BUGGY]  ((  byte[])buffer[i]).length();  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).length();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).length();	  ((    byte[])buffer[i]).reset();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
379	[BUG]  [BUGGY]  ((  byte[])buffer[i]).initByte(start,  end);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).initByte(start,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).initByte(start,  end);	  ((    byte[])buffer[i]).reset();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
380	[BUG]  [BUGGY]  ((  byte[])buffer[i]).initByte(start);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).initByte(start);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).initByte(start);	  ((    byte[])buffer[i]).reset();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
381	[BUG]  [BUGGY]  allNUL  &=  start  ||  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=  start  ||  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  start  ||  BYTE_MASK;	  allNUL    &=    BYTE_MASK    ||    BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
382	[BUG]  [BUGGY]  allNUL  &=  BYTE_MASK  ||  start;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=  BYTE_MASK  ||  start;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  BYTE_MASK  ||  start;	  allNUL    &=    BYTE_MASK    ||    BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	14	None	replace
383	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  -  start);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
384	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  i);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  i);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  -  i);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
385	[BUG]  [BUGGY]  allowNonLocal(i)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(i)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(i)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
386	[BUG]  [BUGGY]  allowNonLocal(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
387	[BUG]  [BUGGY]  allowNonEmpty(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
388	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
389	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length,  i);  allNUL  =  false;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length,  i);  allNUL  =  false;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length,  i);  allNUL  =  false;	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    allNUL    =    false;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
390	[BUG]  [BUGGY]  allNUL  |=  ':';  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  ':';  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  ':';	  allNUL    |='';    	non-compiled	[CE]  <identifier>  expected	41	None	replace
391	[BUG]  [BUGGY]  AllNUL  = " ";  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  = " ";  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  = " ";	  AllNUL    =    false;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
392	[BUG]  [BUGGY]  allNUL  |=  i  &&  end  <  =  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  i  &&  end  <  =  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  i  &&  end  <  =  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    <    =    BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	13	None	replace
393	[BUG]  [BUGGY]  allNUL  &=  start;  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=  start;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  start;	  allNUL    &=    BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
394	[BUG]  [BUGGY]  allNUL  &=  i;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=  i;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  i;	  allNUL    &=    BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
395	[BUG]  [BUGGY]  ((  char)end).append(buffer[start]);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  char)end).append(buffer[start]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  char)end).append(buffer[start]);	  ((    char)end).append(buffer[i]);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
396	[BUG]  [BUGGY]  ((  char)end).append(buffer[i],  start);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  char)end).append(buffer[i],  start);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  char)end).append(buffer[i],  start);	  ((    char)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
397	[BUG]  [BUGGY]  ((  char)end).append(buffer[i]  +  start);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  char)end).append(buffer[i]  +  start);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  char)end).append(buffer[i]  +  start);	  ((    char)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
398	[BUG]  [BUGGY]  ((  char)end).append(buffer[start  +  i]);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  char)end).append(buffer[start  +  i]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  char)end).append(buffer[start  +  i]);	  ((    char)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
399	[BUG]  [BUGGY]  ((  char)end).append(buffer[start],  end);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  char)end).append(buffer[start],  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  char)end).append(buffer[start],  end);	  ((    char)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
400	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  i],  length);  [CE]  illegal  start  of  type  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  i],  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  i],  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    end,    length);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
401	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  i,  length);  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  i,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  i,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    end,    length);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
402	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  i);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  i);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  end,  i);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    end,    length);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
403	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  0,  length);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  0,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    end,    length);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
404	[BUG]  [BUGGY]  allNUL  &=(end  <  <  length)?  false  :  end;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &=(end  <  <  length)?  false  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=(end  <  <  length)?  false  :  end;	  allNUL    |=(end    <    <    length)?    false    :    end;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
405	[BUG]  [BUGGY]  allNUL  |=(start  <  <  length)?  false  :  end;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=(start  <  <  length)?  false  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=(start  <  <  length)?  false  :  end;	  allNUL    |=(end    <    <    length)?    false    :    end;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
406	[BUG]  [BUGGY]  allNUL  |=  i  &&  end  ==  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  i  &&  end  ==  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  i  &&  end  ==  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    ==    BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
407	[BUG]  [BUGGY]  allNUL  &&  end  ==  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  &&  end  ==  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &&  end  ==  BYTE_MASK;	  allNUL    |=    BYTE_MASK    &&    end    ==    BYTE_MASK;    	non-compiled	[CE]  <identifier>  expected	15	None	replace
408	[BUG]  [BUGGY]  allowNonEmpty(i)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(i)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(i)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
409	[BUG]  [BUGGY]  allowNonEmpty(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
410	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
411	[BUG]  [BUGGY]  allowNonEmpty(start)  {  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start)  {  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start)  {  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
412	[BUG]  [BUGGY]  allNUL  =  true;  }  else  if(i  >  start)  {  buffer[i]  =  BYTE_MASK;  }  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  }  else  if(i  >  start)  {  buffer[i]  =  BYTE_MASK;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  }  else  if(i  >  start)  {  buffer[i]  =  BYTE_MASK;  }	  allNUL    =    false;    }    else    if(i    >    start)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
413	[BUG]  [BUGGY]  allNUL  =  true;  }  else  if(i  >  start)  {  buffer[i]  =  end;  }  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  }  else  if(i  >  start)  {  buffer[i]  =  end;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  }  else  if(i  >  start)  {  buffer[i]  =  end;  }	  allNUL    =    false;    }    else    if(i    >    start)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
414	[BUG]  [BUGGY]  allowNegatives(false)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0;  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNegatives(false)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNegatives(false)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
415	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
416	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
417	[BUG]  [BUGGY]  allowNegatives(false)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNegatives(false)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNegatives(false)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
418	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
419	[BUG]  [BUGGY]  if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  true;  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  true;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  true;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
420	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  allNUL  =  true;  }  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  allNUL  =  true;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  allNUL  =  true;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    allNUL    =    true;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
421	[BUG]  [BUGGY]  if(allNUL)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  end);  }  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  end);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  end);  }	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    0,    end);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
422	[BUG]  [BUGGY]  if(allNUL)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    0,    end);    	non-compiled	[CE]  <identifier>  expected	65	None	replace
423	[BUG]  [BUGGY]  allowNonLocal(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
424	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
425	[BUG]  [BUGGY]  allowNonEmpty(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
426	[BUG]  [BUGGY]  allowNonEmpty(start)  {  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start)  {  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start)  {  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
427	[BUG]  [BUGGY]  allowNonLocal(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ").equals(start  +  i);  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ").equals(start  +  i);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ").equals(start  +  i);  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
428	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ").equals(start  +  i);  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ").equals(start  +  i);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ").equals(start  +  i);  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
429	[BUG]  [BUGGY]  AllNUL  :  Boolean.FALSE;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  Boolean.FALSE;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  Boolean.FALSE;	  AllNUL    :    false;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
430	[BUG]  [BUGGY]  AllNUL  :  Boolean.TRUE;  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  Boolean.TRUE;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  Boolean.TRUE;	  AllNUL    :    false;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
431	[BUG]  [BUGGY]  allowNonArray(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonArray(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonArray(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
432	[BUG]  [BUGGY]  allowNonLocal(start)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonLocal(start)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonLocal(start)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
433	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
434	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end)  {  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
435	[BUG]  [BUGGY]  allowNegatives(false)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNegatives(false)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNegatives(false)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
436	[BUG]  [BUGGY]  allowNonArray(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i]  0,  length);  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonArray(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i]  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonArray(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i]  0,  length);  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
437	[BUG]  [BUGGY]  allowNonEmpty(start,  end)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonEmpty(start,  end)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonEmpty(start,  end)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
438	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
439	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  +  1);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  +  1);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end  +  1);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
440	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  1);  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  1);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end  -  1);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
441	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])end;	  byte[]    buffer[]    =(byte[])buffer[i];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
442	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end[i];  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])end[i];  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])end[i];	  byte[]    buffer[]    =(byte[])buffer[i];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
443	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getByte();  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getByte();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer[i].getByte();	  byte[]    buffer[]    =(byte[])buffer[i];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
444	[BUG]  [BUGGY]  ((  byte[])buffer[i]).return(0L  +  length);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).return(0L  +  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).return(0L  +  length);	  ((    byte[])buffer[i]).return(0L);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
445	[BUG]  [BUGGY]  ((  byte[])buffer[i]).return(0,  start);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).return(0,  start);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).return(0,  start);	  ((    byte[])buffer[i]).return(0L);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
446	[BUG]  [BUGGY]  ((  byte[])buffer[i]).return(1);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).return(1);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).return(1);	  ((    byte[])buffer[i]).return(0L);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
447	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  0,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  0,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  0,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  end);  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    System.arraycopy(buffer,    start,    buffer,    0,    end);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
448	[BUG]  [BUGGY]  allNul  :  BooleanUtils.BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNul  :  BooleanUtils.BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNul  :  BooleanUtils.BYTE_MASK;	  allNul    :    false;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
449	[BUG]  [BUGGY]  allNul  :  BooleanUtils.toBooleanObject(true);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNul  :  BooleanUtils.toBooleanObject(true);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNul  :  BooleanUtils.toBooleanObject(true);	  allNul    :    false;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
450	[BUG]  [BUGGY]  allNul  :  BooleanUtils.isBoolean(false);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNul  :  BooleanUtils.isBoolean(false);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNul  :  BooleanUtils.isBoolean(false);	  allNul    :    false;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
451	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].reset();  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].reset();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer[i].reset();	  byte[]    buffer[]    =(byte[])buffer[i].getBytes();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
452	[BUG]  [BUGGY]  aught(IllegalArgumentException.INVALID_BYTE_MASK);  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aught(IllegalArgumentException.INVALID_BYTE_MASK);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aught(IllegalArgumentException.INVALID_BYTE_MASK);	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
453	[BUG]  [BUGGY]  aught(IllegalArgumentException.fromString(buffer,  i));  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aught(IllegalArgumentException.fromString(buffer,  i));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aught(IllegalArgumentException.fromString(buffer,  i));	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
454	[BUG]  [BUGGY]  aught(IllegalArgumentException.fromString(buffer,  i,  length));  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aught(IllegalArgumentException.fromString(buffer,  i,  length));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aught(IllegalArgumentException.fromString(buffer,  i,  length));	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
455	[BUG]  [BUGGY]  aught(IllegalArgumentException.INVALID_BYTE_MASK,  i);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aught(IllegalArgumentException.INVALID_BYTE_MASK,  i);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aught(IllegalArgumentException.INVALID_BYTE_MASK,  i);	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
456	[BUG]  [BUGGY]  aught(IllegalArgumentException.fromString(buffer,  start,  end));  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aught(IllegalArgumentException.fromString(buffer,  start,  end));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aught(IllegalArgumentException.fromString(buffer,  start,  end));	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
457	[BUG]  [BUGGY]  aught(IllegalArgumentException.create(start,  end));  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aught(IllegalArgumentException.create(start,  end));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aught(IllegalArgumentException.create(start,  end));	  if(allNUL)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
458	[BUG]  [BUGGY]  AllNUL  = "BYTE_MASK ";  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  = "BYTE_MASK ";  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  = "BYTE_MASK ";	  AllNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
459	[BUG]  [BUGGY]  AllNUL  = "BYTE_MASK ".equals(length);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  = "BYTE_MASK ".equals(length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  = "BYTE_MASK ".equals(length);	  AllNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
460	[BUG]  [BUGGY]  AllNUL  = "BYTE_MASK ".equals(end);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  = "BYTE_MASK ".equals(end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  = "BYTE_MASK ".equals(end);	  AllNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
461	[BUG]  [BUGGY]  AllNUL  = "Byte ".equals(end);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  = "Byte ".equals(end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  = "Byte ".equals(end);	  AllNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
462	[BUG]  [BUGGY]  AllNUL  = "BYTE_MASK ".equals(i);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  = "BYTE_MASK ".equals(i);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  = "BYTE_MASK ".equals(i);	  AllNUL    =    false;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
463	[BUG]  [BUGGY]  ALLNUL  :  Boolean.FALSE;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ALLNUL  :  Boolean.FALSE;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	ALLNUL  :  Boolean.FALSE;	  ALLNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
464	[BUG]  [BUGGY]  ALLNUL  :  BooleanUtils.isBoolean(byte[i]);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ALLNUL  :  BooleanUtils.isBoolean(byte[i]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	ALLNUL  :  BooleanUtils.isBoolean(byte[i]);	  ALLNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
465	[BUG]  [BUGGY]  ALLNUL  :  BooleanUtils.isBoolean(false);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ALLNUL  :  BooleanUtils.isBoolean(false);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	ALLNUL  :  BooleanUtils.isBoolean(false);	  ALLNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
466	[BUG]  [BUGGY]  ALLNUL  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ALLNUL  :  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	ALLNUL  :  BYTE_MASK;	  ALLNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
467	[BUG]  [BUGGY]  ALLNUL  :  BooleanUtils.toBooleanObject(true);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ALLNUL  :  BooleanUtils.toBooleanObject(true);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	ALLNUL  :  BooleanUtils.toBooleanObject(true);	  ALLNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
468	[BUG]  [BUGGY]  >>  [Delete]  else  if(allNUL)  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  >>  [Delete]  else  if(allNUL)  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	>>  [Delete]  else  if(allNUL)  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
469	[BUG]  [BUGGY]  >>  [Delete]  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  >>  [Delete]  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	>>  [Delete]  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
470	[BUG]  [BUGGY]  aughtException  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aughtException  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aughtException  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
471	[BUG]  [BUGGY]  aughtException  :  throw  new  IllegalArgumentException( " ".equals(start  +  i));  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aughtException  :  throw  new  IllegalArgumentException( " ".equals(start  +  i));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aughtException  :  throw  new  IllegalArgumentException( " ".equals(start  +  i));	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
472	[BUG]  [BUGGY]  >>  [Delete]  else  if(allNUL)  {  throw  new  IllegalArgumentException( " ").equals(start  +  i);  }  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  >>  [Delete]  else  if(allNUL)  {  throw  new  IllegalArgumentException( " ").equals(start  +  i);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	>>  [Delete]  else  if(allNUL)  {  throw  new  IllegalArgumentException( " ").equals(start  +  i);  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
473	[BUG]  [BUGGY]  >=  [Delete]  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  >=  [Delete]  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	>=  [Delete]  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ".equals(start    +    i));    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
474	[BUG]  [BUGGY]  ((  byte[])buffer[i]).append(''+  1);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).append(''+  1);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).append(''+  1);	  ((    byte[])buffer[i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
475	[BUG]  [BUGGY]  allNUL  |=(end  <  <  2)?  false  :  end;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=(end  <  <  2)?  false  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=(end  <  <  2)?  false  :  end;	  allNUL    |=(end    <    <    length)?    false    :    end;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
476	[BUG]  [BUGGY]  allNUL  =!(end  >  BYTE_MASK  ||  end  >  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =!(end  >  BYTE_MASK  ||  end  >  BYTE_MASK);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =!(end  >  BYTE_MASK  ||  end  >  BYTE_MASK);	  allNUL    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
477	[BUG]  [BUGGY]  allNUL  =!(end  <  0?  BYTE_MASK  :  end);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =!(end  <  0?  BYTE_MASK  :  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =!(end  <  0?  BYTE_MASK  :  end);	  allNUL    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
478	[BUG]  [BUGGY]  AllNUL  :  BooleanUtils.isBoolean(byte[i]);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  BooleanUtils.isBoolean(byte[i]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  BooleanUtils.isBoolean(byte[i]);	  AllNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
479	[BUG]  [BUGGY]  AllNUL  :  BooleanUtils.isBoolean(false);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  BooleanUtils.isBoolean(false);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  BooleanUtils.isBoolean(false);	  AllNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
480	[BUG]  [BUGGY]  AllNUL  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  BYTE_MASK;	  AllNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
481	[BUG]  [BUGGY]  AllNUL  :  BooleanUtils.isBoolean(buffer[i]);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  :  BooleanUtils.isBoolean(buffer[i]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  BooleanUtils.isBoolean(buffer[i]);	  AllNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
482	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length  -  1;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length  -  1;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);  end  =  offset  +  length  -  1;	  System.arraycopy(buffer,    start,    buffer,    0,    length);    end    =    offset    +    length;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
483	[BUG]  [BUGGY]  allNUL  =  '['  ||  end);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  '['  ||  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  '['  ||  end);	  allNUL    =    '[';    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
484	[BUG]  [BUGGY]  allNUL  =  '['  +(i  +  1)+  1);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  '['  +(i  +  1)+  1);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  '['  +(i  +  1)+  1);	  allNUL    =    '[';    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
485	[BUG]  [BUGGY]  ||  allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  true;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ||  allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  true;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	||  allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  true;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
486	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  1,  length);  allNUL  =  true;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  1,  length);  allNUL  =  true;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  1,  length);  allNUL  =  true;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
487	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  length);  allNUL  =  true;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  length);  allNUL  =  true;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  length);  allNUL  =  true;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
488	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  end,  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  end,  BYTE_MASK);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[i],  end,  BYTE_MASK);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
489	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer.toArray(new  byte[buffer[i]);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer.toArray(new  byte[buffer[i]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer.toArray(new  byte[buffer[i]);	  byte[]    buffer[]    =(byte[])buffer.clone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
490	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])offset.clone();  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  byte[]  buffer[]  =(byte[])offset.clone();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])offset.clone();	  byte[]    buffer[]    =(byte[])buffer.clone();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
491	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  false;  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  false;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  false;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
492	[BUG]  [BUGGY]  ||  allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  true;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ||  allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  true;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	||  allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  true;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
493	[BUG]  [BUGGY]  if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  allNUL  =  true;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  allNUL  =  true;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(!allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  allNUL  =  true;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
494	[BUG]  [BUGGY]  allNUL  =  true;  }  else  if(i  >  start)  {  buffer[i]  =  null;  }  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  }  else  if(i  >  start)  {  buffer[i]  =  null;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  }  else  if(i  >  start)  {  buffer[i]  =  null;  }	  allNUL    =    false;    }    else    if(i    >    start)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
495	[BUG]  [BUGGY]  allNUL  =  true;  }  else  if(i  <  start)  {  buffer[i]  =  BYTE_MASK;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  }  else  if(i  <  start)  {  buffer[i]  =  BYTE_MASK;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  }  else  if(i  <  start)  {  buffer[i]  =  BYTE_MASK;  }	  allNUL    =    false;    }    else    if(i    >    start)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
496	[BUG]  [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	[Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    '.')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
497	[BUG]  [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	[Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    '.')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
498	[BUG]  [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.'  ||  buffer[i]  ==  ':')  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.'  ||  buffer[i]  ==  ':')  {  return  0;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	[Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.'  ||  buffer[i]  ==  ':')  {  return  0;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    '.')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
499	[BUG]  [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.'  ||  buffer[i]  ==  '-')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.'  ||  buffer[i]  ==  '-')  {  return  0L;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	[Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.'  ||  buffer[i]  ==  '-')  {  return  0L;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    '.')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
500	[BUG]  [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.'  ||  buffer[i]  ==  '/')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.'  ||  buffer[i]  ==  '/')  {  return  0L;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	[Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.'  ||  buffer[i]  ==  '/')  {  return  0L;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    '.')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
501	[BUG]  [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.'  ||  buffer[i]  ==  '-')  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.'  ||  buffer[i]  ==  '-')  {  return  0;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	[Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.'  ||  buffer[i]  ==  '-')  {  return  0;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    ==    '.')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
502	[BUG]  [BUGGY]  if(allNUL)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);  }	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
503	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  length);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer[start,  i],  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
504	[BUG]  [BUGGY]  if(allNUL)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  BYTE_MASK);  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  BYTE_MASK);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  BYTE_MASK);  }	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[start,    i],    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
505	[BUG]  [BUGGY]  if(end  >  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(end  >  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(end  >  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    System.arraycopy(buffer,    start,    buffer,    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
506	[BUG]  [BUGGY]  if(end  >  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(end  >  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(end  >  0)  {  System.arraycopy(buffer,  start,  buffer,  0,  length);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    0,    end);    System.arraycopy(buffer,    start,    buffer,    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
507	[BUG]  [BUGGY]  AllNUL  |=!(end  ==  offset  +  length);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNUL  |=!(end  ==  offset  +  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  |=!(end  ==  offset  +  length);	  AllNUL    |=    false;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
508	[BUG]  [BUGGY]  allNUL  :  BooleanUtils.isBoolean(byte[i]);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  :  BooleanUtils.isBoolean(byte[i]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  :  BooleanUtils.isBoolean(byte[i]);	  allNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
509	[BUG]  [BUGGY]  allNUL  :  BooleanUtils.isBoolean(false);  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  :  BooleanUtils.isBoolean(false);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  :  BooleanUtils.isBoolean(false);	  allNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
510	[BUG]  [BUGGY]  allNUL  :  BooleanUtils.toBooleanObject(true);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  :  BooleanUtils.toBooleanObject(true);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  :  BooleanUtils.toBooleanObject(true);	  allNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
511	[BUG]  [BUGGY]  allNUL  :  BooleanUtils.isBoolean(buffer[i]);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  :  BooleanUtils.isBoolean(buffer[i]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  :  BooleanUtils.isBoolean(buffer[i]);	  allNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
512	[BUG]  [BUGGY]  allNUL  :  BooleanUtils.BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  :  BooleanUtils.BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  :  BooleanUtils.BYTE_MASK;	  allNUL    :    false;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
513	[BUG]  [BUGGY]  allNUL  :  buffer[start];  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  :  buffer[start];  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  :  buffer[start];	  allNUL    :    null;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
514	[BUG]  [BUGGY]  allNUL  :  buffer[start  +  i];  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  :  buffer[start  +  i];  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  :  buffer[start  +  i];	  allNUL    :    null;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
515	[BUG]  [BUGGY]  allNUL  :  buffer[i].getBytes();  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  :  buffer[i].getBytes();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  :  buffer[i].getBytes();	  allNUL    :    null;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
516	[BUG]  [BUGGY]  aughtException  :  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aughtException  :  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aughtException  :  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
517	[BUG]  [BUGGY]  >>  [Delete]  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  >>  [Delete]  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	>>  [Delete]  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
518	[BUG]  [BUGGY]  >>  [Delete]  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  >>  [Delete]  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	>>  [Delete]  else  {  throw  new  IllegalArgumentException( "Length "+length+ "  must  be  at  least  2 ");	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
519	[BUG]  [BUGGY]  allNUL  |=(length  <  <  1)||(end  >  buffer[i]  &&  buffer[i]!=''));  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=(length  <  <  1)||(end  >  buffer[i]  &&  buffer[i]!=''));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=(length  <  <  1)||(end  >  buffer[i]  &&  buffer[i]!=''));	  allNUL    |=    true;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
520	[BUG]  [BUGGY]  allNUL  |=(length  <  <  1)||(end  >  buffer[i]  &&  buffer[i]  ==''));  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=(length  <  <  1)||(end  >  buffer[i]  &&  buffer[i]  ==''));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=(length  <  <  1)||(end  >  buffer[i]  &&  buffer[i]  ==''));	  allNUL    |=    true;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
521	[BUG]  [BUGGY]  allNUL  |=(length  <  <  1)||(end  >  buffer[i]  &&  buffer[i]!=  '.'));  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=(length  <  <  1)||(end  >  buffer[i]  &&  buffer[i]!=  '.'));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=(length  <  <  1)||(end  >  buffer[i]  &&  buffer[i]!=  '.'));	  allNUL    |=    true;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
522	[BUG]  [BUGGY]  allNUL  |=(length  <  <  1)||(end  >  buffer[i]  &&  buffer[i]  ==  '.'));  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=(length  <  <  1)||(end  >  buffer[i]  &&  buffer[i]  ==  '.'));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=(length  <  <  1)||(end  >  buffer[i]  &&  buffer[i]  ==  '.'));	  allNUL    |=    true;    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
523	[BUG]  [BUGGY]  [Delete]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  [Delete]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	[Delete]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
524	[BUG]  [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	[Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0L;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
525	[BUG]  [BUGGY]  [Delete]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  [Delete]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	[Delete]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
526	[BUG]  [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	[Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
527	[BUG]  [BUGGY]  [Delete]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0l;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  [Delete]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0l;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	[Delete]  while(!allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0l;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
528	[BUG]  [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0l;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  [Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0l;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	[Delete]  while(start  <  end)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '')  {  return  0l;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
529	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  i,  end);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  i,  end);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  i,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
530	[BUG]  [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[i].getByte());  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[i].getByte());  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start  +  length,  end  +  length,  buffer[i].getByte());	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
531	[BUG]  [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[i]).getByte();  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[i]).getByte();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start  +  length,  end  +  length,  buffer[i]).getByte();	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
532	[BUG]  [BUGGY]  cast(buffer,  start,  end  +  length,  buffer[i].getByte());  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start,  end  +  length,  buffer[i].getByte());  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start,  end  +  length,  buffer[i].getByte());	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
533	[BUG]  [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[i]).getByte());  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[i]).getByte());  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start  +  length,  end  +  length,  buffer[i]).getByte());	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
534	[BUG]  [BUGGY]  cast(buffer,  start,  end  +  length,  buffer[i]).getByte();  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start,  end  +  length,  buffer[i]).getByte();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start,  end  +  length,  buffer[i]).getByte();	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
535	[BUG]  [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[i]);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[i]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start  +  length,  end  +  length,  buffer[i]);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i].getByte();    }    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
536	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  offset);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  offset);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  offset);	  System.arraycopy(buffer,    start    +    1,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
537	[BUG]  [BUGGY]  ((  byte[])buffer[i]).complete();  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).complete();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).complete();	  ((    byte[])buffer[i]).reset();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
538	[BUG]  [BUGGY]  ((  byte[])buffer[i]).initByte();  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).initByte();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).initByte();	  ((    byte[])buffer[i]).reset();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
539	[BUG]  [BUGGY]  ((  byte[])buffer[i]).getData();  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[i]).getData();  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).getData();	  ((    byte[])buffer[i]).reset();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
540	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  length,  BYTE_MASK);  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  length,  BYTE_MASK);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  length,  BYTE_MASK);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
541	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  1,  length);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  1,  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  1,  length);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
542	[BUG]  [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  length,  i);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  length,  i);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  true;  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  length,  i);	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
543	[BUG]  [BUGGY]  AllNull  =  true;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNull  =  true;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNull  =  true;	  AllNul    =    false;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
544	[BUG]  [BUGGY]  AllNul  =  false,  allNUL;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNul  =  false,  allNUL;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNul  =  false,  allNUL;	  AllNul    =    false;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
545	[BUG]  [BUGGY]  AllNul  =  false,  allNUL);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  AllNul  =  false,  allNUL);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNul  =  false,  allNUL);	  AllNul    =    false;    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
546	[BUG]  [BUGGY]  allNUL  =  '(';  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  '(';  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  '(';	  allNUL    ='   "';    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
547	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);  allNUL  =  false;  }  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);  allNUL  =  false;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);  allNUL  =  false;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    allNUL    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
548	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  1,  length);  allNUL  =  false;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  1,  length);  allNUL  =  false;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  1,  length);  allNUL  =  false;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    allNUL    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
549	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  length);  allNUL  =  false;  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  length);  allNUL  =  false;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  length);  allNUL  =  false;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    allNUL    =    false;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
550	[BUG]  [BUGGY]  allNUL  =(end  >  offset  +  length)?''  :  end;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  >  offset  +  length)?''  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  >  offset  +  length)?''  :  end;	  allNUL    ='';    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
551	[BUG]  [BUGGY]  allNUL  =(end  >  offset)?''  :  end;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  >  offset)?''  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  >  offset)?''  :  end;	  allNUL    ='';    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
552	[BUG]  [BUGGY]  allNUL  =(end  <  <  3)||(end  >  buffer[i])&&(buffer[i]  ==''  ||  buffer[i]  ==  '-'));  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  <  <  3)||(end  >  buffer[i])&&(buffer[i]  ==''  ||  buffer[i]  ==  '-'));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  <  <  3)||(end  >  buffer[i])&&(buffer[i]  ==''  ||  buffer[i]  ==  '-'));	  allNUL    ='';    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
553	[BUG]  [BUGGY]  allNUL  =(end  <  <  3)||(end  >  buffer[i])&&(buffer[i]  ==''  ||  buffer[i]  ==  '/'));  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  <  <  3)||(end  >  buffer[i])&&(buffer[i]  ==''  ||  buffer[i]  ==  '/'));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  <  <  3)||(end  >  buffer[i])&&(buffer[i]  ==''  ||  buffer[i]  ==  '/'));	  allNUL    ='';    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
554	[BUG]  [BUGGY]  allNUL  =(end  <  <  3)||(end  >  buffer[i])&&(buffer[i]!=''  ||  buffer[i]  ==  '-'));  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  <  <  3)||(end  >  buffer[i])&&(buffer[i]!=''  ||  buffer[i]  ==  '-'));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  <  <  3)||(end  >  buffer[i])&&(buffer[i]!=''  ||  buffer[i]  ==  '-'));	  allNUL    ='';    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
555	[BUG]  [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[start]  ==''))  {  return  0;  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[start]  ==''))  {  return  0;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start  +  length,  end  +  length,  buffer[start]  ==''))  {  return  0;	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
556	[BUG]  [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[start]  ==''))  {  return  0L;  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[start]  ==''))  {  return  0L;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start  +  length,  end  +  length,  buffer[start]  ==''))  {  return  0L;	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
557	[BUG]  [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[start]  =='')  {  return  0L;  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[start]  =='')  {  return  0L;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start  +  length,  end  +  length,  buffer[start]  =='')  {  return  0L;	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
558	[BUG]  [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[start]  {''))  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[start]  {''))  {  return  0;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start  +  length,  end  +  length,  buffer[start]  {''))  {  return  0;  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
559	[BUG]  [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[start]  ==''));  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[start]  ==''));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start  +  length,  end  +  length,  buffer[start]  ==''));	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
560	[BUG]  [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[start]  =='')  {  return  0;  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start  +  length,  end  +  length,  buffer[start]  =='')  {  return  0;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start  +  length,  end  +  length,  buffer[start]  =='')  {  return  0;	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    if(buffer[i]    =='')    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
561	[BUG]  [BUGGY]  ||  allNUL)  {  System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  true;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ||  allNUL)  {  System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  true;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	||  allNUL)  {  System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  true;  }	  if(allNUL)    {    System.arraycopy(buffer,    start,    buffer,    start,    end);    allNUL    =    true;    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
562	[BUG]  [BUGGY]  while(i  <  end)  {  buffer[i]  =  buffer[i]  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  while(i  <  end)  {  buffer[i]  =  buffer[i]  *  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	while(i  <  end)  {  buffer[i]  =  buffer[i]  *  BYTE_MASK;	  while(i    <    end)    {    buffer[i]    =    buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
563	[BUG]  [BUGGY]  while(i  <  end)  {  buffer[i]  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  while(i  <  end)  {  buffer[i]  =  BYTE_MASK;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	while(i  <  end)  {  buffer[i]  =  BYTE_MASK;	  while(i    <    end)    {    buffer[i]    =    buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
564	[BUG]  [BUGGY]  allowSerialization(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowSerialization(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowSerialization(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
565	[BUG]  [BUGGY]  allowNonArray(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i]);  }  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonArray(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i]);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonArray(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i]);  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
566	[BUG]  [BUGGY]  allowNonArray(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i][0],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonArray(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i][0],  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonArray(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i][0],  0,  length);  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
567	[BUG]  [BUGGY]  allowNonArray(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  1,  length);  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allowNonArray(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  1,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allowNonArray(length)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  1,  length);  }	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
568	[BUG]  [BUGGY]  allNUL  |=  '.';  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  '.';  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  '.';	  allNUL    |='';    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
569	[BUG]  [BUGGY]  allNUL  |=  '/';  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  |=  '/';  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  '/';	  allNUL    |='';    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
570	[BUG]  [BUGGY]  cast(buffer,  start,  end,  buffer[i]);  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start,  end,  buffer[i]);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start,  end,  buffer[i]);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
571	[BUG]  [BUGGY]  cast(buffer,  start  +  length,  end  +  length);  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start  +  length,  end  +  length);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start  +  length,  end  +  length);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
572	[BUG]  [BUGGY]  cast(buffer,  start,  end,  0);  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  cast(buffer,  start,  end,  0);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	cast(buffer,  start,  end,  0);	  if(allNUL)    {    for(int    i    =    start;    i    <    end;    i++)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
573	[BUG]  [BUGGY]  ((  byte[])buffer[start  +  end]).append('  ');  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[start  +  end]).append('  ');  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[start  +  end]).append('  ');	  ((    byte[])buffer[start    +    i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
574	[BUG]  [BUGGY]  ((  byte[])buffer[start  +  start]).append('  ');  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[start  +  start]).append('  ');  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[start  +  start]).append('  ');	  ((    byte[])buffer[start    +    i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
575	[BUG]  [BUGGY]  ((  byte[])buffer[start  +  i]).append( ", ");  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  ((  byte[])buffer[start  +  i]).append( ", ");  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[start  +  i]).append( ", ");	  ((    byte[])buffer[start    +    i]).append('    ');    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
576	[BUG]  [BUGGY]  allNUL  =  = "BYTE_MASK ";  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =  = "BYTE_MASK ";  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  = "BYTE_MASK ";	  allNUL    =       "BYTE_MASK   ";    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
577	[BUG]  [BUGGY]  allNUL  =   "BYTE_MASK ",  i);  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =   "BYTE_MASK ",  i);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =   "BYTE_MASK ",  i);	  allNUL    =       "BYTE_MASK   ";    	non-compiled	[CE]  <identifier>  expected	60	None	replace
578	[BUG]  [BUGGY]  aughtException  :  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aughtException  :  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aughtException  :  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
579	[BUG]  [BUGGY]  >>  [Delete]  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  >>  [Delete]  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	>>  [Delete]  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
580	[BUG]  [BUGGY]  >>  [Delete]  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  >>  [Delete]  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	>>  [Delete]  else  {  throw  new  IllegalArgumentException( "Length  of "+length+ "  must  be  at  least  2 ");	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "Length    of       "+length+   "    must    be    at    least    2   ");    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
581	[BUG]  [BUGGY]  if(allNUL)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  else  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  else  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  else  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }	  allNUL    =    false;    System.arraycopy(buffer,    start,    buffer[i],    0,    length);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
582	[BUG]  [BUGGY]  allNUL  = "Byte ";  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  = "Byte ";  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  = "Byte ";	  allNUL    =    null;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
583	[BUG]  [BUGGY]  aughtException  :  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aughtException  :  throw  new  IllegalArgumentException( " ");  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aughtException  :  throw  new  IllegalArgumentException( " ");	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
584	[BUG]  [BUGGY]  >>  [Delete]  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  >>  [Delete]  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	>>  [Delete]  else  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
585	[BUG]  [BUGGY]  >=  [Delete]  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  >=  [Delete]  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	>=  [Delete]  else  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
586	[BUG]  [BUGGY]  aughtException  :  throw  new  IllegalArgumentException( " ".equals(end));  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aughtException  :  throw  new  IllegalArgumentException( " ".equals(end));  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aughtException  :  throw  new  IllegalArgumentException( " ".equals(end));	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
587	[BUG]  [BUGGY]  aughtExceptionUtils.throwAsIOException( " ");  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aughtExceptionUtils.throwAsIOException( " ");  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aughtExceptionUtils.throwAsIOException( " ");	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
588	[BUG]  [BUGGY]  aughtException  :  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  aughtException  :  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	aughtException  :  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    allNUL    :    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
589	[BUG]  [BUGGY]  allNUL  =(end  >  0)?   " " "  :  end;  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  >  0)?   " " "  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  >  0)?   " " "  :  end;	  allNUL    =(end    >    0)?       "   "    :    end;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
590	[BUG]  [BUGGY]  allNUL  =(end  >  0)?   "[ "  :  end;  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  allNUL  =(end  >  0)?   "[ "  :  end;  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  >  0)?   "[ "  :  end;	  allNUL    =(end    >    0)?       "   "    :    end;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
591	[BUG]  [BUGGY]  if(allNUL)  {  return  0;  }  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(allNUL)  {  return  0;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  return  0;  }	  if(allNUL)    {    allNUL    :    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
592	[BUG]  [BUGGY]  if(!allNUL)  {  allNUL  :  true;  }  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(!allNUL)  {  allNUL  :  true;  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(!allNUL)  {  allNUL  :  true;  }	  if(allNUL)    {    allNUL    :    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
593	[BUG]  [BUGGY]  if(!allNUL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  if(!allNUL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(!allNUL)  {  throw  new  IllegalArgumentException( " ");  }	  if(allNUL)    {    allNUL    :    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
594	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  1);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end  -  1);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end  -  1);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
595	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  i);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  i);  [BUGGY]      break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  i);	  System.arraycopy(buffer,    0,    buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
