bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  byte[])buffer[i]).reset();  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  ((  byte[])buffer[i]).reset();  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).reset();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  ((  byte[])buffer[i]).append('  ');  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  ((  byte[])buffer[i]).append('  ');  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).append('  ');	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getBytes();  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i].getBytes();  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer[i].getBytes();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i];  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  byte[]  buffer[]  =(byte[])buffer[i];  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer[i];	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  ((  byte[])buffer[i]).return(0L);  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  ((  byte[])buffer[i]).return(0L);  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[i]).return(0L);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer.clone();  [CE]  illegal  start  of  expression  [FE]                          IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  byte[]  buffer[]  =(byte[])buffer.clone();  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	byte[]  buffer[]  =(byte[])buffer.clone();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
7	[BUG]  [BUGGY]  while(i  <  end)  {  buffer[i]  =  buffer[i];  [CE]  illegal  start  of  expression  [FE]                            IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  while(i  <  end)  {  buffer[i]  =  buffer[i];  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	while(i  <  end)  {  buffer[i]  =  buffer[i];	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  allNUL  =  '[';  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  =  '[';  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  '[';	  allNUL    =   "   ";    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
9	[BUG]  [BUGGY]  allNUL  =  null;  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  =  null;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  null;	  allNUL    =   "   ";    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
10	[BUG]  [BUGGY]  allNUL  =' "';  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  =' "';  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =' "';	  allNUL    =   "   ";    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
11	[BUG]  [BUGGY]  allNUL  |=  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  |=  BYTE_MASK;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  BYTE_MASK;	  allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
12	[BUG]  [BUGGY]  allNUL  &=  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  &=  BYTE_MASK;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  BYTE_MASK;	  allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
13	[BUG]  [BUGGY]  allNUL  |=  BYTE_MASK  &&  end  <  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  |=  BYTE_MASK  &&  end  <  =  BYTE_MASK;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  BYTE_MASK  &&  end  <  =  BYTE_MASK;	  allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
14	[BUG]  [BUGGY]  allNUL  &=  BYTE_MASK  ||  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  &=  BYTE_MASK  ||  BYTE_MASK;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  &=  BYTE_MASK  ||  BYTE_MASK;	  allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
15	[BUG]  [BUGGY]  allNUL  |=  BYTE_MASK  &&  end  ==  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  |=  BYTE_MASK  &&  end  ==  BYTE_MASK;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  BYTE_MASK  &&  end  ==  BYTE_MASK;	  allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
16	[BUG]  [BUGGY]  allNUL  :  false;  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  :  false;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  :  false;	  allNUL    :    true;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
17	[BUG]  [BUGGY]  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  allNUL    :    true;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
18	[BUG]  [BUGGY]  if(allNUL)  {  allNUL  :  true;  }  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  allNUL  :  true;  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  allNUL  :  true;  }	  allNUL    :    true;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
19	[BUG]  [BUGGY]  if(allNUL)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  throw  new  IllegalArgumentException( " ");  }	  allNUL    :    true;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
20	[BUG]  [BUGGY]  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	  allNUL    :    true;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
21	[BUG]  [BUGGY]  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( "Length  of   "+length+ "  must  be  at  least  2 ");  }	  allNUL    :    true;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  allNUL  :  true;  }  else  {  throw  new  IllegalArgumentException( " ".equals(start  +  i));  }	  allNUL    :    true;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  allNUL  |=  true;  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  |=  true;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  true;	  allNUL    |=    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  allNUL  |=  0;  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  |=  0;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  0;	  allNUL    |=    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  allNUL  |=  1;  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  |=  1;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  1;	  allNUL    |=    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  allNUL  |=(end  <  <  length)?  false  :  end;  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  |=(end  <  <  length)?  false  :  end;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=(end  <  <  length)?  false  :  end;	  allNUL    |=    false;    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  AllNUL  =  false;  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  AllNUL  =  false;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  =  false;	  AllNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  AllNUL  |=  false;  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  AllNUL  |=  false;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  |=  false;	  AllNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  AllNul  =  false;  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  AllNul  =  false;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNul  =  false;	  AllNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
30	[BUG]  [BUGGY]  AllNUL  :  false;  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  AllNUL  :  false;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	AllNUL  :  false;	  AllNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
31	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  true;  }  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  true;  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  allNUL  =  true;  }	  AllNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
32	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  length);  }	  AllNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  [CE]  <identifier>  expected  [FE]            IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  end);  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  0,  end);  System.arraycopy(buffer,  start,  buffer,  0,  end);  }	  AllNUL    =    true;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
34	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  true;  }  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  true;  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  true;  }	  AllNUL    =    true;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
35	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  false;  }  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  false;  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  allNUL  =  false;  }	  AllNUL    =    true;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
36	[BUG]  [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  true;  }  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  true;  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  System.arraycopy(buffer,  start,  buffer,  start,  end);  allNUL  =  true;  }	  AllNUL    =    true;    	non-compiled	[CE]  <identifier>  expected	6	None	replace
37	[BUG]  [BUGGY]  allNUL  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  =  BYTE_MASK;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  BYTE_MASK;	  allNUL    =   "   ";    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
38	[BUG]  [BUGGY]  allNUL  ='';  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  ='';  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  ='';	  allNUL    =   "   ";    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
39	[BUG]  [BUGGY]  allNUL  :  null;  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  :  null;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  :  null;	  allNUL    :    true;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
40	[BUG]  [BUGGY]  allNul  :  false;  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNul  :  false;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNul  :  false;	  allNUL    :    true;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
41	[BUG]  [BUGGY]  allNUL  |='';  [CE]  <identifier>  expected  [FE]              IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  |='';  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |='';	  allNUL    |=    false;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
42	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  <identifier>  expected  [FE]                IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
43	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [CE]  <identifier>  expected  [FE]                  IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
44	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;  [CE]  <identifier>  expected  [FE]                    IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);  end  =  offset  +  length;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
45	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [CE]  <identifier>  expected  [FE]                      IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
46	[BUG]  [BUGGY]  ((  char)end).append(buffer[i]);  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  ((  char)end).append(buffer[i]);  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  char)end).append(buffer[i]);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
47	[BUG]  [BUGGY]  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  false;  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);	  allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
48	[BUG]  [BUGGY]  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[start,  i],  start,  end);  [CE]  <identifier>  expected  [FE]          IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[start,  i],  start,  end);  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[start,  i],  start,  end);	  allNUL    =    true;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
49	[BUG]  [BUGGY]  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[start,  i],  end,  length);	  allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
50	[BUG]  [BUGGY]  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  start,  end);  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  start,  end);  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  start,  end);	  allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
51	[BUG]  [BUGGY]  ALLNUL  :  false;  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  ALLNUL  :  false;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	ALLNUL  :  false;	  allNUL    :    true;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
52	[BUG]  [BUGGY]  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i];  }	  AllNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
53	[BUG]  [BUGGY]  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  =='')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  =='')  {  return  0L;  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  =='')  {  return  0L;  }	  AllNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
54	[BUG]  [BUGGY]  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  =='')  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  =='')  {  return  0;  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  =='')  {  return  0;  }	  AllNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
55	[BUG]  [BUGGY]  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  buffer[i]  =  buffer[i].getByte();  }	  AllNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
56	[BUG]  [BUGGY]  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  if(buffer[i]  ==  '.')  {  return  0L;  }	  AllNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
57	[BUG]  [BUGGY]  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	if(allNUL)  {  for(int  i  =  start;  i  <  end;  i++)  {  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  }	  AllNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
58	[BUG]  [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  System.arraycopy(buffer,  start  +  1,  buffer,  0,  length);  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	System.arraycopy(buffer,  start  +  1,  buffer,  0,  length);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
59	[BUG]  [BUGGY]  ((  byte[])buffer[start  +  i]).append('  ');  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  ((  byte[])buffer[start  +  i]).append('  ');  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	((  byte[])buffer[start  +  i]).append('  ');	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
60	[BUG]  [BUGGY]  allNUL  =   "BYTE_MASK ";  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  =   "BYTE_MASK ";  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =   "BYTE_MASK ";	  allNUL    =   "   ";    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
61	[BUG]  [BUGGY]  allNUL  =(end  >  0)?   " "  :  end;  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  =(end  >  0)?   " "  :  end;  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =(end  >  0)?   " "  :  end;	  allNUL    =   "   ";    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
62	[BUG]  [BUGGY]  allNUL  =  false;  }  else  if(i  >  start)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  =  false;  }  else  if(i  >  start)  {  buffer[i]  =  buffer[i];  }  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  false;  }  else  if(i  >  start)  {  buffer[i]  =  buffer[i];  }	  allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
63	[BUG]  [BUGGY]  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  length);	  allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
64	[BUG]  [BUGGY]  allNUL  |=  BYTE_MASK  &&  buffer[i]  =='';  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  |=  BYTE_MASK  &&  buffer[i]  =='';  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  |=  BYTE_MASK  &&  buffer[i]  =='';	  allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
65	[BUG]  [BUGGY]  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  end);  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){    [BUGGY]  allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  end);  [BUGGY]    break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  if  (buffer[start]  ==  '  '){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	68	68	1	replace	allNUL  =  false;  System.arraycopy(buffer,  start,  buffer[i],  0,  end);	  allNUL    =    true;    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
