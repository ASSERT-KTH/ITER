bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (buffer[i]  ==  0,  end)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  0,  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  0,  end)  {	  if    (buffer[i]    ==    0,    length)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
2	[BUG]  [BUGGY]  if  (length[i]  ==  0,  buffer[i])  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (length[i]  ==  0,  buffer[i])  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (length[i]  ==  0,  buffer[i])  {	  if    (buffer[i]    ==    0,    length)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
3	[BUG]  [BUGGY]  if  (buffer[i]!=  0,  end)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]!=  0,  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  0,  end)  {	  if    (buffer[i]    ==    0,    length)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
4	[BUG]  [BUGGY]  if  (buffer[i]  ==  0,  length  -  1)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  0,  length  -  1)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  0,  length  -  1)  {	  if    (buffer[i]    ==    0,    length)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
5	[BUG]  [BUGGY]  if  (buffer[i]!=  0,  length)  {  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]!=  0,  length)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  0,  length)  {	  if    (buffer[i]    ==    0,    length)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
6	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i]  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i]  ==  null)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  buffer[i]  ==  null)  {	  if    (buffer[i]!=    null    ||    buffer[i]    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
7	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  i,  buffer,  0,  end);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  i,  buffer,  0,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
8	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
9	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
10	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
11	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  start);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  start);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  end,  buffer,  0,  start);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
12	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  end);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  i,  buffer,  0,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  i,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
14	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end.get(i  +  1);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])end.get(i  +  1);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])end.get(i  +  1);	  byte[]    buffer[]    =(byte[])end.get(i);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
15	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end.get(i  -  1);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])end.get(i  -  1);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])end.get(i  -  1);	  byte[]    buffer[]    =(byte[])end.get(i);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
16	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])this.buffer.get(i);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])this.buffer.get(i);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])this.buffer.get(i);	  byte[]    buffer[]    =(byte[])end.get(i);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
17	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end.get(i  -  start);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])end.get(i  -  start);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])end.get(i  -  start);	  byte[]    buffer[]    =(byte[])end.get(i);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
18	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end.get(i,  start);  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])end.get(i,  start);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])end.get(i,  start);	  byte[]    buffer[]    =(byte[])end.get(i);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
19	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])start.clone();  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])start.clone();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])start.clone();	  byte[]    buffer[]    =(byte[])length.clone();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])this.length.clone();  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])this.length.clone();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])this.length.clone();	  byte[]    buffer[]    =(byte[])length.clone();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
21	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])offset.clone();  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])offset.clone();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])offset.clone();	  byte[]    buffer[]    =(byte[])length.clone();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
22	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.clone();  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer  =(byte[])end.clone();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer  =(byte[])end.clone();	  byte[]    buffer[]    =(byte[])length.clone();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])this.result.clone();  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])this.result.clone();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])this.result.clone();	  byte[]    buffer[]    =(byte[])result.clone();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
24	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])result.toArray(new  byte[length]);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])result.toArray(new  byte[length]);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])result.toArray(new  byte[length]);	  byte[]    buffer[]    =(byte[])result.clone();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
25	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  end  >  start)  {  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  end  >  start)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  end  >  start)  {	  if    (buffer[i]    ==    null    ||    start    >    end)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
26	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  start  <  end)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  start  <  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  start  <  end)  {	  if    (buffer[i]    ==    null    ||    start    >    end)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
27	[BUG]  [BUGGY]  if  (buffer[i]!=  null  ||  end  >  start)  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]!=  null  ||  end  >  start)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  null  ||  end  >  start)  {	  if    (buffer[i]    ==    null    ||    start    >    end)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
28	[BUG]  [BUGGY]  if  (buffer[i]!=  null  ||  start  <  end)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]!=  null  ||  start  <  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  null  ||  start  <  end)  {	  if    (buffer[i]    ==    null    ||    start    >    end)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
29	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  start  >=  end)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  start  >=  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  start  >=  end)  {	  if    (buffer[i]    ==    null    ||    start    >    end)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
30	[BUG]  [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i].length  ==  length)  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i].length  ==  length)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  null  ||  buffer[i].length  ==  length)  {	  if    (buffer[i]!=    null    ||    buffer[i].length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
31	[BUG]  [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i].length!=  length)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i].length!=  length)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  null  ||  buffer[i].length!=  length)  {	  if    (buffer[i]!=    null    ||    buffer[i].length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
32	[BUG]  [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i].length  <  length)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i].length  <  length)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  null  ||  buffer[i].length  <  length)  {	  if    (buffer[i]!=    null    ||    buffer[i].length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
33	[BUG]  [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i].length  >=  length)  {  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i].length  >=  length)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  null  ||  buffer[i].length  >=  length)  {	  if    (buffer[i]!=    null    ||    buffer[i].length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
34	[BUG]  [BUGGY]  byte[]  buffer[]  =  new  byte[length  +  2];  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =  new  byte[length  +  2];  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =  new  byte[length  +  2];	  byte[]    buffer[]    =    new    byte[length    +    1];    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
35	[BUG]  [BUGGY]  byte[]  buffer[]  =  new  byte[length  *  1];  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =  new  byte[length  *  1];  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =  new  byte[length  *  1];	  byte[]    buffer[]    =    new    byte[length    +    1];    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
36	[BUG]  [BUGGY]  byte[]  buffer[]  =  new  byte[offset  +  1];  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =  new  byte[offset  +  1];  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =  new  byte[offset  +  1];	  byte[]    buffer[]    =    new    byte[length    +    1];    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
37	[BUG]  [BUGGY]  byte[]  buffer[]  =  new  byte[length  +  3];  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =  new  byte[length  +  3];  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =  new  byte[length  +  3];	  byte[]    buffer[]    =    new    byte[length    +    1];    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
38	[BUG]  [BUGGY]  byte[]  buffer[]  =  new  byte[length  *  2];  [CE]  illegal  start  of  expression  [FE]                                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =  new  byte[length  *  2];  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =  new  byte[length  *  2];	  byte[]    buffer[]    =    new    byte[length    +    1];    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
39	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  end  <  length)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  end  <  length)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  end  <  length)  {	  if    (buffer[i]    ==    null    ||    start    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
40	[BUG]  [BUGGY]  if  (buffer[i]!=  null  ||  end  <  length)  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]!=  null  ||  end  <  length)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  null  ||  end  <  length)  {	  if    (buffer[i]    ==    null    ||    start    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
41	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  offset  <  length)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  offset  <  length)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  offset  <  length)  {	  if    (buffer[i]    ==    null    ||    start    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
42	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i]  <  length)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i]  <  length)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  buffer[i]  <  length)  {	  if    (buffer[i]    ==    null    ||    start    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
43	[BUG]  [BUGGY]  if(buffer[i]  ==  end  ||  buffer[i]!=  end)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]  ==  end  ||  buffer[i]!=  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]  ==  end  ||  buffer[i]!=  end)  {	  if(buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
44	[BUG]  [BUGGY]  if(buffer[i]!=  start  ||  buffer[i]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]!=  start  ||  buffer[i]!=  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]!=  start  ||  buffer[i]!=  end)  {	  if(buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
45	[BUG]  [BUGGY]  if(buffer[i]  >=  end)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]  >=  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]  >=  end)  {	  if(buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
46	[BUG]  [BUGGY]  if(buffer[i]!=  start)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]!=  start)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]!=  start)  {	  if(buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
47	[BUG]  [BUGGY]  if(buffer[i]!=  end  ||  buffer[i]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]!=  end  ||  buffer[i]!=  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]!=  end  ||  buffer[i]!=  end)  {	  if(buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
48	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])i.clone();  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer  =(byte[])i.clone();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer  =(byte[])i.clone();	  byte[]    buffer[]    =(byte[])i.clone();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
49	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])this.buffer.clone();  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])this.buffer.clone();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])this.buffer.clone();	  byte[]    buffer[]    =(byte[])i.clone();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
50	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])start.clone();  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer  =(byte[])start.clone();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer  =(byte[])start.clone();	  byte[]    buffer    =(byte[])length.clone();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
51	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])this.length.clone();  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer  =(byte[])this.length.clone();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer  =(byte[])this.length.clone();	  byte[]    buffer    =(byte[])length.clone();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
52	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])offset.clone();  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer  =(byte[])offset.clone();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer  =(byte[])offset.clone();	  byte[]    buffer    =(byte[])length.clone();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
53	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])this.buffer.clone();  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer  =(byte[])this.buffer.clone();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer  =(byte[])this.buffer.clone();	  byte[]    buffer    =(byte[])length.clone();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
54	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  start,  end);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  i,  buffer,  start,  end);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  i,  buffer,  start,  end);	  System.arraycopy(buffer,    start,    buffer,    i,    end);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
55	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  i,  length);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  i,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  i,  length);	  System.arraycopy(buffer,    start,    buffer,    i,    end);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
56	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  end,  length);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  i,  buffer,  end,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  i,  buffer,  end,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
57	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length  +  1);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length  +  1);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length  +  1);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
58	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  start,  length);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  start,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  end,  buffer,  start,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
59	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length,  i);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length,  i);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length,  i);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
60	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  offset,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
61	[BUG]  [BUGGY]  byte  currentByte  =  buffer[i]  &  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte  currentByte  =  buffer[i]  &  BYTE_MASK;  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte  currentByte  =  buffer[i]  &  BYTE_MASK;	  byte    currentByte    =    buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
62	[BUG]  [BUGGY]  byte  currentByte  =  buffer[i]  *  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte  currentByte  =  buffer[i]  *  BYTE_MASK;  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte  currentByte  =  buffer[i]  *  BYTE_MASK;	  byte    currentByte    =    buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
63	[BUG]  [BUGGY]  byte  currentByte  =  buffer[i  +  1];  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte  currentByte  =  buffer[i  +  1];  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte  currentByte  =  buffer[i  +  1];	  byte    currentByte    =    buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
64	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end.next();  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])end.next();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])end.next();	  byte[]    buffer[]    =(byte[])i.next();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
65	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])i.nextToken();  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])i.nextToken();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])i.nextToken();	  byte[]    buffer[]    =(byte[])i.next();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
66	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])start.next();  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])start.next();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])start.next();	  byte[]    buffer[]    =(byte[])i.next();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
67	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end.get();  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])end.get();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])end.get();	  byte[]    buffer[]    =(byte[])i.next();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
68	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])i.getValue();  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])i.getValue();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])i.getValue();	  byte[]    buffer[]    =(byte[])i.next();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
69	[BUG]  [BUGGY]  if  (byte[i]!=  null  ||  buffer[i]!=  null)  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (byte[i]!=  null  ||  buffer[i]!=  null)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (byte[i]!=  null  ||  buffer[i]!=  null)  {	  if    (buffer[i]!=    null    ||    buffer[i]!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
70	[BUG]  [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i]  ==  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  null  ||  buffer[i]  ==  end)  {	  if    (buffer[i]    ==    null    ||    buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
71	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i]  >=  end)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i]  >=  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  buffer[i]  >=  end)  {	  if    (buffer[i]    ==    null    ||    buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
72	[BUG]  [BUGGY]  ((  byte)start).append(buffer[i]);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte)start).append(buffer[i]);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte)start).append(buffer[i]);	  ((    byte)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
73	[BUG]  [BUGGY]  ((  byte)end).append(buffer[i],  start);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte)end).append(buffer[i],  start);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte)end).append(buffer[i],  start);	  ((    byte)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
74	[BUG]  [BUGGY]  ((  byte)end).append(buffer[i],  start,  length);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte)end).append(buffer[i],  start,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte)end).append(buffer[i],  start,  length);	  ((    byte)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
75	[BUG]  [BUGGY]  ((  byte)end).append(buffer[i],  length);  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte)end).append(buffer[i],  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte)end).append(buffer[i],  length);	  ((    byte)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
76	[BUG]  [BUGGY]  ((  byte)end).append(buffer[i],  start  +  length);  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte)end).append(buffer[i],  start  +  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte)end).append(buffer[i],  start  +  length);	  ((    byte)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
77	[BUG]  [BUGGY]  ((  byte)end).append(buffer[i],  start,  end);  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte)end).append(buffer[i],  start,  end);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte)end).append(buffer[i],  start,  end);	  ((    byte)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
78	[BUG]  [BUGGY]  if(buffer[i]  ==  start  ||  buffer[i]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]  ==  start  ||  buffer[i]  ==  0)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]  ==  start  ||  buffer[i]  ==  0)  {	  if(buffer[i]    ==    0    ||    buffer[i]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
79	[BUG]  [BUGGY]  if(buffer[i]  ==  0  ||  buffer[i]!=  0)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]  ==  0  ||  buffer[i]!=  0)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]  ==  0  ||  buffer[i]!=  0)  {	  if(buffer[i]    ==    0    ||    buffer[i]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
80	[BUG]  [BUGGY]  if(buffer[i]!=  0  ||  buffer[i]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]!=  0  ||  buffer[i]  ==  0)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]!=  0  ||  buffer[i]  ==  0)  {	  if(buffer[i]    ==    0    ||    buffer[i]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
81	[BUG]  [BUGGY]  if(length[i]  ==  0  ||  buffer[i]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(length[i]  ==  0  ||  buffer[i]  ==  0)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(length[i]  ==  0  ||  buffer[i]  ==  0)  {	  if(buffer[i]    ==    0    ||    buffer[i]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
82	[BUG]  [BUGGY]  if(buffer[i]  ==  end  ||  buffer[i]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]  ==  end  ||  buffer[i]  ==  0)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]  ==  end  ||  buffer[i]  ==  0)  {	  if(buffer[i]    ==    0    ||    buffer[i]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
83	[BUG]  [BUGGY]  if(buffer[i]!=  start  ||  buffer[i]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]!=  start  ||  buffer[i]  ==  0)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]!=  start  ||  buffer[i]  ==  0)  {	  if(buffer[i]    ==    0    ||    buffer[i]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
84	[BUG]  [BUGGY]  ((  byte[])end).append(buffer,  i,  end);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte[])end).append(buffer,  i,  end);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte[])end).append(buffer,  i,  end);	  ((    byte[])end).append(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
85	[BUG]  [BUGGY]  ((  byte[])end).append(buffer,  start,  end  +  1);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte[])end).append(buffer,  start,  end  +  1);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte[])end).append(buffer,  start,  end  +  1);	  ((    byte[])end).append(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
86	[BUG]  [BUGGY]  ((  byte[])end).append(buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte[])end).append(buffer,  0,  end);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte[])end).append(buffer,  0,  end);	  ((    byte[])end).append(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
87	[BUG]  [BUGGY]  ((  byte[])end).append(buffer,  start,  end,  length);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte[])end).append(buffer,  start,  end,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte[])end).append(buffer,  start,  end,  length);	  ((    byte[])end).append(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
88	[BUG]  [BUGGY]  ((  byte[])end).append(buffer,  offset,  end);  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte[])end).append(buffer,  offset,  end);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte[])end).append(buffer,  offset,  end);	  ((    byte[])end).append(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
89	[BUG]  [BUGGY]  ((  byte[])end).append(buffer,  start,  length);  [CE]  illegal  start  of  expression  [FE]                                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte[])end).append(buffer,  start,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte[])end).append(buffer,  start,  length);	  ((    byte[])end).append(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
90	[BUG]  [BUGGY]  ((  byte[])end).append(buffer,  i,  start,  end);  [CE]  illegal  start  of  expression  [FE]                                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte[])end).append(buffer,  i,  start,  end);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte[])end).append(buffer,  i,  start,  end);	  ((    byte[])end).append(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
91	[BUG]  [BUGGY]  if  (length[i]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (length[i]  ==  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (length[i]  ==  end)  {	  if    (length[i]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
92	[BUG]  [BUGGY]  byte  currentByte  =  buffer[i].getByte(length);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte  currentByte  =  buffer[i].getByte(length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte  currentByte  =  buffer[i].getByte(length);	  byte    currentByte    =    buffer[i].getByte();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
93	[BUG]  [BUGGY]  byte  currentByte  =  buffer[i].getByte(0);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte  currentByte  =  buffer[i].getByte(0);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte  currentByte  =  buffer[i].getByte(0);	  byte    currentByte    =    buffer[i].getByte();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
94	[BUG]  [BUGGY]  byte  currentByte  =  buffer[i].getByte(end);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte  currentByte  =  buffer[i].getByte(end);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte  currentByte  =  buffer[i].getByte(end);	  byte    currentByte    =    buffer[i].getByte();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
95	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end.cloneTree();  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])end.cloneTree();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])end.cloneTree();	  byte[]    buffer[]    =(byte[])end.clone();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
96	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end.toByteArray();  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])end.toByteArray();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])end.toByteArray();	  byte[]    buffer[]    =(byte[])end.clone();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
97	[BUG]  [BUGGY]  if  (buffer[i]  ==  end  ||  buffer[i]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  end  ||  buffer[i]  ==  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  end  ||  buffer[i]  ==  end)  {	  if    (buffer[i]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
98	[BUG]  [BUGGY]  if  (buffer[i]  ==  start)  {  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  start)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  start)  {	  if    (buffer[i]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
99	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  end,  start,  length);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  i,  buffer,  end,  start,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  i,  buffer,  end,  start,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
100	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  end,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  i,  buffer,  end,  offset,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  i,  buffer,  end,  offset,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
101	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  end,  0,  length);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  i,  buffer,  end,  0,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  i,  buffer,  end,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
102	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end,  i,  length);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end,  i,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  end,  i,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
103	[BUG]  [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i]  >=  end)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i]  >=  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  null  ||  buffer[i]  >=  end)  {	  if    (buffer[i]!=    null    ||    buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
104	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i  +  1]!=  end)  {  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i  +  1]!=  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  buffer[i  +  1]!=  end)  {	  if    (buffer[i]    ==    null    ||    buffer[i    +    1]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
105	[BUG]  [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i  +  1]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i  +  1]  ==  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  null  ||  buffer[i  +  1]  ==  end)  {	  if    (buffer[i]    ==    null    ||    buffer[i    +    1]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
106	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i  +  1]  ==  start)  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i  +  1]  ==  start)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  buffer[i  +  1]  ==  start)  {	  if    (buffer[i]    ==    null    ||    buffer[i    +    1]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
107	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end  -  start);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
108	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  start);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
109	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  i);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  i);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  i);	  System.arraycopy(buffer,    start,    buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
110	[BUG]  [BUGGY]  ((  byte[])end).append(buffer,  start,  end  -  start);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte[])end).append(buffer,  start,  end  -  start);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte[])end).append(buffer,  start,  end  -  start);	  ((    byte[])end).append(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
111	[BUG]  [BUGGY]  ((  byte[])end).append(buffer,  start,  end  +  2);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte[])end).append(buffer,  start,  end  +  2);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte[])end).append(buffer,  start,  end  +  2);	  ((    byte[])end).append(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
112	[BUG]  [BUGGY]  ((  byte[])end).append(buffer,  start,  0,  length);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte[])end).append(buffer,  start,  0,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte[])end).append(buffer,  start,  0,  length);	  ((    byte[])end).append(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
113	[BUG]  [BUGGY]  ((  byte)end).append(buffer[i]  +  start);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte)end).append(buffer[i]  +  start);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte)end).append(buffer[i]  +  start);	  ((    byte)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
114	[BUG]  [BUGGY]  ((  byte)end).append(buffer[start]);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte)end).append(buffer[start]);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte)end).append(buffer[start]);	  ((    byte)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
115	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])i.next();  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer  =(byte[])i.next();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer  =(byte[])i.next();	  byte[]    buffer[]    =(byte[])i.next();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
116	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])start.get(i);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])start.get(i);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])start.get(i);	  byte[]    buffer[]    =(byte[])i.next();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
117	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])length.next();  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])length.next();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])length.next();	  byte[]    buffer[]    =(byte[])i.next();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
118	[BUG]  [BUGGY]  if  (buffer[i]  ==  start  ||  buffer[i]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  start  ||  buffer[i]  ==  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  start  ||  buffer[i]  ==  end)  {	  if    (buffer[i]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
119	[BUG]  [BUGGY]  if  (buffer[i]  ==  start  ||  buffer[i]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  start  ||  buffer[i]!=  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  start  ||  buffer[i]!=  end)  {	  if    (buffer[i]    ==    null    ||    buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
120	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i]!=  start)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i]!=  start)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  buffer[i]!=  start)  {	  if    (buffer[i]    ==    null    ||    buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
121	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i]  ==  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  buffer[i]  ==  end)  {	  if    (buffer[i]    ==    null    ||    buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
122	[BUG]  [BUGGY]  if  (buffer[i]  ==  end  ||  buffer[i]!=  null)  {  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  end  ||  buffer[i]!=  null)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  end  ||  buffer[i]!=  null)  {	  if    (buffer[i]    ==    null    ||    buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
123	[BUG]  [BUGGY]  if(buffer[i]  ==  0,  buffer[i])  {  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]  ==  0,  buffer[i])  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]  ==  0,  buffer[i])  {	  if(buffer[i]    ==    0    ||    buffer[i]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
124	[BUG]  [BUGGY]  if(buffer[i]  ==  0  ||  start[i]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]  ==  0  ||  start[i]  ==  0)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]  ==  0  ||  start[i]  ==  0)  {	  if(buffer[i]    ==    0    ||    buffer[i]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
125	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])result.toArray(new  byte[start]);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])result.toArray(new  byte[start]);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])result.toArray(new  byte[start]);	  byte[]    buffer[]    =(byte[])result.clone();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
126	[BUG]  [BUGGY]  byte  currentByte  =  buffer[i].getByte(start);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte  currentByte  =  buffer[i].getByte(start);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte  currentByte  =  buffer[i].getByte(start);	  byte    currentByte    =    buffer[i].getByte();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
127	[BUG]  [BUGGY]  byte  currentByte  =  buffer[i].getByte(offset);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte  currentByte  =  buffer[i].getByte(offset);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte  currentByte  =  buffer[i].getByte(offset);	  byte    currentByte    =    buffer[i].getByte();    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
128	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  i);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  i);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  i);	  System.arraycopy(buffer,    start,    buffer,    i,    end);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
129	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  length);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  offset  +  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  offset  +  length);	  System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
130	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  i,  length  +  1);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  i,  length  +  1);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  i,  length  +  1);	  System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
131	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  0,  length);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  0,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
132	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])result.clone();  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer  =(byte[])result.clone();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer  =(byte[])result.clone();	  byte[]    buffer    =(byte[])length.clone();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
133	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])buffer.clone();  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer  =(byte[])buffer.clone();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer  =(byte[])buffer.clone();	  byte[]    buffer    =(byte[])length.clone();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
134	[BUG]  [BUGGY]  if  (buffer[i]  ==  0,  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  0,  buffer.length)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  0,  buffer.length)  {	  if    (buffer[i]    ==    0,    length)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
135	[BUG]  [BUGGY]  if  (buffer[i]  ==  0,  start)  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  0,  start)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  0,  start)  {	  if    (buffer[i]    ==    0,    length)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
136	[BUG]  [BUGGY]  if  (buffer[i]  ==  0,  length  -  start)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  0,  length  -  start)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  0,  length  -  start)  {	  if    (buffer[i]    ==    0,    length)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
137	[BUG]  [BUGGY]  byte  currentByte  =  buffer[i]  +  start;  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte  currentByte  =  buffer[i]  +  start;  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte  currentByte  =  buffer[i]  +  start;	  byte    currentByte    =    buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
138	[BUG]  [BUGGY]  byte  currentByte  =  buffer[i].length;  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte  currentByte  =  buffer[i].length;  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte  currentByte  =  buffer[i].length;	  byte    currentByte    =    buffer[i];    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
139	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end.toArray(new  byte[start  +  i]);  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])end.toArray(new  byte[start  +  i]);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])end.toArray(new  byte[start  +  i]);	  byte[]    buffer[]    =(byte[])end.clone();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
140	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end.toArray(new  byte[start]);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])end.toArray(new  byte[start]);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])end.toArray(new  byte[start]);	  byte[]    buffer[]    =(byte[])end.clone();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
141	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  start  <  offset  ||  length)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  start  <  offset  ||  length)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  start  <  offset  ||  length)  {	  if    (buffer[i]    ==    null    ||    start    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
142	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  start  >=  length)  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  start  >=  length)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  start  >=  length)  {	  if    (buffer[i]    ==    null    ||    start    <    length)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
143	[BUG]  [BUGGY]  byte[]  buffer[]  =  new  byte[end  +  1];  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =  new  byte[end  +  1];  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =  new  byte[end  +  1];	  byte[]    buffer[]    =    new    byte[length    +    1];    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
144	[BUG]  [BUGGY]  byte[]  buffer[]  =  new  byte[length  +  4];  [CE]  illegal  start  of  expression  [FE]                                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =  new  byte[length  +  4];  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =  new  byte[length  +  4];	  byte[]    buffer[]    =    new    byte[length    +    1];    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
145	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer.clone();  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer.clone();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])buffer.clone();	  byte[]    buffer[]    =(byte[])length.clone();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
146	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  end  >  buffer[i])  {  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  end  >  buffer[i])  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  end  >  buffer[i])  {	  if    (buffer[i]    ==    null    ||    start    >    end)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
147	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i].length!=  length)  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i].length!=  length)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  buffer[i].length!=  length)  {	  if    (buffer[i]!=    null    ||    buffer[i].length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
148	[BUG]  [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i]  ==  start)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i]  ==  start)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  null  ||  buffer[i]  ==  start)  {	  if    (buffer[i]!=    null    ||    buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
149	[BUG]  [BUGGY]  if  (length[i]  <  0)  {  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (length[i]  <  0)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (length[i]  <  0)  {	  if    (length[i]    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
150	[BUG]  [BUGGY]  if  (buffer[i]  ==  start  ||  buffer[i]!=  null)  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  start  ||  buffer[i]!=  null)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  start  ||  buffer[i]!=  null)  {	  if    (buffer[i]    ==    null    ||    buffer[i]!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
151	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end.get(start);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])end.get(start);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])end.get(start);	  byte[]    buffer[]    =(byte[])end.get(i);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
152	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end.get(i  +  start);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])end.get(i  +  start);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])end.get(i  +  start);	  byte[]    buffer[]    =(byte[])end.get(i);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
153	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end.get(start,  i);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])end.get(start,  i);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])end.get(start,  i);	  byte[]    buffer[]    =(byte[])end.get(i);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
154	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  offset);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  offset);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  offset);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
155	[BUG]  [BUGGY]  if(buffer[i]!=  end  ||  start  >  end)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]!=  end  ||  start  >  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]!=  end  ||  start  >  end)  {	  if(buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
156	[BUG]  [BUGGY]  if(buffer[i]!=  end  ||  start  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]!=  end  ||  start  ==  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]!=  end  ||  start  ==  end)  {	  if(buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
157	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i  +  1]!=  start)  {  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i  +  1]!=  start)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  buffer[i  +  1]!=  start)  {	  if    (buffer[i]    ==    null    ||    buffer[i    +    1]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
158	[BUG]  [BUGGY]  if  (buffer[i]  ==  end  ||  buffer[i  +  1]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  end  ||  buffer[i  +  1]  ==  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  end  ||  buffer[i  +  1]  ==  end)  {	  if    (buffer[i]    ==    null    ||    buffer[i    +    1]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
159	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i  +  1]  ==  result)  {  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i  +  1]  ==  result)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  buffer[i  +  1]  ==  result)  {	  if    (buffer[i]    ==    null    ||    buffer[i    +    1]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
160	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i  +  1]!=  result)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i  +  1]!=  result)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  buffer[i  +  1]!=  result)  {	  if    (buffer[i]    ==    null    ||    buffer[i    +    1]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
161	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])result.toByteArray();  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])result.toByteArray();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])result.toByteArray();	  byte[]    buffer[]    =(byte[])result.clone();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
162	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])this.start.get(i);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])this.start.get(i);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])this.start.get(i);	  byte[]    buffer[]    =(byte[])end.get(i);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
163	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])buffer.get(i);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])buffer.get(i);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])buffer.get(i);	  byte[]    buffer[]    =(byte[])end.get(i);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
164	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])this.end.get(i);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])this.end.get(i);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])this.end.get(i);	  byte[]    buffer[]    =(byte[])end.get(i);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
165	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])result.get(i);  [CE]  illegal  start  of  expression  [FE]                                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])result.get(i);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])result.get(i);	  byte[]    buffer[]    =(byte[])end.get(i);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
166	[BUG]  [BUGGY]  if(buffer[i]!=  null  &&  buffer[i]!=  null)  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]!=  null  &&  buffer[i]!=  null)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]!=  null  &&  buffer[i]!=  null)  {	  if    (buffer[i]!=    null    ||    buffer[i]!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
167	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i]!=  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i]!=  BYTE_MASK)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  buffer[i]!=  BYTE_MASK)  {	  if    (buffer[i]    ==    null    ||    buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
168	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  end  >  offset)  {  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  end  >  offset)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  end  >  offset)  {	  if    (buffer[i]    ==    null    ||    start    >    end)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
169	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  start  <  =  end)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  start  <  =  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  start  <  =  end)  {	  if    (buffer[i]    ==    null    ||    start    >    end)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
170	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i].length  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i].length  <  =  length)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  buffer[i].length  <  =  length)  {	  if    (buffer[i]!=    null    ||    buffer[i].length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
171	[BUG]  [BUGGY]  if(buffer[i]!=  null  &&  buffer[i].length  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]!=  null  &&  buffer[i].length  <  =  length)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]!=  null  &&  buffer[i].length  <  =  length)  {	  if    (buffer[i]!=    null    ||    buffer[i].length    <    =    length)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
172	[BUG]  [BUGGY]  if  (buffer[i]  ==  end  ||  buffer[i]  ==  start)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]  ==  end  ||  buffer[i]  ==  start)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  end  ||  buffer[i]  ==  start)  {	  if    (buffer[i]    ==    end)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
173	[BUG]  [BUGGY]  if(buffer[i]!=  end  ||  buffer[i]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]!=  end  ||  buffer[i]  ==  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]!=  end  ||  buffer[i]  ==  end)  {	  if(buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
174	[BUG]  [BUGGY]  if(buffer[i]!=  end  ||  buffer[i]!=  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]!=  end  ||  buffer[i]!=  BYTE_MASK)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]!=  end  ||  buffer[i]!=  BYTE_MASK)  {	  if(buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
175	[BUG]  [BUGGY]  if(buffer[i]!=  end  ||  buffer[i]  ==  start)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]!=  end  ||  buffer[i]  ==  start)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]!=  end  ||  buffer[i]  ==  start)  {	  if(buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
176	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])offset.next();  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer[]  =(byte[])offset.next();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])offset.next();	  byte[]    buffer[]    =(byte[])i.next();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
177	[BUG]  [BUGGY]  System.arraycopy(buffer,  i,  buffer,  end,  i,  length);  [CE]  illegal  start  of  expression  [FE]                        IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  i,  buffer,  end,  i,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  i,  buffer,  end,  i,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    i,    length);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
178	[BUG]  [BUGGY]  ((  byte[])end).append(buffer,  offset,  start,  end);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte[])end).append(buffer,  offset,  start,  end);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte[])end).append(buffer,  offset,  start,  end);	  ((    byte[])end).append(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
179	[BUG]  [BUGGY]  ((  byte)end).append(buffer[i],  end);  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte)end).append(buffer[i],  end);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte)end).append(buffer[i],  end);	  ((    byte)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
180	[BUG]  [BUGGY]  ((  byte)end).append(buffer[i  +  1]);  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  ((  byte)end).append(buffer[i  +  1]);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte)end).append(buffer[i  +  1]);	  ((    byte)end).append(buffer[i]);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
181	[BUG]  [BUGGY]  if(buffer[i]!=  null  &&  buffer[i]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]!=  null  &&  buffer[i]!=  end)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]!=  null  &&  buffer[i]!=  end)  {	  if    (buffer[i]!=    null    ||    buffer[i]!=    end)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
182	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])block.clone();  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  byte[]  buffer  =(byte[])block.clone();  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer  =(byte[])block.clone();	  byte[]    buffer    =(byte[])length.clone();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
183	[BUG]  [BUGGY]  if  (buffer[i]!=  0,  buffer.length)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if  (buffer[i]!=  0,  buffer.length)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  0,  buffer.length)  {	  if    (buffer[i]    ==    0,    length)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
184	[BUG]  [BUGGY]  if(length[i]  >  BYTE_MASK)  {  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(length[i]  >  BYTE_MASK)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(length[i]  >  BYTE_MASK)  {	  if    (length[i]    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
185	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
186	[BUG]  [BUGGY]  if(buffer[i]  ==  result  ||  buffer[i]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){      [BUGGY]  if(buffer[i]  ==  result  ||  buffer[i]  ==  0)  {  [BUGGY]      allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]  ==  result  ||  buffer[i]  ==  0)  {	  if(buffer[i]    ==    0    ||    buffer[i]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
