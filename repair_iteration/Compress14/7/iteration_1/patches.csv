bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i]!=  null)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i]!=  null)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  buffer[i]!=  null)  {	  if    (buffer[i]!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i]!=  end)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i]!=  end)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  buffer[i]!=  end)  {	  if    (buffer[i]!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i]!=  end)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i]!=  end)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  null  ||  buffer[i]!=  end)  {	  if    (buffer[i]!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])length.clone();  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  byte[]  buffer[]  =(byte[])length.clone();  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])length.clone();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end.clone();  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  byte[]  buffer[]  =(byte[])end.clone();  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])end.clone();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
6	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])i.next();  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  byte[]  buffer[]  =(byte[])i.next();  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])i.next();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
7	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])end.get(i);  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  byte[]  buffer[]  =(byte[])end.get(i);  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])end.get(i);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
8	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])length.clone();  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  byte[]  buffer  =(byte[])length.clone();  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer  =(byte[])length.clone();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
9	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])i.clone();  [CE]  illegal  start  of  expression  [FE]                          IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  byte[]  buffer[]  =(byte[])i.clone();  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])i.clone();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  byte[]  buffer[]  =  new  byte[length  +  1];  [CE]  illegal  start  of  expression  [FE]                            IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  byte[]  buffer[]  =  new  byte[length  +  1];  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =  new  byte[length  +  1];	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  if  (length[i]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if  (length[i]  ==  0)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (length[i]  ==  0)  {	  if    (length[i]    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  if  (length[i]!=  0)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if  (length[i]!=  0)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (length[i]!=  0)  {	  if    (length[i]    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
13	[BUG]  [BUGGY]  if  (length[i]  >  0)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if  (length[i]  >  0)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (length[i]  >  0)  {	  if    (length[i]    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
14	[BUG]  [BUGGY]  if  (length[i]  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if  (length[i]  <  =  0)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (length[i]  <  =  0)  {	  if    (length[i]    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
15	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
16	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  i,  end);  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  i,  end);  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  i,  end);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
17	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  i,  length);  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  i,  length);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
18	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
19	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  start  >  end)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if  (buffer[i]  ==  null  ||  start  >  end)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  start  >  end)  {	  if    (buffer[i]    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
20	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  start  <  length)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if  (buffer[i]  ==  null  ||  start  <  length)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  start  <  length)  {	  if    (buffer[i]    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
21	[BUG]  [BUGGY]  if  (buffer[i]  ==  0,  length)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if  (buffer[i]  ==  0,  length)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  0,  length)  {	  if    (buffer[i]    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
22	[BUG]  [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i]!=  null)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i]!=  null)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  null  ||  buffer[i]!=  null)  {	  if    (buffer[i]!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i]  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i]  ==  null)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  null  ||  buffer[i]  ==  null)  {	  if    (buffer[i]!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
24	[BUG]  [BUGGY]  if  (buffer[i]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if  (buffer[i]  ==  end)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  end)  {	  if    (buffer[i]!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
25	[BUG]  [BUGGY]  if(buffer[i]!=  end)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if(buffer[i]!=  end)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]!=  end)  {	  if    (buffer[i]    >=    0)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
26	[BUG]  [BUGGY]  byte  currentByte  =  buffer[i].getByte();  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  byte  currentByte  =  buffer[i].getByte();  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte  currentByte  =  buffer[i].getByte();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
27	[BUG]  [BUGGY]  byte  currentByte  =  buffer[i];  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  byte  currentByte  =  buffer[i];  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte  currentByte  =  buffer[i];	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
28	[BUG]  [BUGGY]  byte[]  buffer[]  =(byte[])result.clone();  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  byte[]  buffer[]  =(byte[])result.clone();  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	byte[]  buffer[]  =(byte[])result.clone();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
29	[BUG]  [BUGGY]  ((  byte[])end).append(buffer,  start,  end);  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  ((  byte[])end).append(buffer,  start,  end);  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte[])end).append(buffer,  start,  end);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
30	[BUG]  [BUGGY]  ((  byte)end).append(buffer[i]);  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  ((  byte)end).append(buffer[i]);  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	((  byte)end).append(buffer[i]);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
31	[BUG]  [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i].length  <  =  length)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if  (buffer[i]!=  null  ||  buffer[i].length  <  =  length)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]!=  null  ||  buffer[i].length  <  =  length)  {	  if    (buffer[i]!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
32	[BUG]  [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i  +  1]  ==  end)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if  (buffer[i]  ==  null  ||  buffer[i  +  1]  ==  end)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if  (buffer[i]  ==  null  ||  buffer[i  +  1]  ==  end)  {	  if    (buffer[i]    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  if(buffer[i]  ==  0  ||  buffer[i]  ==  0)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){    [BUGGY]  if(buffer[i]  ==  0  ||  buffer[i]  ==  0)  {  [BUGGY]    allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }  while  (start  <  end){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	67	67	1	replace	if(buffer[i]  ==  0  ||  buffer[i]  ==  0)  {	  if    (buffer[i]    ==    0)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
