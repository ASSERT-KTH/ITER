bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  byte[]  buffer  =  getByteBuffer().toByteArray();  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getByteBuffer().toByteArray();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getByteBuffer().toByteArray();	  final    byte[]    buffer    =    getByteBuffer();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
2	[BUG]  [BUGGY]  final  byte[]  buffer  =  getByteBuffer(offset);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getByteBuffer(offset);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getByteBuffer(offset);	  final    byte[]    buffer    =    getByteBuffer();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
3	[BUG]  [BUGGY]  final  byte[]  buffer  =  getOctalByteBuffer();  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getOctalByteBuffer();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getOctalByteBuffer();	  final    byte[]    buffer    =    getByteBuffer();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
4	[BUG]  [BUGGY]  final  byte[]  buffer  =  getByteBuffer().length;  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getByteBuffer().length;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getByteBuffer().length;	  final    byte[]    buffer    =    getByteBuffer();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
5	[BUG]  [BUGGY]  final  byte[]  buffer  =  getByteBuffer(buffer);  [CE]  <identifier>  expected  [FE]                                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getByteBuffer(buffer);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getByteBuffer(buffer);	  final    byte[]    buffer    =    getByteBuffer();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
6	[BUG]  [BUGGY]  if((  offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x7f)  ==  0)  {	  if((    offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
7	[BUG]  [BUGGY]  if((  offset]  &  0x80)  ==  0  ||(offset  +  length)>  buffer.length)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x80)  ==  0  ||(offset  +  length)>  buffer.length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x80)  ==  0  ||(offset  +  length)>  buffer.length)  {	  if((    offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
8	[BUG]  [BUGGY]  if((  offset]  &  BYTE_MASK)  ==  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  BYTE_MASK)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  BYTE_MASK)  ==  0)  {	  if((    offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
9	[BUG]  [BUGGY]  if((  offset]  &  0x800)  ==  0)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x800)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x800)  ==  0)  {	  if((    offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
10	[BUG]  [BUGGY]  if((  offset]  &  0x7F)  ==  0)  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x7F)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x7F)  ==  0)  {	  if((    offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
11	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	22	None	replace
12	[BUG]  [BUGGY]  if((  offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x7f)  ==  0)  {	  if((    buffer[offset]    &    0x80)!=    0    &&(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
13	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x80)  ==  0  &&(buffer[offset]  &  0x7f)!=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x80)  ==  0  &&(buffer[offset]  &  0x7f)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x80)  ==  0  &&(buffer[offset]  &  0x7f)!=  0)  {	  if((    buffer[offset]    &    0x80)!=    0    &&(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
14	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x7f)!=  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x7f)!=  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x7f)!=  0  &&(buffer[offset]  &  0x80)  ==  0)  {	  if((    buffer[offset]    &    0x80)!=    0    &&(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
15	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  <  =  length)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||  buffer.length  <  =  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||  buffer.length  <  =  length)  {	  if(length    <    =    0    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	135	None	replace
16	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  >=  length)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  >=  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||  buffer.length  >=  length)  {	  if(length    <    =    0    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	135	None	replace
17	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  <  length)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  <  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||  buffer.length  <  length)  {	  if(length    <    =    0    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	135	None	replace
18	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  <  =  offset)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  <  =  offset)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||  buffer.length  <  =  offset)  {	  if(length    <    =    0    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	135	None	replace
19	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer    	non-compiled	[CE]  <identifier>  expected	84	None	replace
20	[BUG]  [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer    	non-compiled	[CE]  <identifier>  expected	84	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  offset;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  offset;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value   ");    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  start;  i  <  offset;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  start;  i  <  offset;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value   ");    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  0;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  0;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value   ");    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
24	[BUG]  [BUGGY]  int  i  =  start;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  int  i  =  start;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	int  i  =  start;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value   ");    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  1;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  1;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value   ");    }    	non-compiled	[CE]  <identifier>  expected	123	None	replace
26	[BUG]  [BUGGY]  final  int  length  =  buffer.length  -  offset  +  1;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length  -  offset  +  1;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length  -  offset  +  1;	  final    int    length    =    buffer.length    -    offset;    	non-compiled	[CE]  <identifier>  expected	95	None	replace
27	[BUG]  [BUGGY]  final  int  length  =  offset  -  buffer.length;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  offset  -  buffer.length;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  offset  -  buffer.length;	  final    int    length    =    buffer.length    -    offset;    	non-compiled	[CE]  <identifier>  expected	95	None	replace
28	[BUG]  [BUGGY]  final  int  length  =  buffer.length  /  offset;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length  /  offset;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length  /  offset;	  final    int    length    =    buffer.length    -    offset;    	non-compiled	[CE]  <identifier>  expected	95	None	replace
29	[BUG]  [BUGGY]  final  int  length  =  buffer.length  -  offset  +  length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length  -  offset  +  length;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length  -  offset  +  length;	  final    int    length    =    buffer.length    -    offset;    	non-compiled	[CE]  <identifier>  expected	95	None	replace
30	[BUG]  [BUGGY]  final  int  length  =  buffer.length  -  offset,  length);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length  -  offset,  length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length  -  offset,  length);	  final    int    length    =    buffer.length    -    offset;    	non-compiled	[CE]  <identifier>  expected	95	None	replace
31	[BUG]  [BUGGY]  final  int  length  =  buffer.length  -  offset  +  2;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length  -  offset  +  2;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length  -  offset  +  2;	  final    int    length    =    buffer.length    -    offset;    	non-compiled	[CE]  <identifier>  expected	95	None	replace
32	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(offset,  length  +  1);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(offset,  length  +  1);	  final    byte[]    buffer    =    getBytes(offset,    length);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
33	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(offset,  length  -  1);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(offset,  length  -  1);	  final    byte[]    buffer    =    getBytes(offset,    length);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
34	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(offset,  offset,  length);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(offset,  offset,  length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(offset,  offset,  length);	  final    byte[]    buffer    =    getBytes(offset,    length);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
35	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(offset,  offset  +  length);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(offset,  offset  +  length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(offset,  offset  +  length);	  final    byte[]    buffer    =    getBytes(offset,    length);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
36	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(offset,  length  +  2);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(offset,  length  +  2);	  final    byte[]    buffer    =    getBytes(offset,    length);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
37	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(buff,  offset,  length);  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(buff,  offset,  length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(buff,  offset,  length);	  final    byte[]    buffer    =    getBytes(offset,    length);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
38	[BUG]  [BUGGY]  [Delete]  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  [Delete]  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	[Delete]	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
39	[BUG]  [BUGGY]  allowNegated(length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  allowNegated(length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	allowNegated(length)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
40	[BUG]  [BUGGY]  Parchet.getInstance().parseOctalOrBinary(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  Parchet.getInstance().parseOctalOrBinary(buffer,  offset,  length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	Parchet.getInstance().parseOctalOrBinary(buffer,  offset,  length);	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
41	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
42	[BUG]  [BUGGY]  Parchet.getInstance().parseOctal(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  Parchet.getInstance().parseOctal(buffer,  offset,  length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	Parchet.getInstance().parseOctal(buffer,  offset,  length);	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
43	[BUG]  [BUGGY]  allowNull(buffer,  offset,  length))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  allowNull(buffer,  offset,  length))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	allowNull(buffer,  offset,  length))  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
44	[BUG]  [BUGGY]  allowNull(buffer);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  allowNull(buffer);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	allowNull(buffer);	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
45	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  1);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  1);	  final    byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
46	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset,  length  -  1);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(buffer,  offset,  length  -  1);	  final    byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
47	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  2);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  2);	  final    byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
48	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset,  0,  length);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset,  0,  length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(buffer,  offset,  0,  length);	  final    byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
49	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  3);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  3);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  3);	  final    byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
50	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	105	None	replace
51	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	105	None	replace
52	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	105	None	replace
53	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >	  if(length    <    =    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	105	None	replace
54	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	102	None	replace
55	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	102	None	replace
56	[BUG]  [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	102	None	replace
57	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	102	None	replace
58	[BUG]  [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	102	None	replace
59	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x80)  ==  0  &&(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x80)  ==  0  &&(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x80)  ==  0  &&(buffer[offset]  &  0x80)!=  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
60	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x80)!=  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
61	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x80)!=  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
62	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x7f)  ==  0  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x7f)  ==  0  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x7f)  ==  0  ||(buffer[offset]  &  0x80)!=  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
63	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x7f)!=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x7f)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x7f)!=  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    ||(buffer[offset]    &    0x7f)    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
64	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x80)  ==  0  &&(buffer[offset]  &  0x7f)  >=  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x80)  ==  0  &&(buffer[offset]  &  0x7f)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x80)  ==  0  &&(buffer[offset]  &  0x7f)  >=  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    ||(buffer[offset]    &    0x7f)    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
65	[BUG]  [BUGGY]  if(buffer!=  null  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer!=  null  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer!=  null  ||(buffer[offset]  &  0x80)!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
66	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x800)!=  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x800)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x800)!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
67	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7f)!=  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7f)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x7f)!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
68	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x90)!=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x90)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x90)!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
69	[BUG]  [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >	  if(length    <    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	81	None	replace
70	[BUG]  [BUGGY]  if(length  <  1  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  1  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  1  ||(buffer[offset]  &  0x80)!=  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
71	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x7f)!=  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x7f)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(buffer[offset]  &  0x7f)!=  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
72	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x800)!=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x800)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(buffer[offset]  &  0x800)!=  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
73	[BUG]  [BUGGY]  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  1);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	byte[]  buffer  =  getBytes(buffer,  offset,  length  +  1);	  byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
74	[BUG]  [BUGGY]  byte[]  buffer  =  getBytes(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  byte[]  buffer  =  getBytes(buffer,  offset,  length  -  1);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	byte[]  buffer  =  getBytes(buffer,  offset,  length  -  1);	  byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
75	[BUG]  [BUGGY]  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  2);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	byte[]  buffer  =  getBytes(buffer,  offset,  length  +  2);	  byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
76	[BUG]  [BUGGY]  byte[]  buffer  =  getBytes(buffer,  offset,  0,  length);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  byte[]  buffer  =  getBytes(buffer,  offset,  0,  length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	byte[]  buffer  =  getBytes(buffer,  offset,  0,  length);	  byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
77	[BUG]  [BUGGY]  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  4);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  4);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	byte[]  buffer  =  getBytes(buffer,  offset,  length  +  4);	  byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
78	[BUG]  [BUGGY]  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  3);  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  3);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	byte[]  buffer  =  getBytes(buffer,  offset,  length  +  3);	  byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
79	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	103	None	replace
80	[BUG]  [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	103	None	replace
81	[BUG]  [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	103	None	replace
82	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	103	None	replace
83	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(length);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(length);	  final    byte[]    buffer    =    getBytes(offset);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
84	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(offset  +  length);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(offset  +  length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(offset  +  length);	  final    byte[]    buffer    =    getBytes(offset);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
85	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(buffer);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(buffer);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(buffer);	  final    byte[]    buffer    =    getBytes(offset);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
86	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(buffer,  offset);	  final    byte[]    buffer    =    getBytes(offset);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
87	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes();  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes();	  final    byte[]    buffer    =    getBytes(offset);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
88	[BUG]  [BUGGY]  if(length  <  0x80  ||(buffer[offset]  &  0x800)  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0x80  ||(buffer[offset]  &  0x800)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0x80  ||(buffer[offset]  &  0x800)  ==  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x800)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
89	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x800)!=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x800)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x800)!=  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x800)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
90	[BUG]  [BUGGY]  if(length  ==  0x80  ||(buffer[offset]  &  0x800)  ==  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0x80  ||(buffer[offset]  &  0x800)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0x80  ||(buffer[offset]  &  0x800)  ==  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x800)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
91	[BUG]  [BUGGY]  if(length  >=  0x80  ||(buffer[offset]  &  0x800)  ==  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0x80  ||(buffer[offset]  &  0x800)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0x80  ||(buffer[offset]  &  0x800)  ==  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x800)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
92	[BUG]  [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x800)  ==  0)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x800)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0  ||(buffer[offset]  &  0x800)  ==  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x800)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
93	[BUG]  [BUGGY]  if(length  >=  0  ||(buffer[offset]  &  0x7f)!=  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(buffer[offset]  &  0x7f)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(buffer[offset]  &  0x7f)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x7f)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
94	[BUG]  [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x7f)!=  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x7f)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0  ||(buffer[offset]  &  0x7f)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x7f)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
95	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x7f)  >=  0)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x7f)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0x7f)  >=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x7f)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
96	[BUG]  [BUGGY]  if(length  <  =  1  ||(buffer[offset]  &  0x7f)!=  0)  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  1  ||(buffer[offset]  &  0x7f)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  1  ||(buffer[offset]  &  0x7f)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x7f)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
97	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	116	None	replace
98	[BUG]  [BUGGY]  if(buffered!=  null  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffered!=  null  ||  buffer[offset]!=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffered!=  null  ||  buffer[offset]!=  0x80)  {	  if(buffered    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
99	[BUG]  [BUGGY]  if(buffered  ==  null  ||  buffer[offset]!=  0x90)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffered  ==  null  ||  buffer[offset]!=  0x90)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffered  ==  null  ||  buffer[offset]!=  0x90)  {	  if(buffered    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
100	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  0x80)  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  offset  <  0x80)  {	  if(buffered    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
101	[BUG]  [BUGGY]  if(buffered  ==  null  ||  buffer[offset]!=  0x800)  {  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffered  ==  null  ||  buffer[offset]!=  0x800)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffered  ==  null  ||  buffer[offset]!=  0x800)  {	  if(buffered    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
102	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	3	None	replace
103	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	3	None	replace
104	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	109	None	replace
105	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	109	None	replace
106	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	109	None	replace
107	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	109	None	replace
108	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	109	None	replace
109	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	109	None	replace
110	[BUG]  [BUGGY]  if(buffer!=  null  ||(buffer[offset]  &  0x800)  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer!=  null  ||(buffer[offset]  &  0x800)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer!=  null  ||(buffer[offset]  &  0x800)  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x800)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
111	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x8000)  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x8000)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x8000)  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x800)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
112	[BUG]  [BUGGY]  if(length  <  0x800  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0x800  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0x800  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0x800    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	112	None	replace
113	[BUG]  [BUGGY]  if(length  <  =  0x800  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x800  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x800  ||(buffer[offset]  &  0x80)!=  0)  {	  if(length    <    =    0x800    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	112	None	replace
114	[BUG]  [BUGGY]  if(length  >=  0x800  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0x800  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0x800  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0x800    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	112	None	replace
115	[BUG]  [BUGGY]  if(length  ==  0x800  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0x800  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0x800  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0x800    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	112	None	replace
116	[BUG]  [BUGGY]  if(length  >  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >  0)  {	  if(length    <    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
117	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||  buffer.length  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||  buffer.length  ==  0)  {	  if(length    <    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
118	[BUG]  [BUGGY]  if(length!=  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length!=  0)  {	  if(length    <    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
119	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  >  length)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||  buffer.length  >  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||  buffer.length  >  length)  {	  if(length    <    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
120	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x800)!=  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x800)!=  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x800)!=  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if((    buffer[offset]    &    0x800)    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
121	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x80)  ==  0  ||(buffer[offset]  &  0x800)  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x80)  ==  0  ||(buffer[offset]  &  0x800)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x80)  ==  0  ||(buffer[offset]  &  0x800)  ==  0)  {	  if((    buffer[offset]    &    0x800)    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
122	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x800)  ==  0  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x800)  ==  0  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x800)  ==  0  ||(buffer[offset]  &  0x80)!=  0)  {	  if((    buffer[offset]    &    0x800)    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
123	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x800)  ==  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x800)  ==  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x800)  ==  0  &&(buffer[offset]  &  0x80)  ==  0)  {	  if((    buffer[offset]    &    0x800)    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
124	[BUG]  [BUGGY]  if((  offset]  &  0x800)  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x800)  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x800)  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if((    buffer[offset]    &    0x800)    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
125	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x8000)  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x8000)  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x8000)  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if((    buffer[offset]    &    0x800)    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
126	[BUG]  [BUGGY]  if(buffer!=  null  ||(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer!=  null  ||(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer!=  null  ||(buffer[offset]  &  0x7f)  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
127	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7f)  >=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7f)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x7f)  >=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
128	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7f)  <  =  length)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7f)  <  =  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x7f)  <  =  length)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
129	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7f)  <  =  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7f)  <  =  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x7f)  <  =  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
130	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer    	non-compiled	[CE]  <identifier>  expected	66	None	replace
131	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer    	non-compiled	[CE]  <identifier>  expected	66	None	replace
132	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]  ==  0)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
133	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer[offset]!=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer!=  null  ||  buffer[offset]!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer!=  null  ||  buffer[offset]!=  0)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
134	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0,  length)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0,  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]!=  0,  length)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
135	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer[offset]  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer!=  null  ||  buffer[offset]  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer!=  null  ||  buffer[offset]  ==  0)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
136	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  >=  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]  >=  0)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
137	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset].length!=  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset].length!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset].length!=  0)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
138	[BUG]  [BUGGY]  allowNumber(length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value. ");  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  allowNumber(length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value. ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	allowNumber(length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value. ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value.   ");    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
139	[BUG]  [BUGGY]  allowNegated(length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value. ");  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  allowNegated(length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value. ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	allowNegated(length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value. ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value.   ");    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
140	[BUG]  [BUGGY]  allowNull(buffer,  offset,  length))  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value. ");  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  allowNull(buffer,  offset,  length))  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value. ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	allowNull(buffer,  offset,  length))  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value. ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value.   ");    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
141	[BUG]  [BUGGY]  final  int  length  =  buffer.length  -  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length  -  1;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length  -  1;	  final    int    length    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	94	None	replace
142	[BUG]  [BUGGY]  final  int  length  =  this.buffer.length;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  this.buffer.length;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  this.buffer.length;	  final    int    length    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	94	None	replace
143	[BUG]  [BUGGY]  final  int  length  =  buffer.length  -  2;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length  -  2;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length  -  2;	  final    int    length    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	94	None	replace
144	[BUG]  [BUGGY]  final  int  length  =  buffer.length  +  1;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length  +  1;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length  +  1;	  final    int    length    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	94	None	replace
145	[BUG]  [BUGGY]  final  int  length  =  byte.length;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  byte.length;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  byte.length;	  final    int    length    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	94	None	replace
146	[BUG]  [BUGGY]  if(length  <  =  32  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  32  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  32  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	132	None	replace
147	[BUG]  [BUGGY]  if(length  >  0  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >  0  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >  0  ||(buffer[offset]  &  0x80)!=  0)  {	  if(length    >=    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
148	[BUG]  [BUGGY]  if(length  >=  0  &&(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  &&(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  &&(buffer[offset]  &  0x80)!=  0)  {	  if(length    >=    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
149	[BUG]  [BUGGY]  if(length!=  0  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length!=  0  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length!=  0  ||(buffer[offset]  &  0x80)!=  0)  {	  if(length    >=    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
150	[BUG]  [BUGGY]  if(length  >=  0  ||(buffer[offset]  &  0x800)!=  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(buffer[offset]  &  0x800)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(buffer[offset]  &  0x800)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x800)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
151	[BUG]  [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x800)!=  0)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x800)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0  ||(buffer[offset]  &  0x800)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x800)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	43	None	replace
152	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	13	None	replace
153	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >=  0x80)||  buffer[offset]!=  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >=  0x80)||  buffer[offset]!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  >=  0x80)||  buffer[offset]!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    <    0x80)||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	126	None	replace
154	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80)&&  buffer[offset]!=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80)&&  buffer[offset]!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  <  0x80)&&  buffer[offset]!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    <    0x80)||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	126	None	replace
155	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >>  0x80)||  buffer[offset]!=  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >>  0x80)||  buffer[offset]!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  >>  0x80)||  buffer[offset]!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    <    0x80)||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	126	None	replace
156	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]!=  0x80)||  buffer[offset]!=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]!=  0x80)||  buffer[offset]!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]!=  0x80)||  buffer[offset]!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    <    0x80)||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	126	None	replace
157	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  =  0x80)||  buffer[offset]!=  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  =  0x80)||  buffer[offset]!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  <  =  0x80)||  buffer[offset]!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    <    0x80)||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	126	None	replace
158	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >=  0x80)||  buffer[offset]  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >=  0x80)||  buffer[offset]  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  >=  0x80)||  buffer[offset]  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    <    0x80)||    buffer[offset]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	128	None	replace
159	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  =  0x80)||  buffer[offset]  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  =  0x80)||  buffer[offset]  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  <  =  0x80)||  buffer[offset]  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    <    0x80)||    buffer[offset]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	128	None	replace
160	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]!=  0x80)||  buffer[offset]  ==  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]!=  0x80)||  buffer[offset]  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]!=  0x80)||  buffer[offset]  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    <    0x80)||    buffer[offset]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	128	None	replace
161	[BUG]  [BUGGY]  if(length  <  0x7F  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0x7F  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0x7F  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	111	None	replace
162	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x7F  ||(buffer[offset]  &  0x80)!=  0)  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	111	None	replace
163	[BUG]  [BUGGY]  if(length  <  =  0x7FF  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x7FF  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x7FF  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	111	None	replace
164	[BUG]  [BUGGY]  if(length  <  =  0x7f  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x7f  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x7f  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	111	None	replace
165	[BUG]  [BUGGY]  if(length  ==  0x7F  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0x7F  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0x7F  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	111	None	replace
166	[BUG]  [BUGGY]  if(length  >=  0x7F  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0x7F  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0x7F  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	111	None	replace
167	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7F)!=  0)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7F)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x7F)!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
168	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7FF)  ==  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7FF)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x7FF)  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
169	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7F)  >=  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7F)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x7F)  >=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
170	[BUG]  [BUGGY]  if(buffer!=  null  ||(buffer[offset]  &  0x7F)  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer!=  null  ||(buffer[offset]  &  0x7F)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer!=  null  ||(buffer[offset]  &  0x7F)  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
171	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >	  if(length    <    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	2	None	replace
172	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer.length  ||(offset  +  length)>  buffer.length)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer.length  ||(offset  +  length)>  buffer.length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer.length  ||(offset  +  length)>  buffer.length)  {	  if((    offset    +    length)>    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
173	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer[offset.length))  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer[offset.length))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer[offset.length))  {	  if((    offset    +    length)>    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
174	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  +  length)>  buffer.length)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  +  length)>  buffer.length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  +  length)>  buffer.length)  {	  if((    offset    +    length)>    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
175	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer[offset].length)  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer[offset].length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer[offset].length)  {	  if((    offset    +    length)>    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
176	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer[offset.length)  {  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer[offset.length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer[offset.length)  {	  if((    offset    +    length)>    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
177	[BUG]  [BUGGY]  if(length  <  0x80  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0x80  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0x80  ||(buffer[offset]  &  0x80)!=  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
178	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7f)!=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7f)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x7f)!=  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	45	None	replace
179	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	76	None	replace
180	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >	  if(length    <    =    0    ||(offset    <    length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	7	None	replace
181	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >	  if(length    <    =    0    ||(offset    <    length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	7	None	replace
182	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]!=  0x80))  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]!=  0x80))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]!=  0x80))  {	  if(buffer    ==    null    ||(buffer[offset]    >>    0x80))    {    	non-compiled	[CE]  <identifier>  expected	124	None	replace
183	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >=  0x80))  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >=  0x80))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  >=  0x80))  {	  if(buffer    ==    null    ||(buffer[offset]    >>    0x80))    {    	non-compiled	[CE]  <identifier>  expected	124	None	replace
184	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80))  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  <  0x80))  {	  if(buffer    ==    null    ||(buffer[offset]    >>    0x80))    {    	non-compiled	[CE]  <identifier>  expected	124	None	replace
185	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  [Delete]  0x80))  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  [Delete]  0x80))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  [Delete]  0x80))  {	  if(buffer    ==    null    ||(buffer[offset]    >>    0x80))    {    	non-compiled	[CE]  <identifier>  expected	124	None	replace
186	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  ==  0x80))  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  ==  0x80))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  ==  0x80))  {	  if(buffer    ==    null    ||(buffer[offset]    >>    0x80))    {    	non-compiled	[CE]  <identifier>  expected	124	None	replace
187	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	15	None	replace
188	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	15	None	replace
189	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer[offset]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer!=  null  ||  buffer[offset]  ==  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer!=  null  ||  buffer[offset]  ==  0x80)  {	  if(buffer!=    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
190	[BUG]  [BUGGY]  final  long  val  =  getValue();  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  long  val  =  getValue();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  long  val  =  getValue();	  final    int    val    =    getValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
191	[BUG]  [BUGGY]  final  int  val  =  getOffset();  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  val  =  getOffset();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  val  =  getOffset();	  final    int    val    =    getValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
192	[BUG]  [BUGGY]  final  int  val  =  getValue()  *  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  val  =  getValue()  *  BYTE_MASK;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  val  =  getValue()  *  BYTE_MASK;	  final    int    val    =    getValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
193	[BUG]  [BUGGY]  final  int  val  =  getLength();  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  val  =  getLength();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  val  =  getLength();	  final    int    val    =    getValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
194	[BUG]  [BUGGY]  final  int  val  =  getValue()  +  1;  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  val  =  getValue()  +  1;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  val  =  getValue()  +  1;	  final    int    val    =    getValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
195	[BUG]  [BUGGY]  final  int  val  =  getValue()  -  1;  [CE]  <identifier>  expected  [FE]                                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  val  =  getValue()  -  1;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  val  =  getValue()  -  1;	  final    int    val    =    getValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
196	[BUG]  [BUGGY]  final  int  val  =  getEndValue();  [CE]  <identifier>  expected  [FE]                                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  val  =  getEndValue();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  val  =  getEndValue();	  final    int    val    =    getValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
197	[BUG]  [BUGGY]  if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	108	None	replace
198	[BUG]  [BUGGY]  if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	108	None	replace
199	[BUG]  [BUGGY]  if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	108	None	replace
200	[BUG]  [BUGGY]  if(length  >=  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	108	None	replace
201	[BUG]  [BUGGY]  if(length  >  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	108	None	replace
202	[BUG]  [BUGGY]  if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	108	None	replace
203	[BUG]  [BUGGY]  if(length  ==  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	108	None	replace
204	[BUG]  [BUGGY]  final  int  offset  =  getOffset(buffer,  offset,  length  -  1);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  offset  =  getOffset(buffer,  offset,  length  -  1);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  offset  =  getOffset(buffer,  offset,  length  -  1);	  final    int    offset    =    getOffset(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
205	[BUG]  [BUGGY]  final  int  offset  =  getOffset(buffer,  offset,  length  +  1);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  offset  =  getOffset(buffer,  offset,  length  +  1);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  offset  =  getOffset(buffer,  offset,  length  +  1);	  final    int    offset    =    getOffset(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
206	[BUG]  [BUGGY]  final  int  offset  =  getOffset(buffer,  offset,  length  +  2);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  offset  =  getOffset(buffer,  offset,  length  +  2);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  offset  =  getOffset(buffer,  offset,  length  +  2);	  final    int    offset    =    getOffset(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
207	[BUG]  [BUGGY]  final  int  offset  =  getOffset(buffer,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  offset  =  getOffset(buffer,  offset,  length  -  2);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  offset  =  getOffset(buffer,  offset,  length  -  2);	  final    int    offset    =    getOffset(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
208	[BUG]  [BUGGY]  final  int  offset  =  getOffset(buffer,  offset,  length)-  1;  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  offset  =  getOffset(buffer,  offset,  length)-  1;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  offset  =  getOffset(buffer,  offset,  length)-  1;	  final    int    offset    =    getOffset(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
209	[BUG]  [BUGGY]  final  int  offset  =  getOffset(buffer,  offset,  length  +  3);  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  offset  =  getOffset(buffer,  offset,  length  +  3);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  offset  =  getOffset(buffer,  offset,  length  +  3);	  final    int    offset    =    getOffset(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
210	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length!=  length)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||  buffer.length!=  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||  buffer.length!=  length)  {	  if(length    <    =    0    ||    buffer.length!=    length)    {    	non-compiled	[CE]  <identifier>  expected	137	None	replace
211	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  ==  offset)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  ==  offset)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||  buffer.length  ==  offset)  {	  if(length    <    =    0    ||    buffer.length!=    length)    {    	non-compiled	[CE]  <identifier>  expected	137	None	replace
212	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length!=  offset)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||  buffer.length!=  offset)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||  buffer.length!=  offset)  {	  if(length    <    =    0    ||    buffer.length!=    length)    {    	non-compiled	[CE]  <identifier>  expected	137	None	replace
213	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[offset  +  length]!=  length)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||  buffer[offset  +  length]!=  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||  buffer[offset  +  length]!=  length)  {	  if(length    <    =    0    ||    buffer.length!=    length)    {    	non-compiled	[CE]  <identifier>  expected	137	None	replace
214	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  offset;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  offset;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value.   ");    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
215	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  start;  i  <  offset;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  start;  i  <  offset;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value.   ");    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
216	[BUG]  [BUGGY]  int  i  =  start;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  int  i  =  start;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	int  i  =  start;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value.   ");    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
217	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  0;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  0;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value.   ");    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
218	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x7f)!=  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x7f)!=  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x7f)!=  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if((    buffer[offset]    &    0x7f)    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
219	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x7f)  ==  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x7f)  ==  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x7f)  ==  0  &&(buffer[offset]  &  0x80)  ==  0)  {	  if((    buffer[offset]    &    0x7f)    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
220	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x7f)  >=  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x7f)  >=  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x7f)  >=  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if((    buffer[offset]    &    0x7f)    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
221	[BUG]  [BUGGY]  if((  offset]  &  0x7f)  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x7f)  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x7f)  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if((    buffer[offset]    &    0x7f)    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
222	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x7f)  ==  0  ||(buffer[offset]  &  0x80)  >=  0)  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x7f)  ==  0  ||(buffer[offset]  &  0x80)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x7f)  ==  0  ||(buffer[offset]  &  0x80)  >=  0)  {	  if((    buffer[offset]    &    0x7f)    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
223	[BUG]  [BUGGY]  if((  offset]  &  0x7f)!=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x7f)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x7f)!=  0)  {	  if((    offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
224	[BUG]  [BUGGY]  if((  offset]  &  0x80)!=  0  ||(offset  +  length)>  buffer.length)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x80)!=  0  ||(offset  +  length)>  buffer.length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x80)!=  0  ||(offset  +  length)>  buffer.length)  {	  if((    offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
225	[BUG]  [BUGGY]  if((  offset  +  length)  >=  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)  >=  0)  {	  if((    offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
226	[BUG]  [BUGGY]  if((  offset]  &  BYTE_MASK)!=  0)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  BYTE_MASK)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  BYTE_MASK)!=  0)  {	  if((    offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
227	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	85	None	replace
228	[BUG]  [BUGGY]  final  int  length  =  buffer.length()  -  1;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length()  -  1;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length()  -  1;	  final    int    length    =    buffer.length();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
229	[BUG]  [BUGGY]  final  int  length  =  buffer.length()  +  1;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length()  +  1;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length()  +  1;	  final    int    length    =    buffer.length();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
230	[BUG]  [BUGGY]  final  int  length  =  this.buffer.length();  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  this.buffer.length();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  this.buffer.length();	  final    int    length    =    buffer.length();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
231	[BUG]  [BUGGY]  final  int  length  =  buffer.length()  -  offset;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length()  -  offset;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length()  -  offset;	  final    int    length    =    buffer.length();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
232	[BUG]  [BUGGY]  final  int  length  =  buffer.length()  -  2;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length()  -  2;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length()  -  2;	  final    int    length    =    buffer.length();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
233	[BUG]  [BUGGY]  final  int  length  =  buffer.length()  *  2;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length()  *  2;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length()  *  2;	  final    int    length    =    buffer.length();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
234	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	104	None	replace
235	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(buffer[offset]  &  0x7f)  ==  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
236	[BUG]  [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0  ||(buffer[offset]  &  0x7f)  ==  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
237	[BUG]  [BUGGY]  if(length  >=  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(buffer[offset]  &  0x7f)  ==  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
238	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length!=  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||  buffer.length!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||  buffer.length!=  0)  {	  if(length    <    =    0    ||    buffer.length!=    0)    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
239	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[offset  +  length]!=  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||  buffer[offset  +  length]!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||  buffer[offset  +  length]!=  0)  {	  if(length    <    =    0    ||    buffer.length!=    0)    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
240	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length!=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0  ||  buffer.length!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0  ||  buffer.length!=  0)  {	  if(length    <    =    0    ||    buffer.length!=    0)    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
241	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[offset  +  length]  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||  buffer[offset  +  length]  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||  buffer[offset  +  length]  ==  0)  {	  if(length    <    =    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
242	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0  ||  buffer.length  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0  ||  buffer.length  ==  0)  {	  if(length    <    =    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
243	[BUG]  [BUGGY]  if(length  <  1  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  1  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  1  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
244	[BUG]  [BUGGY]  if(offset  <  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(offset  <  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(offset  <  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
245	[BUG]  [BUGGY]  if(length  >  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    >=    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
246	[BUG]  [BUGGY]  if(length!=  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length!=  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length!=  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    >=    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
247	[BUG]  [BUGGY]  if(length  >=  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  &&(buffer[offset]  &  0x80)  ==  0)  {	  if(length    >=    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
248	[BUG]  [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	129	None	replace
249	[BUG]  [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)	  if(length    <    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	129	None	replace
250	[BUG]  [BUGGY]  final  byte[]  buffer  =  getByteArray().cloneTree();  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getByteArray().cloneTree();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getByteArray().cloneTree();	  final    byte[]    buffer    =    getByteArray();    	non-compiled	[CE]  <identifier>  expected	98	None	replace
251	[BUG]  [BUGGY]  final  byte[]  buffer  =  getByteArray(length);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getByteArray(length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getByteArray(length);	  final    byte[]    buffer    =    getByteArray();    	non-compiled	[CE]  <identifier>  expected	98	None	replace
252	[BUG]  [BUGGY]  final  byte[]  buffer  =  getOctalByteArray();  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getOctalByteArray();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getOctalByteArray();	  final    byte[]    buffer    =    getByteArray();    	non-compiled	[CE]  <identifier>  expected	98	None	replace
253	[BUG]  [BUGGY]  final  byte[]  buffer  =  getByteArray().toByteArray();  [CE]  <identifier>  expected  [FE]                                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getByteArray().toByteArray();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getByteArray().toByteArray();	  final    byte[]    buffer    =    getByteArray();    	non-compiled	[CE]  <identifier>  expected	98	None	replace
254	[BUG]  [BUGGY]  final  byte[]  buffer  =  getByteArray().get(buffer);  [CE]  <identifier>  expected  [FE]                                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getByteArray().get(buffer);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getByteArray().get(buffer);	  final    byte[]    buffer    =    getByteArray();    	non-compiled	[CE]  <identifier>  expected	98	None	replace
255	[BUG]  [BUGGY]  if(length  ==  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0  &&(buffer[offset]  &  0x80)  ==  0)  {	  if(length    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
256	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x7f)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x7f)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]!=  0x7f)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x7F)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
257	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer[offset]!=  0x7F)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer!=  null  ||  buffer[offset]!=  0x7F)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer!=  null  ||  buffer[offset]!=  0x7F)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x7F)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
258	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x7FF)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x7FF)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]!=  0x7FF)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x7F)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
259	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  >=  0x7F)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  >=  0x7F)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]  >=  0x7F)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x7F)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
260	[BUG]  [BUGGY]  if(buffered  ==  null  ||  buffer[offset]!=  0x7F)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffered  ==  null  ||  buffer[offset]!=  0x7F)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffered  ==  null  ||  buffer[offset]!=  0x7F)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x7F)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
261	[BUG]  [BUGGY]  if(bounded  ||  buffer[offset]!=  0x7F)  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(bounded  ||  buffer[offset]!=  0x7F)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(bounded  ||  buffer[offset]!=  0x7F)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x7F)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
262	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  0x90)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  0x90)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]  ==  0x90)  {	  if(buffer    ==    null    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
263	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  0x800)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  0x800)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]  ==  0x800)  {	  if(buffer    ==    null    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
264	[BUG]  [BUGGY]  if(bounded  ||  buffer[offset]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(bounded  ||  buffer[offset]  ==  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(bounded  ||  buffer[offset]  ==  0x80)  {	  if(buffer    ==    null    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
265	[BUG]  [BUGGY]  if(buffered  ==  null  ||  buffer[offset]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffered  ==  null  ||  buffer[offset]  ==  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffered  ==  null  ||  buffer[offset]  ==  0x80)  {	  if(buffer    ==    null    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
266	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer[offset  +  1])  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer[offset  +  1])  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer[offset  +  1])  {	  if((    offset    +    length)>    buffer[offset])    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
267	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer[offset  +  1)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer[offset  +  1)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer[offset  +  1)  {	  if((    offset    +    length)>    buffer[offset])    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
268	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer[offset]  ||(offset  +  length)>  buffer[offset))  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer[offset]  ||(offset  +  length)>  buffer[offset))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer[offset]  ||(offset  +  length)>  buffer[offset))  {	  if((    offset    +    length)>    buffer[offset])    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
269	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer[offset  ||(offset  +  length)>  buffer[offset])  {  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer[offset  ||(offset  +  length)>  buffer[offset])  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer[offset  ||(offset  +  length)>  buffer[offset])  {	  if((    offset    +    length)>    buffer[offset])    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
270	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer[offset  +  32)  {  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer[offset  +  32)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer[offset  +  32)  {	  if((    offset    +    length)>    buffer[offset])    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
271	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  >>  0x80)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  >>  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]  >>  0x80)  {	  if(buffer    ==    null    ||    buffer[offset]    >=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
272	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  ==  0x80)||(buffer[offset]  ==  0x80))  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  ==  0x80)||(buffer[offset]  ==  0x80))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  ==  0x80)||(buffer[offset]  ==  0x80))  {	  if(buffer    ==    null    ||(buffer[offset]    {    0x80))    {    	non-compiled	[CE]  <identifier>  expected	125	None	replace
273	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  ==  0x80)&&  length  >  0x7f)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  ==  0x80)&&  length  >  0x7f)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  ==  0x80)&&  length  >  0x7f)  {	  if(buffer    ==    null    ||(buffer[offset]    {    0x80))    {    	non-compiled	[CE]  <identifier>  expected	125	None	replace
274	[BUG]  [BUGGY]  if(buffer!=  null  ||(buffer[offset]  ==  0x80))  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer!=  null  ||(buffer[offset]  ==  0x80))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer!=  null  ||(buffer[offset]  ==  0x80))  {	  if(buffer    ==    null    ||(buffer[offset]    {    0x80))    {    	non-compiled	[CE]  <identifier>  expected	125	None	replace
275	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  ==  0x80)||(buffer[offset]  ==  0x7F))  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  ==  0x80)||(buffer[offset]  ==  0x7F))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  ==  0x80)||(buffer[offset]  ==  0x7F))  {	  if(buffer    ==    null    ||(buffer[offset]    {    0x80))    {    	non-compiled	[CE]  <identifier>  expected	125	None	replace
276	[BUG]  [BUGGY]  if(length  <  0x80  ||(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0x80  ||(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0x80  ||(buffer[offset]  &  0x7f)  ==  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
277	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7f)  >=  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7f)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x7f)  >=  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
278	[BUG]  [BUGGY]  if(length  ==  0x80  ||(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0x80  ||(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0x80  ||(buffer[offset]  &  0x7f)  ==  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
279	[BUG]  [BUGGY]  if(length  >=  0x80  ||(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0x80  ||(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0x80  ||(buffer[offset]  &  0x7f)  ==  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
280	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x7F)!=  0)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x7F)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0x7F)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
281	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x7F)  ==  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x7F)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(buffer[offset]  &  0x7F)  ==  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
282	[BUG]  [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x7F)  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x7F)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0  ||(buffer[offset]  &  0x7F)  ==  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
283	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x7F)  >=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x7F)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0x7F)  >=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
284	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x7FF)  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x7FF)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0x7FF)  ==  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
285	[BUG]  [BUGGY]  allowNumber(length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  allowNumber(length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	allowNumber(length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value   ");    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
286	[BUG]  [BUGGY]  allowNegated(length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  allowNegated(length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	allowNegated(length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value   ");    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
287	[BUG]  [BUGGY]  allowNull(buffer,  offset,  length))  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  allowNull(buffer,  offset,  length))  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	allowNull(buffer,  offset,  length))  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value   ");    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
288	[BUG]  [BUGGY]  aughtException( "Byte  number  exceeds  maximum  signed  value ");  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  aughtException( "Byte  number  exceeds  maximum  signed  value ");  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	aughtException( "Byte  number  exceeds  maximum  signed  value ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value   ");    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
289	[BUG]  [BUGGY]  allowNull(buff,  offset,  length))  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  allowNull(buff,  offset,  length))  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	allowNull(buff,  offset,  length))  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value   ");    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
290	[BUG]  [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)	  if(length    <    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	83	None	replace
291	[BUG]  [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)	  if(length    <    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	83	None	replace
292	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80)&&  buffer[offset]  >=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80)&&  buffer[offset]  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  <  0x80)&&  buffer[offset]  >=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    <    0x80)||    buffer[offset]    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	127	None	replace
293	[BUG]  [BUGGY]  if(length  >=  0x80  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0x80  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0x80  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    0x80    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
294	[BUG]  [BUGGY]  if(length  >  0x80  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >  0x80  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >  0x80  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    0x80    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	44	None	replace
295	[BUG]  [BUGGY]  if(length  ==  0  &&(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0  &&(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0  &&(buffer[offset]  &  0x80)!=  0)  {	  if(length    ==    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
296	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x800)!=  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x800)!=  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x800)!=  0  ||(buffer[offset]  &  0x7f)  ==  0)  {	  if((    buffer[offset]    &    0x80)!=    0    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
297	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x78)!=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x78)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x78)!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x78)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
298	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x78f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x78f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x78f)  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x78)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
299	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x77)  ==  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x77)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x77)  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x78)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
300	[BUG]  [BUGGY]  if(length  >  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	73	None	replace
301	[BUG]  [BUGGY]  if(length  >=  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	73	None	replace
302	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  >=  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||  buffer.length  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||  buffer.length  >=  0)  {	  if(length    <    =    0    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
303	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer[offset  +  length]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer!=  null  ||  buffer[offset  +  length]!=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer!=  null  ||  buffer[offset  +  length]!=  0x80)  {	  if(buffer    ==    null    ||    buffer[offset    +    length]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	133	None	replace
304	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset  +  length]!=  0x800)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset  +  length]!=  0x800)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset  +  length]!=  0x800)  {	  if(buffer    ==    null    ||    buffer[offset    +    length]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	133	None	replace
305	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset  +  length]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset  +  length]  ==  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset  +  length]  ==  0x80)  {	  if(buffer    ==    null    ||    buffer[offset    +    length]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	133	None	replace
306	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset  +  length]!=  0x90)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset  +  length]!=  0x90)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset  +  length]!=  0x90)  {	  if(buffer    ==    null    ||    buffer[offset    +    length]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	133	None	replace
307	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset  +  length]  >=  0x80)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset  +  length]  >=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset  +  length]  >=  0x80)  {	  if(buffer    ==    null    ||    buffer[offset    +    length]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	133	None	replace
308	[BUG]  [BUGGY]  if(buffered  ==  null  ||  buffer[offset  +  length]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffered  ==  null  ||  buffer[offset  +  length]!=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffered  ==  null  ||  buffer[offset  +  length]!=  0x80)  {	  if(buffer    ==    null    ||    buffer[offset    +    length]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	133	None	replace
309	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  <  =  length)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0  ||  buffer.length  <  =  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0  ||  buffer.length  <  =  length)  {	  if(length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
310	[BUG]  [BUGGY]  if(length  ==  64)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  64)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  64)  {	  if(length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
311	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x90)  ==  0)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x90)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(buffer[offset]  &  0x90)  ==  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x90)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
312	[BUG]  [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x90)  ==  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x90)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0  ||(buffer[offset]  &  0x90)  ==  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x90)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
313	[BUG]  [BUGGY]  if(length  >=  0  ||(buffer[offset]  &  0x90)  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(buffer[offset]  &  0x90)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(buffer[offset]  &  0x90)  ==  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x90)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
314	[BUG]  [BUGGY]  if(length  <  0x80  ||(buffer[offset]  &  0x80)  >=  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0x80  ||(buffer[offset]  &  0x80)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0x80  ||(buffer[offset]  &  0x80)  >=  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x80)    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	110	None	replace
315	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x800)  ==  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x800)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(buffer[offset]  &  0x800)  ==  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x800)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
316	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x80)  ==  0)  {	  if((    buffer[offset]    &    0x80)!=    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
317	[BUG]  [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	21	None	replace
318	[BUG]  [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >	  if(length    <    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	21	None	replace
319	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||  buffer.length  >  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||  buffer.length  >  0)  {	  if(length    <    =    0    ||    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	136	None	replace
320	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  <  =  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  <  =  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||  buffer.length  <  =  0)  {	  if(length    <    =    0    ||    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	136	None	replace
321	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0  ||  buffer.length  >  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0  ||  buffer.length  >  0)  {	  if(length    <    =    0    ||    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	136	None	replace
322	[BUG]  [BUGGY]  if(length  <  0  ||  buffer.length  ==  length)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||  buffer.length  ==  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||  buffer.length  ==  length)  {	  if(length    <    =    0    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
323	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[offset  +  length]  ==  length)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||  buffer[offset  +  length]  ==  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||  buffer[offset  +  length]  ==  length)  {	  if(length    <    =    0    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
324	[BUG]  [BUGGY]  if(offset  <  =  0  ||  buffer.length  ==  length)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(offset  <  =  0  ||  buffer.length  ==  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(offset  <  =  0  ||  buffer.length  ==  length)  {	  if(length    <    =    0    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
325	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  >=  offset)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  >=  offset)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||  buffer.length  >=  offset)  {	  if(length    <    =    0    ||    buffer.length    ==    length)    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
326	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x100)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x100)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]!=  0x100)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x90)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
327	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer[offset]!=  0x90)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer!=  null  ||  buffer[offset]!=  0x90)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer!=  null  ||  buffer[offset]!=  0x90)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x90)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
328	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  >=  0x90)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  >=  0x90)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]  >=  0x90)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x90)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
329	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x20)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x20)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]!=  0x20)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x90)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
330	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >=  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >=  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >=  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    >=    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	75	None	replace
331	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >=  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >=  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >=  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    >=    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	75	None	replace
332	[BUG]  [BUGGY]  if(length  <  0  ||(offset  >=  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  >=  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  >=  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    >=    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	75	None	replace
333	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  ==  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  ==  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  ==  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    >=    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	75	None	replace
334	[BUG]  [BUGGY]  if(length  <  0  ||(offset  >=  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  >=  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  >=  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    >=    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	75	None	replace
335	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >=  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >=  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >=  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >	  if(length    <    =    0    ||(offset    >=    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	75	None	replace
336	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  >  offset)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  >  offset)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||  buffer.length  >  offset)  {	  if(length    <    =    0    ||    buffer.length    >    length)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
337	[BUG]  [BUGGY]  if(length  >=  0  ||  buffer.length  <  =  length)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||  buffer.length  <  =  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||  buffer.length  <  =  length)  {	  if(length    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
338	[BUG]  [BUGGY]  if(length  >=  0  ||  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||  buffer.length  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||  buffer.length  ==  0)  {	  if(length    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
339	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x7f)  ==  0)  {	  if((    buffer[offset]    &    0x7f)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
340	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x7f)  ==  0  ||(buffer[offset]  &  0x7f)!=  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x7f)  ==  0  ||(buffer[offset]  &  0x7f)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x7f)  ==  0  ||(buffer[offset]  &  0x7f)!=  0)  {	  if((    buffer[offset]    &    0x7f)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
341	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x7f)  >=  0)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x7f)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x7f)  >=  0)  {	  if((    buffer[offset]    &    0x7f)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
342	[BUG]  [BUGGY]  if((  length  &  0x7f)!=  0)  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  length  &  0x7f)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  length  &  0x7f)!=  0)  {	  if((    buffer[offset]    &    0x7f)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
343	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  offset;  i  <  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  offset;  i  <  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[offset    +    i]!=    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
344	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  start;  i  <  offset;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  start;  i  <  offset;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[offset    +    i]!=    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
345	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset  +  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  start;  i  <  offset  +  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  start;  i  <  offset  +  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[offset    +    i]!=    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
346	[BUG]  [BUGGY]  final  int  i  =  start;  i  <  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  i  =  start;  i  <  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  i  =  start;  i  <  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[offset    +    i]!=    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
347	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  length;  i++)  {  if(buffer[offset  +  i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  0;  i  <  length;  i++)  {  if(buffer[offset  +  i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  0;  i  <  length;  i++)  {  if(buffer[offset  +  i]!=  0)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[offset    +    i]!=    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
348	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  1;  i  <  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  1;  i  <  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[offset    +    i]!=    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
349	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x100)  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x100)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x100)  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x90)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
350	[BUG]  [BUGGY]  if(buffer!=  null  ||(buffer[offset]  &  0x90)  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer!=  null  ||(buffer[offset]  &  0x90)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer!=  null  ||(buffer[offset]  &  0x90)  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x90)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
351	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  offset;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  offset;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
352	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  start;  i  <  offset;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  start;  i  <  offset;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
353	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  0;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  0;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
354	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  1;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  1;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
355	[BUG]  [BUGGY]  int  i  =  start;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  int  i  =  start;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	int  i  =  start;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
356	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset  +  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  start;  i  <  offset  +  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  start;  i  <  offset  +  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
357	[BUG]  [BUGGY]  if(length  ==  0x80  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0x80  ||  buffer[offset]!=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0x80  ||  buffer[offset]!=  0x80)  {	  if(bytes    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	134	None	replace
358	[BUG]  [BUGGY]  if(buff[offset]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buff[offset]  ==  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buff[offset]  ==  0x80)  {	  if(bytes    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	134	None	replace
359	[BUG]  [BUGGY]  final  int  length  =  getLength()  +  1;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  getLength()  +  1;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  getLength()  +  1;	  final    int    length    =    getLength();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
360	[BUG]  [BUGGY]  final  int  length  =  getLength()  -  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  getLength()  -  1;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  getLength()  -  1;	  final    int    length    =    getLength();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
361	[BUG]  [BUGGY]  final  int  length  =  getLength()  *  2;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  getLength()  *  2;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  getLength()  *  2;	  final    int    length    =    getLength();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
362	[BUG]  [BUGGY]  final  int  length  =  getLength()  *  BYTE_MASK;  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  getLength()  *  BYTE_MASK;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  getLength()  *  BYTE_MASK;	  final    int    length    =    getLength();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
363	[BUG]  [BUGGY]  final  int  length  =  getLength()  -  2;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  getLength()  -  2;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  getLength()  -  2;	  final    int    length    =    getLength();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
364	[BUG]  [BUGGY]  final  int  length  =  getLength()  *  4;  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  getLength()  *  4;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  getLength()  *  4;	  final    int    length    =    getLength();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
365	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7F)!=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7F)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x7F)!=  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
366	[BUG]  [BUGGY]  if(length  <  0x80  ||(buffer[offset]  &  0x7F)  ==  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0x80  ||(buffer[offset]  &  0x7F)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0x80  ||(buffer[offset]  &  0x7F)  ==  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
367	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7F)  >=  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7F)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x7F)  >=  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
368	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7FF)  ==  0)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7FF)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x7FF)  ==  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
369	[BUG]  [BUGGY]  if(length  ==  0x80  ||(buffer[offset]  &  0x7F)  ==  0)  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0x80  ||(buffer[offset]  &  0x7F)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0x80  ||(buffer[offset]  &  0x7F)  ==  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
370	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x90)!=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x90)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(buffer[offset]  &  0x90)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x90)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
371	[BUG]  [BUGGY]  if(length  >=  0  ||(buffer[offset]  &  0x90)!=  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(buffer[offset]  &  0x90)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(buffer[offset]  &  0x90)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x90)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
372	[BUG]  [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x90)!=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0  ||(buffer[offset]  &  0x90)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0  ||(buffer[offset]  &  0x90)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x90)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	117	None	replace
373	[BUG]  [BUGGY]  if(length  <  =  0x80  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x80  ||  buffer[offset]!=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x80  ||  buffer[offset]!=  0x80)  {	  if(bounded    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
374	[BUG]  [BUGGY]  if(buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer[offset]!=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer[offset]!=  0x80)  {	  if(bounded    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
375	[BUG]  [BUGGY]  if(length  >=  0x80  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0x80  ||  buffer[offset]!=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0x80  ||  buffer[offset]!=  0x80)  {	  if(bounded    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
376	[BUG]  [BUGGY]  if(length  >  0x7f  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >  0x7f  ||  buffer[offset]!=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >  0x7f  ||  buffer[offset]!=  0x80)  {	  if(bounded    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
377	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x80)  ==  0  &&(buffer[offset]  &  0x7f)  <  =  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x80)  ==  0  &&(buffer[offset]  &  0x7f)  <  =  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x80)  ==  0  &&(buffer[offset]  &  0x7f)  <  =  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    ||(buffer[offset]    &    0x7f)    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	113	None	replace
378	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x7f)  <  =  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x7f)  <  =  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x7f)  <  =  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    ||(buffer[offset]    &    0x7f)    <    =    0)    {    	non-compiled	[CE]  <identifier>  expected	113	None	replace
379	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x7f)  ==  0  &&(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x7f)  ==  0  &&(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x7f)  ==  0  &&(buffer[offset]  &  0x7f)  ==  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    &&(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
380	[BUG]  [BUGGY]  if((  offset]  &  0x80)  ==  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x80)  ==  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x80)  ==  0  ||(buffer[offset]  &  0x7f)  ==  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    &&(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
381	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x7f)!=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x7f)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x7f)!=  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    ||(buffer[offset]    &    0x7f)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
382	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	87	None	replace
383	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	87	None	replace
384	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer[offset]!=  0x800)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer!=  null  ||  buffer[offset]!=  0x800)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer!=  null  ||  buffer[offset]!=  0x800)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x800)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
385	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x8000)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x8000)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]!=  0x8000)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x800)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
386	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  >=  0x800)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  >=  0x800)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]  >=  0x800)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x800)    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
387	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	109	None	replace
388	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  =  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  start;  i  <  =  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  start;  i  <  =  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[offset    +    i]!=    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
389	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  length;  i++)  {  if(buffer[offset  +  i]  ==  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  start;  i  <  length;  i++)  {  if(buffer[offset  +  i]  ==  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  start;  i  <  length;  i++)  {  if(buffer[offset  +  i]  ==  length)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[offset    +    i]!=    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
390	[BUG]  [BUGGY]  if(length  >=  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	82	None	replace
391	[BUG]  [BUGGY]  if(length  >=  0  ||  buffer.length  >=  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||  buffer.length  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||  buffer.length  >=  0)  {	  if(length    <    =    0    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
392	[BUG]  [BUGGY]  if(offset  <  =  0  ||  buffer.length  >=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(offset  <  =  0  ||  buffer.length  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(offset  <  =  0  ||  buffer.length  >=  0)  {	  if(length    <    =    0    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
393	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x7f)  >=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x7f)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x80)!=  0  &&(buffer[offset]  &  0x7f)  >=  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    ||(buffer[offset]    &    0x7f)    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	114	None	replace
394	[BUG]  [BUGGY]  if(offset  <  0  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(offset  <  0  ||  length  >  buffer.length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(offset  <  0  ||  length  >  buffer.length)  {	  if(length    <    =    0    ||    buffer.length    >    length)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
395	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer    	non-compiled	[CE]  <identifier>  expected	100	None	replace
396	[BUG]  [BUGGY]  if(buffer!=  null  ||  buffer[offset  +  length]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer!=  null  ||  buffer[offset  +  length]  ==  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer!=  null  ||  buffer[offset  +  length]  ==  0x80)  {	  if(buffer    ==    null    ||    buffer[offset    +    length]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	133	None	replace
397	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset  +  length]!=  0x7F)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset  +  length]!=  0x7F)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset  +  length]!=  0x7F)  {	  if(buffer    ==    null    ||    buffer[offset    +    length]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	133	None	replace
398	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x7FF)!=  0)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x7FF)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0x7FF)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
399	[BUG]  [BUGGY]  if(length  >=  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	73	None	replace
400	[BUG]  [BUGGY]  if(length  >=  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	73	None	replace
401	[BUG]  [BUGGY]  if(length  >=  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	73	None	replace
402	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]!=  0x800))  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]!=  0x800))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]!=  0x800))  {	  if(buffer    ==    null    ||(buffer[offset]    >>    0x80))    {    	non-compiled	[CE]  <identifier>  expected	124	None	replace
403	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	87	None	replace
404	[BUG]  [BUGGY]  if(length  >>  0  &&(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >>  0  &&(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >>  0  &&(buffer[offset]  &  0x80)!=  0)  {	  if(length    >=    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
405	[BUG]  [BUGGY]  if(byte[offset]!=  null  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(byte[offset]!=  null  ||  buffer[offset]!=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(byte[offset]!=  null  ||  buffer[offset]!=  0x80)  {	  if(bytes    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	134	None	replace
406	[BUG]  [BUGGY]  if(byteArray[offset]!=  null  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(byteArray[offset]!=  null  ||  buffer[offset]!=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(byteArray[offset]!=  null  ||  buffer[offset]!=  0x80)  {	  if(bytes    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	134	None	replace
407	[BUG]  [BUGGY]  if(block  ==  null  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(block  ==  null  ||  buffer[offset]!=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(block  ==  null  ||  buffer[offset]!=  0x80)  {	  if(bytes    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	134	None	replace
408	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  ==  0x80)||  buffer[offset]  ==  0x7F)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  ==  0x80)||  buffer[offset]  ==  0x7F)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  ==  0x80)||  buffer[offset]  ==  0x7F)  {	  if(buffer    ==    null    ||(buffer[offset]    {    0x80))    {    	non-compiled	[CE]  <identifier>  expected	125	None	replace
409	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  ==  0x80)||  buffer[offset]!=  0x7F)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  ==  0x80)||  buffer[offset]!=  0x7F)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  ==  0x80)||  buffer[offset]!=  0x7F)  {	  if(buffer    ==    null    ||(buffer[offset]    {    0x80))    {    	non-compiled	[CE]  <identifier>  expected	125	None	replace
410	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]  &  0x80)  >=  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x7F  ||(buffer[offset]  &  0x80)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x7F  ||(buffer[offset]  &  0x80)  >=  0)  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	111	None	replace
411	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer[offset],  length)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer[offset],  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer[offset],  length)  {	  if((    offset    +    length)>    buffer[offset])    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
412	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer[offset]  ||(offset  +  length)>  buffer[offset])  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer[offset]  ||(offset  +  length)>  buffer[offset])  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer[offset]  ||(offset  +  length)>  buffer[offset])  {	  if((    offset    +    length)>    buffer[offset])    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
413	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer[offset]  ||(offset  +  length)>  buffer[offset+length))  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer[offset]  ||(offset  +  length)>  buffer[offset+length))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer[offset]  ||(offset  +  length)>  buffer[offset+length))  {	  if((    offset    +    length)>    buffer[offset])    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
414	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer[offset,  length)  {  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer[offset,  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer[offset,  length)  {	  if((    offset    +    length)>    buffer[offset])    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
415	[BUG]  [BUGGY]  read()  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  read()  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	read()  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value   ");    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
416	[BUG]  [BUGGY]  allowNull(byte)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  allowNull(byte)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	allowNull(byte)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value   ");    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
417	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >=  0x80)&&  buffer[offset]!=  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >=  0x80)&&  buffer[offset]!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  >=  0x80)&&  buffer[offset]!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    <    0x80)||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	126	None	replace
418	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  +  0x800)  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  +  0x800)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  +  0x800)  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x800)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
419	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x800))  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x800))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  <  0x800))  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x800)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
420	[BUG]  [BUGGY]  if(offset  >=  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(offset  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(offset  >=  0)  {	  if(length    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
421	[BUG]  [BUGGY]  if(length  >>  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >>  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >>  0)  {	  if(length    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
422	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >>  0x80)||  buffer[offset]  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >>  0x80)||  buffer[offset]  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  >>  0x80)||  buffer[offset]  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    <    0x80)||    buffer[offset]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	128	None	replace
423	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >  0x80)||  buffer[offset]  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >  0x80)||  buffer[offset]  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  >  0x80)||  buffer[offset]  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    <    0x80)||    buffer[offset]    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	128	None	replace
424	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x800)  >=  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x800)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x800)  >=  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x800)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	47	None	replace
425	[BUG]  [BUGGY]  if(length  >=  0  ||  buffer.length!=  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||  buffer.length!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||  buffer.length!=  0)  {	  if(length    <    =    0    ||    buffer.length!=    0)    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
426	[BUG]  [BUGGY]  if(length!=  0  ||  buffer.length!=  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length!=  0  ||  buffer.length!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length!=  0  ||  buffer.length!=  0)  {	  if(length    <    =    0    ||    buffer.length!=    0)    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
427	[BUG]  [BUGGY]  if(buffered  ==  null  ||  buffer[offset]!=  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffered  ==  null  ||  buffer[offset]!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffered  ==  null  ||  buffer[offset]!=  0)  {	  if(buffered    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
428	[BUG]  [BUGGY]  if(bytes  ==  null  ||  buffer[offset]!=  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(bytes  ==  null  ||  buffer[offset]!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(bytes  ==  null  ||  buffer[offset]!=  0)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
429	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset],  length  >  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset],  length  >  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset],  length  >  0)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
430	[BUG]  [BUGGY]  if(offset  <  =  0  ||  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(offset  <  =  0  ||  buffer.length  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(offset  <  =  0  ||  buffer.length  ==  0)  {	  if(length    <    =    0    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
431	[BUG]  [BUGGY]  if(length  >>  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >>  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >>  0  &&(buffer[offset]  &  0x80)  ==  0)  {	  if(length    >=    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
432	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7FF)!=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7FF)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x7FF)!=  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
433	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  0x7F)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  0x7F)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]  ==  0x7F)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x7F)    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
434	[BUG]  [BUGGY]  if(length  >  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    <    length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	7	None	replace
435	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7FF)!=  0)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7FF)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x7FF)!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
436	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(length,  offset);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(length,  offset);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(length,  offset);	  final    byte[]    buffer    =    getBytes(offset,    length);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
437	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	72	None	replace
438	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  +  length  +  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  +  length  +  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  +  length  +  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	72	None	replace
439	[BUG]  [BUGGY]  final  byte[]  buffer  =  getByteArray(offset);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getByteArray(offset);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getByteArray(offset);	  final    byte[]    buffer    =    getByteArray();    	non-compiled	[CE]  <identifier>  expected	98	None	replace
440	[BUG]  [BUGGY]  final  byte[]  buffer  =  getByteArray().clone();  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getByteArray().clone();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getByteArray().clone();	  final    byte[]    buffer    =    getByteArray();    	non-compiled	[CE]  <identifier>  expected	98	None	replace
441	[BUG]  [BUGGY]  if(length  >  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	14	None	replace
442	[BUG]  [BUGGY]  final  int  length  =  buffer.length  &  0x7f;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length  &  0x7f;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length  &  0x7f;	  final    int    length    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	94	None	replace
443	[BUG]  [BUGGY]  final  int  length  =  buffer.length  &  0x7F;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length  &  0x7F;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length  &  0x7F;	  final    int    length    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	94	None	replace
444	[BUG]  [BUGGY]  if(bounded  &&  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(bounded  &&  buffer[offset]!=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(bounded  &&  buffer[offset]!=  0x80)  {	  if(bounded    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
445	[BUG]  [BUGGY]  if(length  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ||  buffer[offset]!=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ||  buffer[offset]!=  0x80)  {	  if(bounded    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
446	[BUG]  [BUGGY]  if(length  <  =  0x7F  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x7F  ||  buffer[offset]!=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x7F  ||  buffer[offset]!=  0x80)  {	  if(bounded    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
447	[BUG]  [BUGGY]  if(buffer[offset]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer[offset]  ==  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer[offset]  ==  0x80)  {	  if(bounded    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
448	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x800)  ==  0  ||(buffer[offset]  &  0x7f)!=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x800)  ==  0  ||(buffer[offset]  &  0x7f)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x800)  ==  0  ||(buffer[offset]  &  0x7f)!=  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    ||(buffer[offset]    &    0x7f)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
449	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x10)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x10)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]!=  0x10)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x90)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
450	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(offset)+  1;  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(offset)+  1;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(offset)+  1;	  final    byte[]    buffer    =    getBytes(offset);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
451	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset  +  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  start;  i  <  offset  +  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  start;  i  <  offset  +  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value.   ");    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
452	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x80)  >=  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x80)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(buffer[offset]  &  0x80)  >=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
453	[BUG]  [BUGGY]  final  int  length  =  getUpperBound();  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  getUpperBound();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  getUpperBound();	  final    int    length    =    getLength();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
454	[BUG]  [BUGGY]  final  int  length  =  getEnd();  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  getEnd();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  getEnd();	  final    int    length    =    getLength();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
455	[BUG]  [BUGGY]  final  int  length  =  getLength()  +  2;  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  getLength()  +  2;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  getLength()  +  2;	  final    int    length    =    getLength();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
456	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80)||  buffer[offset]  >  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80)||  buffer[offset]  >  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  <  0x80)||  buffer[offset]  >  0)  {	  if(buffer    ==    null    ||(buffer[offset]    <    0x80)||    buffer[offset]    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	127	None	replace
457	[BUG]  [BUGGY]  final  int  offset  =  getOffsetToInt(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  offset  =  getOffsetToInt(buffer,  offset,  length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  offset  =  getOffsetToInt(buffer,  offset,  length);	  final    int    offset    =    getOffset(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	53	None	replace
458	[BUG]  [BUGGY]  final  int  val  =  getOctalValue();  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  val  =  getOctalValue();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  val  =  getOctalValue();	  final    int    val    =    getValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
459	[BUG]  [BUGGY]  final  int  val  =  getValue()  +  length;  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  val  =  getValue()  +  length;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  val  =  getValue()  +  length;	  final    int    val    =    getValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
460	[BUG]  [BUGGY]  final  int  length  =  buffer.length  -  offset,  length;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length  -  offset,  length;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length  -  offset,  length;	  final    int    length    =    buffer.length    -    offset;    	non-compiled	[CE]  <identifier>  expected	95	None	replace
461	[BUG]  [BUGGY]  final  int  length  =  buffer.length()  +  offset;  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length()  +  offset;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length()  +  offset;	  final    int    length    =    buffer.length();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
462	[BUG]  [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  buffer.length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	83	None	replace
463	[BUG]  [BUGGY]  if(length  <  =  0x800  ||(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x800  ||(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x800  ||(buffer[offset]  &  0x7f)  ==  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
464	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x7f)!=  0  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x7f)!=  0  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x7f)!=  0  ||(buffer[offset]  &  0x80)!=  0)  {	  if((    buffer[offset]    &    0x7f)    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
465	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer.length  ||(buffer.length  +  length)>  buffer.length)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer.length  ||(buffer.length  +  length)>  buffer.length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer.length  ||(buffer.length  +  length)>  buffer.length)  {	  if((    offset    +    length)>    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
466	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer.length  ||(offset  +  length)>  buffer[offset  +  length))  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer.length  ||(offset  +  length)>  buffer[offset  +  length))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer.length  ||(offset  +  length)>  buffer[offset  +  length))  {	  if((    offset    +    length)>    buffer.length)    {    	non-compiled	[CE]  <identifier>  expected	69	None	replace
467	[BUG]  [BUGGY]  allowNumber(length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  allowNumber(length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	allowNumber(length)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
468	[BUG]  [BUGGY]  read()  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  read()  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	read()  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
469	[BUG]  [BUGGY]  allowNumberOctal(length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  allowNumberOctal(length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	allowNumberOctal(length)  {  throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
470	[BUG]  [BUGGY]  allowNumber(length)  {  throw  new  IllegalArgumentException( " ".equals(buffer);  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  allowNumber(length)  {  throw  new  IllegalArgumentException( " ".equals(buffer);  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	allowNumber(length)  {  throw  new  IllegalArgumentException( " ".equals(buffer);  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
471	[BUG]  [BUGGY]  Parchet.checkNotNull(buffer);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  Parchet.checkNotNull(buffer);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	Parchet.checkNotNull(buffer);	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
472	[BUG]  [BUGGY]  if(length  <  =  0  &&(buffer[offset]  &  0x7f)!=  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  &&(buffer[offset]  &  0x7f)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  &&(buffer[offset]  &  0x7f)!=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x7f)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
473	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x800)!=  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x800)!=  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x800)!=  0  &&(buffer[offset]  &  0x80)  ==  0)  {	  if((    buffer[offset]    &    0x800)    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
474	[BUG]  [BUGGY]  if(length  >=  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	129	None	replace
475	[BUG]  [BUGGY]  read()  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  read()  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	read()  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value.   ");    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
476	[BUG]  [BUGGY]  if((  offset]  &  0x7F)!=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x7F)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x7F)!=  0)  {	  if((    offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
477	[BUG]  [BUGGY]  if((  offset]  &  0x800)!=  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x800)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x800)!=  0)  {	  if((    offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
478	[BUG]  [BUGGY]  if((  offset  +  length)!=  0)  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)!=  0)  {	  if((    offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
479	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x3f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x3f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x3f)  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
480	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x800)!=  0  &&(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x800)!=  0  &&(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x800)!=  0  &&(buffer[offset]  &  0x7f)  ==  0)  {	  if((    buffer[offset]    &    0x80)!=    0    &&(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
481	[BUG]  [BUGGY]  if((  offset]  &  0x80)  ==  0  &&(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x80)  ==  0  &&(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x80)  ==  0  &&(buffer[offset]  &  0x7f)  ==  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    &&(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
482	[BUG]  [BUGGY]  if(offset  <  =  0  ||  buffer.length  <  =  length)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(offset  <  =  0  ||  buffer.length  <  =  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(offset  <  =  0  ||  buffer.length  <  =  length)  {	  if(length    <    =    0    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	135	None	replace
483	[BUG]  [BUGGY]  if(buffer  ==  null  ||  offset  <  =  length)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  offset  <  =  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  offset  <  =  length)  {	  if(length    <    =    0    ||    buffer.length    <    =    length)    {    	non-compiled	[CE]  <identifier>  expected	135	None	replace
484	[BUG]  [BUGGY]  if(length  >=  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	108	None	replace
485	[BUG]  [BUGGY]  if((  offset  +  length)  ==  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)  ==  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)  ==  0  &&(buffer[offset]  &  0x80)  ==  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    &&(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
486	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x7F)  ==  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x7F)  ==  0  &&(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x7F)  ==  0  &&(buffer[offset]  &  0x80)  ==  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    &&(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
487	[BUG]  [BUGGY]  if((  offset  +  length)  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)  ==  0)  {	  if((    offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
488	[BUG]  [BUGGY]  if(length  >  0  ||  buffer.length  >  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >  0  ||  buffer.length  >  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >  0  ||  buffer.length  >  0)  {	  if(length    <    =    0    ||    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	136	None	replace
489	[BUG]  [BUGGY]  final  byte[]  buffer  =  getOctalCharBuffer();  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getOctalCharBuffer();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getOctalCharBuffer();	  final    byte[]    buffer    =    getByteBuffer();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
490	[BUG]  [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x7F)!=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(buffer[offset]  &  0x7F)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(buffer[offset]  &  0x7F)!=  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
491	[BUG]  [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer	  if(length    <    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	21	None	replace
492	[BUG]  [BUGGY]  byte[]  buffer  =  getBytes(buffer,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  byte[]  buffer  =  getBytes(buffer,  offset,  length  -  2);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	byte[]  buffer  =  getBytes(buffer,  offset,  length  -  2);	  byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
493	[BUG]  [BUGGY]  byte[]  buffer  =  parseOctal(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  byte[]  buffer  =  parseOctal(buffer,  offset,  length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	byte[]  buffer  =  parseOctal(buffer,  offset,  length);	  byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
494	[BUG]  [BUGGY]  byte[]  buffer  =  parseBytes(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  byte[]  buffer  =  parseBytes(buffer,  offset,  length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	byte[]  buffer  =  parseBytes(buffer,  offset,  length);	  byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
495	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset,  length  -  2);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset,  length  -  2);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(buffer,  offset,  length  -  2);	  final    byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
496	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  4);  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  4);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(buffer,  offset,  length  +  4);	  final    byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
497	[BUG]  [BUGGY]  if(length  <  =  0x800  ||(buffer[offset]  &  0x80)  >=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x800  ||(buffer[offset]  &  0x80)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x800  ||(buffer[offset]  &  0x80)  >=  0)  {	  if(length    <    =    0x800    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	112	None	replace
498	[BUG]  [BUGGY]  if(length  <  =  0x800  ||(buffer[offset]  +  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x800  ||(buffer[offset]  +  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x800  ||(buffer[offset]  +  0x80)  ==  0)  {	  if(length    <    =    0x800    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	112	None	replace
499	[BUG]  [BUGGY]  if(length  >=  0  ||(buffer[offset]  &  0x80)  >=  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(buffer[offset]  &  0x80)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(buffer[offset]  &  0x80)  >=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
500	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x80)  >>  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x80)  >>  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0x80)  >>  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x80)    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
501	[BUG]  [BUGGY]  if(bytes  ==  null  ||  buffer[offset]  ==  0x80)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(bytes  ==  null  ||  buffer[offset]  ==  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(bytes  ==  null  ||  buffer[offset]  ==  0x80)  {	  if(buffer    ==    null    ||    buffer[offset]    ==    0x80)    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
502	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	1	None	replace
503	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	1	None	replace
504	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	1	None	replace
505	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	103	None	replace
506	[BUG]  [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	103	None	replace
507	[BUG]  [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	103	None	replace
508	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	103	None	replace
509	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x800)  >=  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x800)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0x800)  >=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x800)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
510	[BUG]  [BUGGY]  if((  offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if((    buffer[offset]    &    0x80)!=    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
511	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  1;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  1;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( "Byte  number  exceeds  maximum  signed  value.   ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value.   ");    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
512	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	104	None	replace
513	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	104	None	replace
514	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	104	None	replace
515	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	104	None	replace
516	[BUG]  [BUGGY]  final  byte[]  buffer  =  getByteBuffer(buffer,  offset,  length);  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getByteBuffer(buffer,  offset,  length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getByteBuffer(buffer,  offset,  length);	  final    byte[]    buffer    =    getByteBuffer();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
517	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >  0x80)||  buffer[offset]  >=  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >  0x80)||  buffer[offset]  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  >  0x80)||  buffer[offset]  >=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    <    0x80)||    buffer[offset]    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	127	None	replace
518	[BUG]  [BUGGY]  if((  offset]  &  0x80)  >=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x80)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x80)  >=  0)  {	  if((    offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	68	None	replace
519	[BUG]  [BUGGY]  if(length  <  =(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =(buffer[offset]  &  0x80)  ==  0)  {	  if(length    <    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	8	None	replace
520	[BUG]  [BUGGY]  if(length  >=  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	73	None	replace
521	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer    	non-compiled	[CE]  <identifier>  expected	100	None	replace
522	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer    	non-compiled	[CE]  <identifier>  expected	100	None	replace
523	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	99	None	replace
524	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	106	None	replace
525	[BUG]  [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	106	None	replace
526	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >>  0x800))  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >>  0x800))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  >>  0x800))  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x800)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
527	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  {  0x800))  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  {  0x800))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  {  0x800))  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x800)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
528	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  +  length)  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  +  length)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  +  length)  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x800)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
529	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >=  0x800))  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >=  0x800))  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  >=  0x800))  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x800)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
530	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	105	None	replace
531	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	116	None	replace
532	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	116	None	replace
533	[BUG]  [BUGGY]  if(length  >=  0  ||  buffer.length!=  length)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||  buffer.length!=  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||  buffer.length!=  length)  {	  if(length    <    =    0    ||    buffer.length!=    length)    {    	non-compiled	[CE]  <identifier>  expected	137	None	replace
534	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x80)>  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x80)>  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x80)>  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x80)    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	110	None	replace
535	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x80)  >>  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x80)  >>  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x80)  >>  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x80)    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	110	None	replace
536	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x10FF)  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x10FF)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x10FF)  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x90)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
537	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7f)>  length)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7f)>  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x7f)>  length)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
538	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7f)  >>  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x7f)  >>  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x7f)  >>  0)  {	  if(length    <    =    0x80    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	46	None	replace
539	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    <    length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	7	None	replace
540	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    <    length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	7	None	replace
541	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    <    length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	7	None	replace
542	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  <  length  &&  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  <  length  &&  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  <  length  &&  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    <    length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	7	None	replace
543	[BUG]  [BUGGY]  if(length  >=  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    <    length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	7	None	replace
544	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  <  length  &&  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  <  length  &&  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  <  length  &&  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    <    length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	7	None	replace
545	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    <    length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	7	None	replace
546	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x7f)  <  =  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x7f)  <  =  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x7f)  <  =  0)  {	  if((    buffer[offset]    &    0x80)!=    0    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
547	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x7f)  >=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x7f)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x7f)  >=  0)  {	  if((    buffer[offset]    &    0x80)!=    0    ||(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
548	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  >  6)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  >  6)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||  buffer.length  >  6)  {	  if(length    <    =    0    ||    buffer.length    >    0)    {    	non-compiled	[CE]  <identifier>  expected	136	None	replace
549	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	130	None	replace
550	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	130	None	replace
551	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	130	None	replace
552	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	130	None	replace
553	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	130	None	replace
554	[BUG]  [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	102	None	replace
555	[BUG]  [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	102	None	replace
556	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	102	None	replace
557	[BUG]  [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	102	None	replace
558	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	102	None	replace
559	[BUG]  [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	102	None	replace
560	[BUG]  [BUGGY]  if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	108	None	replace
561	[BUG]  [BUGGY]  if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	108	None	replace
562	[BUG]  [BUGGY]  if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >=  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    >=    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	108	None	replace
563	[BUG]  [BUGGY]  if(length  <  =  0x7FF  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0x7FF  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x7FF  ||(buffer[offset]  &  0x80)!=  0)  {	  if(length    <    =    0x7F    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	111	None	replace
564	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer[offset++])  {  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer[offset++])  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer[offset++])  {	  if((    offset    +    length)>    buffer[offset])    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
565	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer[offset]  ||(offset  +  length)>  buffer.length)  {  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer[offset]  ||(offset  +  length)>  buffer.length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer[offset]  ||(offset  +  length)>  buffer.length)  {	  if((    offset    +    length)>    buffer[offset])    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
566	[BUG]  [BUGGY]  if((  offset  +  length)>  buffer[offset.length])  {  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)>  buffer[offset.length])  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)>  buffer[offset.length])  {	  if((    offset    +    length)>    buffer[offset])    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
567	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||  buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||  buffer[offset]  &  0x7f)  ==  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x7f)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
568	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  90)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  90)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]!=  90)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0x90)    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
569	[BUG]  [BUGGY]  if(length  <  0  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
570	[BUG]  [BUGGY]  if(length  <  0  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
571	[BUG]  [BUGGY]  if(length  <  0  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
572	[BUG]  [BUGGY]  if(length  <  0  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
573	[BUG]  [BUGGY]  if(length  <  0  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||  offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	  if(length    <    0)    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
574	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x75)  ==  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x75)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x75)  ==  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x78)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	29	None	replace
575	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(byte,  offset,  length);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(byte,  offset,  length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(byte,  offset,  length);	  final    byte[]    buffer    =    getBytes(buffer,    offset,    length);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
576	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBytes(byte_MASK,  offset,  length);  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getBytes(byte_MASK,  offset,  length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getBytes(byte_MASK,  offset,  length);	  final    byte[]    buffer    =    getBytes(offset,    length);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
577	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	76	None	replace
578	[BUG]  [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	76	None	replace
579	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	14	None	replace
580	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	14	None	replace
581	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	14	None	replace
582	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	14	None	replace
583	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	14	None	replace
584	[BUG]  [BUGGY]  if((  offset]  &  0x80)  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x80)  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x80)  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    &&(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
585	[BUG]  [BUGGY]  if(length  ==  0  ||  buffer.length  >=  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  ==  0  ||  buffer.length  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  ==  0  ||  buffer.length  >=  0)  {	  if(length    <    =    0    ||    buffer.length    >=    0)    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
586	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  0;  i  <  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  0;  i  <  length;  i++)  {  if(buffer[offset  +  i]!=  length)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[offset    +    i]!=    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	119	None	replace
587	[BUG]  [BUGGY]  aughtInvalidOctalException( "Byte  number  exceeds  maximum  signed  value ");  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  aughtInvalidOctalException( "Byte  number  exceeds  maximum  signed  value ");  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	aughtInvalidOctalException( "Byte  number  exceeds  maximum  signed  value ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value   ");    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
588	[BUG]  [BUGGY]  aughtInvalidByte( "Byte  number  exceeds  maximum  signed  value ");  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  aughtInvalidByte( "Byte  number  exceeds  maximum  signed  value ");  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	aughtInvalidByte( "Byte  number  exceeds  maximum  signed  value ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value   ");    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
589	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Byte  number  exceeds  maximum  signed  value ");  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  aughtInvalidArgumentException( "Byte  number  exceeds  maximum  signed  value ");  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	aughtInvalidArgumentException( "Byte  number  exceeds  maximum  signed  value ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value   ");    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
590	[BUG]  [BUGGY]  final  int  length  =  buffer.length  &  0xff;  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  buffer.length  &  0xff;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  buffer.length  &  0xff;	  final    int    length    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	94	None	replace
591	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x80)  >=  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x80)  >=  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x80)  >=  0  ||(buffer[offset]  &  0x7f)  ==  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    &&(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
592	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x800)  ==  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x800)  ==  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x800)  ==  0  ||(buffer[offset]  &  0x7f)  ==  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    &&(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
593	[BUG]  [BUGGY]  final  int  val  =  getIntValue();  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  val  =  getIntValue();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  val  =  getIntValue();	  final    int    val    =    getValue();    	non-compiled	[CE]  <identifier>  expected	54	None	replace
594	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >  0x80)||  buffer[offset]!=  0)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  >  0x80)||  buffer[offset]!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  >  0x80)||  buffer[offset]!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
595	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80)||  length!=  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  <  0x80)||  length!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  <  0x80)||  length!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
596	[BUG]  [BUGGY]  if((  offset  +  length)  >>  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset  +  length)  >>  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset  +  length)  >>  0)  {	  if((    offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
597	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x7F)  ==  0  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x7F)  ==  0  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x7F)  ==  0  ||(buffer[offset]  &  0x80)!=  0)  {	  if((    buffer[offset]    &    0x80)    ==    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
598	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0x80)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer.length  <  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer.length  <  0x80)  {	  if(buffer!=    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
599	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x90)  >=  0)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x90)  >=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0x90)  >=  0)  {	  if(length    <    =    0    ||(buffer[offset]    &    0x90)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	115	None	replace
600	[BUG]  [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  +  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    +    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	72	None	replace
601	[BUG]  [BUGGY]  final  int  length  =  getLength()  >  0?  getLength()  :  0;  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  int  length  =  getLength()  >  0?  getLength()  :  0;  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  int  length  =  getLength()  >  0?  getLength()  :  0;	  final    int    length    =    getLength();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
602	[BUG]  [BUGGY]  final  byte[]  buffer  =  getOctalBinary();  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  final  byte[]  buffer  =  getOctalBinary();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	final  byte[]  buffer  =  getOctalBinary();	  final    byte[]    buffer    =    getByteArray();    	non-compiled	[CE]  <identifier>  expected	98	None	replace
603	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  null)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]  ==  null)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]  ==  null)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
604	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  null)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  null)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]!=  null)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
605	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset  +  length]!=  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||  buffer[offset  +  length]!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset  +  length]!=  0)  {	  if(buffer    ==    null    ||    buffer[offset]!=    0)    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
606	[BUG]  [BUGGY]  if((  offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  offset]  &  0x80)!=  0  ||(buffer[offset]  &  0x7f)  ==  0)  {	  if((    buffer[offset]    &    0x80)!=    0    &&(buffer[offset]    &    0x7f)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
607	[BUG]  [BUGGY]  if((  buffer[offset]  &  0x7f)  >=  0  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if((  buffer[offset]  &  0x7f)  >=  0  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if((  buffer[offset]  &  0x7f)  >=  0  ||(buffer[offset]  &  0x80)!=  0)  {	  if((    buffer[offset]    &    0x7f)    ==    0    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
608	[BUG]  [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	22	None	replace
609	[BUG]  [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	21	None	replace
610	[BUG]  [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	21	None	replace
611	[BUG]  [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	21	None	replace
612	[BUG]  [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length	  if(length    <    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	21	None	replace
613	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    <    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	5	None	replace
614	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
615	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(length);  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(length);  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	aught(new  IllegalArgumentException( " ")).initCause(length);	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
616	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).withMoreGuaranteed();  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  aught(new  IllegalArgumentException( " ")).withMoreGuaranteed();  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	aught(new  IllegalArgumentException( " ")).withMoreGuaranteed();	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
617	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(getMessage());  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  aught(new  IllegalArgumentException( " ")).initCause(getMessage());  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	aught(new  IllegalArgumentException( " ")).initCause(getMessage());	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
618	[BUG]  [BUGGY]  aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	aught(new  IllegalArgumentException( " ")).throw  new  IllegalArgumentException( " ");  }	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	93	None	replace
619	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7F)  <  =  0)  {  [CE]  <identifier>  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x7F)  <  =  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x7F)  <  =  0)  {	  if(buffer    ==    null    ||(buffer[offset]    &    0x7F)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
620	[BUG]  [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	131	None	replace
621	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    <    length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	65	None	replace
622	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    <    length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	65	None	replace
623	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    <    length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	65	None	replace
624	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    <    length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	65	None	replace
625	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    <    length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	65	None	replace
626	[BUG]  [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  <  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    <    length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    	non-compiled	[CE]  <identifier>  expected	65	None	replace
627	[BUG]  [BUGGY]  if(buffer[offset]  ==  0,  length)  {  for(int  i  =  start;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer[offset]  ==  0,  length)  {  for(int  i  =  start;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer[offset]  ==  0,  length)  {  for(int  i  =  start;  i  <  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
628	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  =  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  for(int  i  =  start;  i  <  =  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	for(int  i  =  start;  i  <  =  length;  i++)  {  if(buffer[i]  ==  0,  length)  {  throw  new  IllegalArgumentException( " ");  }	  for(int    i    =    start;    i    <    length;    i++)    {    if(buffer[i]    ==    0,    length)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	118	None	replace
629	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  ==  0x80)||  buffer[offset]!=  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  ==  0x80)||  buffer[offset]!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  ==  0x80)||  buffer[offset]!=  0)  {	  if(buffer    ==    null    ||(buffer[offset]    {    0x80))    {    	non-compiled	[CE]  <identifier>  expected	125	None	replace
630	[BUG]  [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    	non-compiled	[CE]  <identifier>  expected	85	None	replace
631	[BUG]  [BUGGY]  if(length  <  =  0  ||  buffer.length  >>  length)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||  buffer.length  >>  length)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||  buffer.length  >>  length)  {	  if(length    <    =    0    ||    buffer.length    >    length)    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
632	[BUG]  [BUGGY]  aughtInvalidOctalException( "Byte  number  exceeds  maximum  signed  value. ");  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  aughtInvalidOctalException( "Byte  number  exceeds  maximum  signed  value. ");  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	aughtInvalidOctalException( "Byte  number  exceeds  maximum  signed  value. ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value.   ");    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
633	[BUG]  [BUGGY]  aughtInvalidByte( "Byte  number  exceeds  maximum  signed  value. ");  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  aughtInvalidByte( "Byte  number  exceeds  maximum  signed  value. ");  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	aughtInvalidByte( "Byte  number  exceeds  maximum  signed  value. ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value.   ");    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
634	[BUG]  [BUGGY]  aughtInvalidArgumentException( "Byte  number  exceeds  maximum  signed  value. ");  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  aughtInvalidArgumentException( "Byte  number  exceeds  maximum  signed  value. ");  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	aughtInvalidArgumentException( "Byte  number  exceeds  maximum  signed  value. ");	  if(length    <    =    0)    {    throw    new    IllegalArgumentException(   "Byte    number    exceeds    maximum    signed    value.   ");    }    	non-compiled	[CE]  <identifier>  expected	121	None	replace
635	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	109	None	replace
636	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	109	None	replace
637	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	109	None	replace
638	[BUG]  [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	109	None	replace
639	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	109	None	replace
640	[BUG]  [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	109	None	replace
641	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    =    0    ||(offset    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	109	None	replace
642	[BUG]  [BUGGY]  if(length  >>  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  >>  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  >>  0  ||(buffer[offset]  &  0x80)  ==  0)  {	  if(length    >=    0    ||(buffer[offset]    &    0x80)!=    0)    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
643	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer.length  <  0x80)||  buffer[offset]!=  0)  {  [CE]  <identifier>  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer.length  <  0x80)||  buffer[offset]!=  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer.length  <  0x80)||  buffer[offset]!=  0)  {	  if(buffer!=    null    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
644	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer.length  <  0x80)||  buffer[offset]  ==  0)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer  ==  null  ||(buffer.length  <  0x80)||  buffer[offset]  ==  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer.length  <  0x80)||  buffer[offset]  ==  0)  {	  if(buffer!=    null    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
645	[BUG]  [BUGGY]  if(buffer!=  null  ||(buffer[offset]  &  0x80)  <  =  0)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(buffer!=  null  ||(buffer[offset]  &  0x80)  <  =  0)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer!=  null  ||(buffer[offset]  &  0x80)  <  =  0)  {	  if(buffer!=    null    ||(buffer[offset]    &    0x80)    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
646	[BUG]  [BUGGY]  if(byte[offset]  ==  null  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(byte[offset]  ==  null  ||  buffer[offset]!=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(byte[offset]  ==  null  ||  buffer[offset]!=  0x80)  {	  if(bytes    ==    null    ||    buffer[offset]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	134	None	replace
647	[BUG]  [BUGGY]  if(bytes  ==  null  ||  buffer[offset  +  length]!=  0x80)  {  [CE]  <identifier>  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(bytes  ==  null  ||  buffer[offset  +  length]!=  0x80)  {  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(bytes  ==  null  ||  buffer[offset  +  length]!=  0x80)  {	  if(buffer    ==    null    ||    buffer[offset    +    length]!=    0x80)    {    	non-compiled	[CE]  <identifier>  expected	133	None	replace
648	[BUG]  [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	132	None	replace
649	[BUG]  [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {      [BUGGY]  if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  [BUGGY]      return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(       "At  offset       "  +  offset  +       ",       "  +  length  +       "  byte       "  +       "binary  number  exceeds  maximum  signed  long  value     ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  0  ||(length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  length	  if(length    <    0    ||(length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    buffer.length    ||    length    >    length    	non-compiled	[CE]  <identifier>  expected	132	None	replace
