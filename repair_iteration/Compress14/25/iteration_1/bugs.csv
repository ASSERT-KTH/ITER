bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]    IOException  [CONTEXT]  public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]  return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(   "At  offset   "  +  offset  +   ",   "  +  length  +   "  byte   "  +   "binary  number  exceeds  maximum  signed  long  value ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0x80)  ==  0)  {	if  ((buffer[offset]  &  0x80)  ==  0)  {  	non-compiled	[CE]  <identifier>  expected	49	None	replace
2	[BUG]  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]      IOException  [CONTEXT]  public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  [BUGGY]  if(length  <  =  0x80  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]  return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(   "At  offset   "  +  offset  +   ",   "  +  length  +   "  byte   "  +   "binary  number  exceeds  maximum  signed  long  value ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0x80  ||(buffer[offset]  &  0x80)  ==  0)  {	if  ((buffer[offset]  &  0x80)  ==  0)  {  	non-compiled	[CE]  <identifier>  expected	49	None	replace
3	[BUG]  [BUGGY]  if  ((  buffer[offset]  &  0x80)  ==  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [CE]  <identifier>  expected  [FE]        IOException  [CONTEXT]  public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  [BUGGY]  if  ((  buffer[offset]  &  0x80)  ==  0  ||(buffer[offset]  &  0x7f)  ==  0)  {  [BUGGY]  return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(   "At  offset   "  +  offset  +   ",   "  +  length  +   "  byte   "  +   "binary  number  exceeds  maximum  signed  long  value ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if  ((  buffer[offset]  &  0x80)  ==  0  ||(buffer[offset]  &  0x7f)  ==  0)  {	if  ((buffer[offset]  &  0x80)  ==  0)  {  	non-compiled	[CE]  <identifier>  expected	49	None	replace
4	[BUG]  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]          IOException  [CONTEXT]  public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  [BUGGY]  if(length  <  =  0  ||(buffer[offset]  &  0x80)!=  0)  {  [BUGGY]  return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(   "At  offset   "  +  offset  +   ",   "  +  length  +   "  byte   "  +   "binary  number  exceeds  maximum  signed  long  value ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(buffer[offset]  &  0x80)!=  0)  {	if  ((buffer[offset]  &  0x80)  ==  0)  {  	non-compiled	[CE]  <identifier>  expected	49	None	replace
5	[BUG]  [BUGGY]  if  ((  buffer[offset]  &  0x80)  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]            IOException  [CONTEXT]  public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  [BUGGY]  if  ((  buffer[offset]  &  0x80)  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]  return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(   "At  offset   "  +  offset  +   ",   "  +  length  +   "  byte   "  +   "binary  number  exceeds  maximum  signed  long  value ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if  ((  buffer[offset]  &  0x80)  ==  0  ||(buffer[offset]  &  0x80)  ==  0)  {	if  ((buffer[offset]  &  0x80)  ==  0)  {  	non-compiled	[CE]  <identifier>  expected	49	None	replace
6	[BUG]  [BUGGY]  if  ((  buffer[offset]  &  0x80)!=  0)  {  [CE]  <identifier>  expected  [FE]              IOException  [CONTEXT]  public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  [BUGGY]  if  ((  buffer[offset]  &  0x80)!=  0)  {  [BUGGY]  return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(   "At  offset   "  +  offset  +   ",   "  +  length  +   "  byte   "  +   "binary  number  exceeds  maximum  signed  long  value ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if  ((  buffer[offset]  &  0x80)!=  0)  {	if  ((buffer[offset]  &  0x80)  ==  0)  {  	non-compiled	[CE]  <identifier>  expected	49	None	replace
7	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]                IOException  [CONTEXT]  public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  [BUGGY]    [BUGGY]  return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(   "At  offset   "  +  offset  +   ",   "  +  length  +   "  byte   "  +   "binary  number  exceeds  maximum  signed  long  value ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	  	if  ((buffer[offset]  &  0x80)  ==  0)  {  	non-compiled	[CE]  <identifier>  expected	49	None	replace
8	[BUG]  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x80)  ==  0)  {  [CE]  <identifier>  expected  [FE]    IOException  [CONTEXT]  public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  [BUGGY]  if(buffer  ==  null  ||(buffer[offset]  &  0x80)  ==  0)  {  [BUGGY]  return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(   "At  offset   "  +  offset  +   ",   "  +  length  +   "  byte   "  +   "binary  number  exceeds  maximum  signed  long  value ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||(buffer[offset]  &  0x80)  ==  0)  {	if  ((buffer[offset]  &  0x80)  ==  0)  {  	non-compiled	[CE]  <identifier>  expected	49	None	replace
9	[BUG]  [BUGGY]  if(length  <  =  0)  {  [CE]  <identifier>  expected  [FE]      IOException  [CONTEXT]  public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  [BUGGY]  if(length  <  =  0)  {  [BUGGY]  return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(   "At  offset   "  +  offset  +   ",   "  +  length  +   "  byte   "  +   "binary  number  exceeds  maximum  signed  long  value ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0)  {	if  ((buffer[offset]  &  0x80)  ==  0)  {  	non-compiled	[CE]  <identifier>  expected	49	None	replace
10	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x80)  {  [CE]  <identifier>  expected  [FE]        IOException  [CONTEXT]  public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  [BUGGY]  if(buffer  ==  null  ||  buffer[offset]!=  0x80)  {  [BUGGY]  return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(   "At  offset   "  +  offset  +   ",   "  +  length  +   "  byte   "  +   "binary  number  exceeds  maximum  signed  long  value ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(buffer  ==  null  ||  buffer[offset]!=  0x80)  {	if  ((buffer[offset]  &  0x80)  ==  0)  {  	non-compiled	[CE]  <identifier>  expected	49	None	replace
11	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]    IOException  [CONTEXT]  public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]  return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(   "At  offset   "  +  offset  +   ",   "  +  length  +   "  byte   "  +   "binary  number  exceeds  maximum  signed  long  value ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	if  ((buffer[offset]  &  0x80)  ==  0)  {  	non-compiled	[CE]  <identifier>  expected	49	None	replace
12	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [CE]  <identifier>  expected  [FE]      IOException  [CONTEXT]  public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {  [BUGGY]  return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(   "At  offset   "  +  offset  +   ",   "  +  length  +   "  byte   "  +   "binary  number  exceeds  maximum  signed  long  value ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length)  {	if  ((buffer[offset]  &  0x80)  ==  0)  {  	non-compiled	[CE]  <identifier>  expected	49	None	replace
13	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length))  {  [CE]  <identifier>  expected  [FE]        IOException  [CONTEXT]  public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length))  {  [BUGGY]  return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(   "At  offset   "  +  offset  +   ",   "  +  length  +   "  byte   "  +   "binary  number  exceeds  maximum  signed  long  value ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length))  {	if  ((buffer[offset]  &  0x80)  ==  0)  {  	non-compiled	[CE]  <identifier>  expected	49	None	replace
14	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer[offset  <  0x10  &&(buffer  [CE]  <identifier>  expected  [FE]          IOException  [CONTEXT]  public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer[offset  <  0x10  &&(buffer  [BUGGY]  return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(   "At  offset   "  +  offset  +   ",   "  +  length  +   "  byte   "  +   "binary  number  exceeds  maximum  signed  long  value ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer[offset  <  0x10  &&(buffer	if  ((buffer[offset]  &  0x80)  ==  0)  {  	non-compiled	[CE]  <identifier>  expected	49	None	replace
15	[BUG]  [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer[offset  <  0x20  ||(buffer[  [CE]  <identifier>  expected  [FE]            IOException  [CONTEXT]  public  static  long  parseOctalOrBinary(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  [BUGGY]  if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer[offset  <  0x20  ||(buffer[  [BUGGY]  return  parseOctal(buffer,  offset,  length);  }  long  val  =  buffer[offset]  &  0x7f;  for  (int  i  =  1;  i  <  length;  i++)  {  if  (val  >=  (1L  <<  (63  -  8)))  {  throw  new  IllegalArgumentException(   "At  offset   "  +  offset  +   ",   "  +  length  +   "  byte   "  +   "binary  number  exceeds  maximum  signed  long  value ");  }  [CLASS]  TarUtils  [METHOD]  parseOctalOrBinary  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  int  BYTE_MASK  end  i  length  offset  start  long  val  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	134	134	1	replace	if(length  <  =  0  ||(offset  <  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer.length  ||  length  >  buffer[offset  <  0x20  ||(buffer[	if  ((buffer[offset]  &  0x80)  ==  0)  {  	non-compiled	[CE]  <identifier>  expected	49	None	replace
