bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  end;  i  <  length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  end;  i  <  length;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end;  i  <  length;  i++)  {	  for(int    i    =    start;    i    <    length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset  +  length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start;  i  <  offset  +  length;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  offset  +  length;  i++)  {	  for(int    i    =    start;    i    <    length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  =  length;  i++)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start;  i  <  =  length;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  =  length;  i++)  {	  for(int    i    =    start;    i    <    length;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  start  +  length;  i  <  start;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start  +  length;  i  <  start;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  length;  i  <  start;  i++)  {	  for(int    i    =    start;    i    <    length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
5	[BUG]  [BUGGY]  for(int  i  =  end;  i  <  BYTE_MASK;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  end;  i  <  BYTE_MASK;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end;  i  <  BYTE_MASK;  i++)  {	  for(int    i    =    start;    i    <    BYTE_MASK;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  =  BYTE_MASK;  i++)  {  [CE]  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start;  i  <  =  BYTE_MASK;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  =  BYTE_MASK;  i++)  {	  for(int    i    =    start;    i    <    BYTE_MASK;    i++)    {    	non-compiled	[CE]  	3	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  BYTE_MASK;  i++)  {  [CE]  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  offset;  i  <  BYTE_MASK;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset;  i  <  BYTE_MASK;  i++)  {	  for(int    i    =    start;    i    <    BYTE_MASK;    i++)    {    	non-compiled	[CE]  	3	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  start;  i  >=  end;  i++)  {  [CE]  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start;  i  >=  end;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  >=  end;  i++)  {	  for(int    i    =    start;    i    <    BYTE_MASK;    i++)    {    	non-compiled	[CE]  	3	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  =  offset;  i++)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start;  i  <  =  offset;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  =  offset;  i++)  {	  for(int    i    =    start;    i    <    offset;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  end;  i  <  start;  i++)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  end;  i  <  start;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end;  i  <  start;  i++)  {	  for(int    i    =    start;    i    <    offset;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  end;  i  <  offset;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  end;  i  <  offset;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end;  i  <  offset;  i++)  {	  for(int    i    =    start;    i    <    offset;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  start;  i++)  {  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  offset;  i  <  start;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset;  i  <  start;  i++)  {	  for(int    i    =    start;    i    <    offset;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  start  +  1;  i  <  length;  i++)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start  +  1;  i  <  length;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  1;  i  <  length;  i++)  {	  for(int    i    =    start    +    1;    i    <    end;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  start  +  2;  i  <  end;  i++)  {  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start  +  2;  i  <  end;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  2;  i  <  end;  i++)  {	  for(int    i    =    start    +    1;    i    <    end;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  start  +  1;  i  <  offset;  i++)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start  +  1;  i  <  offset;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  1;  i  <  offset;  i++)  {	  for(int    i    =    start    +    1;    i    <    end;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  start  +  1;  i  <  BYTE_MASK;  i++)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start  +  1;  i  <  BYTE_MASK;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  1;  i  <  BYTE_MASK;  i++)  {	  for(int    i    =    start    +    1;    i    <    end;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  start  +  1;  i  <  =  end;  i++)  {  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start  +  1;  i  <  =  end;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  1;  i  <  =  end;  i++)  {	  for(int    i    =    start    +    1;    i    <    end;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  =  off;  i++)  {  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start;  i  <  =  off;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  =  off;  i++)  {	  for(int    i    =    start;    i    <    =    end;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
19	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  length);  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  length);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
20	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
21	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.clone();  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  byte[]  buffer  =(byte[])end.clone();  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])end.clone();	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
22	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length);  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
23	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length);  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length);  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end;  [CE]  illegal  start  of  type  [FE]                            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  byte[]  buffer  =(byte[])end;  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])end;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  buffer.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start;  i  <  buffer.length;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  buffer.length;  i++)  {	  for(int    i    =    start;    i    <    offset;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  start;  i  >=  BYTE_MASK;  i++)  {  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start;  i  >=  BYTE_MASK;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  >=  BYTE_MASK;  i++)  {	  for(int    i    =    start;    i    <    BYTE_MASK;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  start  +  length;  i  <  end;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start  +  length;  i  <  end;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  length;  i  <  end;  i++)  {	  for(int    i    =    start    +    1;    i    <    end;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
29	[BUG]  [BUGGY]  ((  byte[])buffer,  start,  length);  [CE]  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  ((  byte[])buffer,  start,  length);  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer,  start,  length);	      	non-compiled	[CE]  	5	None	replace
30	[BUG]  [BUGGY]  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(buffer[i]!=  0)  {  return  0L;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
31	[BUG]  [BUGGY]  ((  byte[])buffer).reset();  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  ((  byte[])buffer).reset();  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer).reset();	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
34	[BUG]  [BUGGY]  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  break;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  break;  }  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  break;  }	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]  >=  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]  >=  0)  {  return  0L;  }  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]  >=  0)  {  return  0L;  }	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }	      	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  start  +  offset;  i  <  offset;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;    [BUGGY]  for(int  i  =  start  +  offset;  i  <  offset;  i++)  {  [BUGGY]    if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  offset;  i  <  offset;  i++)  {	  for(int    i    =    start;    i    <    offset;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
