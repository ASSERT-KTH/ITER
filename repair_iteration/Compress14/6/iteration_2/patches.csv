bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])start;  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  byte[]  buffer  =(byte[])start;  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])start;	  byte[]    buffer    =(byte[])end;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
2	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.cloneTree();  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  byte[]  buffer  =(byte[])end.cloneTree();  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])end.cloneTree();	  byte[]    buffer    =(byte[])end;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
3	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end  +  1;  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  byte[]  buffer  =(byte[])end  +  1;  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])end  +  1;	  byte[]    buffer    =(byte[])end;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
4	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end  -  start;  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  byte[]  buffer  =(byte[])end  -  start;  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])end  -  start;	  byte[]    buffer    =(byte[])end;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
5	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.cloneByte();  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  byte[]  buffer  =(byte[])end.cloneByte();  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])end.cloneByte();	  byte[]    buffer    =(byte[])end;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  end;  i  <  buffer.length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end;  i  <  buffer.length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end;  i  <  buffer.length;  i++)  {	  for(int    i    =    start;    i    <    buffer.length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  end;  i  <  start.length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end;  i  <  start.length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end;  i  <  start.length;  i++)  {	  for(int    i    =    start;    i    <    buffer.length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  buffer.length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  offset;  i  <  buffer.length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset;  i  <  buffer.length;  i++)  {	  for(int    i    =    start;    i    <    buffer.length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  end;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  offset;  i  <  end;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset;  i  <  end;  i++)  {	  for(int    i    =    start;    i    <    buffer.length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  start  +  2;  i  <  offset;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  2;  i  <  offset;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  2;  i  <  offset;  i++)  {	  for(int    i    =    start    +    1;    i    <    offset;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  end  +  1;  i  <  offset;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end  +  1;  i  <  offset;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end  +  1;  i  <  offset;  i++)  {	  for(int    i    =    start    +    1;    i    <    offset;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  start  +  1;  i  <  offset  +  length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  1;  i  <  offset  +  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  1;  i  <  offset  +  length;  i++)  {	  for(int    i    =    start    +    1;    i    <    offset;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  offset  +  1;  i  <  start;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  offset  +  1;  i  <  start;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset  +  1;  i  <  start;  i++)  {	  for(int    i    =    start    +    1;    i    <    offset;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  end  +  1;  i  <  start;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end  +  1;  i  <  start;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end  +  1;  i  <  start;  i++)  {	  for(int    i    =    start    +    1;    i    <    offset;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  end;  i  <  =  start;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end;  i  <  =  start;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end;  i  <  =  start;  i++)  {	  for(int    i    =    start;    i    <    =    offset;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  =  start;  i++)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  offset;  i  <  =  start;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset;  i  <  =  start;  i++)  {	  for(int    i    =    start;    i    <    =    offset;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  end  +  1;  i  <  BYTE_MASK;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end  +  1;  i  <  BYTE_MASK;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end  +  1;  i  <  BYTE_MASK;  i++)  {	  for(int    i    =    start    +    1;    i    <    BYTE_MASK;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  offset  +  1;  i  <  BYTE_MASK;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  offset  +  1;  i  <  BYTE_MASK;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset  +  1;  i  <  BYTE_MASK;  i++)  {	  for(int    i    =    start    +    1;    i    <    BYTE_MASK;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  start  +  2;  i  <  BYTE_MASK;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  2;  i  <  BYTE_MASK;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  2;  i  <  BYTE_MASK;  i++)  {	  for(int    i    =    start    +    1;    i    <    BYTE_MASK;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  start  +  1;  i  >=  end;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  1;  i  >=  end;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  1;  i  >=  end;  i++)  {	  for(int    i    =    start    +    1;    i    <    BYTE_MASK;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  start  +  offset;  i  <  end;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  offset;  i  <  end;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  offset;  i  <  end;  i++)  {	  for(int    i    =    start    +    length;    i    <    end;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  start  +  length;  i  <  =  end;  i++)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  length;  i  <  =  end;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  length;  i  <  =  end;  i++)  {	  for(int    i    =    start    +    length;    i    <    end;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  start  +  length;  i  <  BYTE_MASK;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  length;  i  <  BYTE_MASK;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  length;  i  <  BYTE_MASK;  i++)  {	  for(int    i    =    start    +    length;    i    <    end;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  start  +  length;  i  <  offset;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  length;  i  <  offset;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  length;  i  <  offset;  i++)  {	  for(int    i    =    start    +    length;    i    <    end;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
25	[BUG]  [BUGGY]  for(int  i  =  start  +  length;  i  >=  end;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  length;  i  >=  end;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  length;  i  >=  end;  i++)  {	  for(int    i    =    start    +    length;    i    <    end;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  end;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  offset  +  length;  i  <  end;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset  +  length;  i  <  end;  i++)  {	  for(int    i    =    start    +    length;    i    <    end;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  end;  i  <  =  BYTE_MASK;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end;  i  <  =  BYTE_MASK;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end;  i  <  =  BYTE_MASK;  i++)  {	  for(int    i    =    start;    i    <    =    BYTE_MASK;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
28	[BUG]  [BUGGY]  ((  byte[])buffer,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer,  offset,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer,  offset,  length);	  ((    byte[])buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
29	[BUG]  [BUGGY]  ((  byte[])buffer,  end,  length);  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer,  end,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer,  end,  length);	  ((    byte[])buffer,    start,    length);    	non-compiled	[CE]  	29	None	replace
30	[BUG]  [BUGGY]  ((  byte[])buffer,  0,  length);  [CE]  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer,  0,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer,  0,  length);	  ((    byte[])buffer,    start,    length);    	non-compiled	[CE]  	29	None	replace
31	[BUG]  [BUGGY]  ((  byte[])buffer,  start,  end);  [CE]  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer,  start,  end);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer,  start,  end);	  ((    byte[])buffer,    start,    length);    	non-compiled	[CE]  	29	None	replace
32	[BUG]  [BUGGY]  ((  byte[])buffer,  0,  end);  [CE]  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer,  0,  end);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer,  0,  end);	  ((    byte[])buffer,    start,    length);    	non-compiled	[CE]  	29	None	replace
33	[BUG]  [BUGGY]  ((  byte[])buffer,  start,  length,  end);  [CE]  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer,  start,  length,  end);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer,  start,  length,  end);	  ((    byte[])buffer,    start,    length);    	non-compiled	[CE]  	29	None	replace
34	[BUG]  [BUGGY]  ((  byte[])buffer,  start,  length  +  1);  [CE]  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer,  start,  length  +  1);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer,  start,  length  +  1);	  ((    byte[])buffer,    start,    length);    	non-compiled	[CE]  	29	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  return  0;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  return  0;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  return  0;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  end;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  offset;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  =  end;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  =  end;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  =  end;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    end;    ++i)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    end;    ++i)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
42	[BUG]  [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(length  <  2)  {  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(length  <  2)  {  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    end;    ++i)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
43	[BUG]  [BUGGY]  int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  >  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    end;    ++i)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  >  expected	33	None	replace
44	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  length);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  start,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  offset,  buffer,  start,  length);	  System.arraycopy(buffer,    start,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
45	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);	  System.arraycopy(buffer,    start,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
46	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  offset,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  end,  buffer,  offset,  length);	  System.arraycopy(buffer,    start,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
47	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length,  length);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length,  length);	  System.arraycopy(buffer,    start,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
48	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length,  end);  [CE]  illegal  start  of  type  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length,  end);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length,  end);	  System.arraycopy(buffer,    start,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
49	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length,  BYTE_MASK);  [CE]  illegal  start  of  type  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length,  BYTE_MASK);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length,  BYTE_MASK);	  System.arraycopy(buffer,    start,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
50	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end);  [CE]  illegal  start  of  type  [FE]                                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  end);	  System.arraycopy(buffer,    start,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
51	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  MILLIS_SIZE;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  MILLIS_SIZE;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  MILLIS_SIZE;  i++)  {	  for(int    i    =    end;    i    <    BYTE_MASK;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  2;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  2;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  2;  i++)  {	  for(int    i    =    end;    i    <    BYTE_MASK;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  End;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  End;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  End;  i++)  {	  for(int    i    =    end;    i    <    BYTE_MASK;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  end  +  1;  i  <  length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end  +  1;  i  <  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end  +  1;  i  <  length;  i++)  {	  for(int    i    =    start    +    1;    i    <    length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  start  +  2;  i  <  length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  2;  i  <  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  2;  i  <  length;  i++)  {	  for(int    i    =    start    +    1;    i    <    length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  offset  +  1;  i  <  length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  offset  +  1;  i  <  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset  +  1;  i  <  length;  i++)  {	  for(int    i    =    start    +    1;    i    <    length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  size;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  size;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  size;  i++)  {	  for(int    i    =    offset;    i    <    start;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
58	[BUG]  [BUGGY]  For(int  i  =  start;  i  <  BYTE_MASK;  i++)  {  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  For(int  i  =  start;  i  <  BYTE_MASK;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	For(int  i  =  start;  i  <  BYTE_MASK;  i++)  {	  for(int    i    =    offset;    i    <    BYTE_MASK;    i++)    {    	non-compiled	[CE]  	7	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  BYTE_MILLIS;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  BYTE_MILLIS;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  BYTE_MILLIS;  i++)  {	  for(int    i    =    offset;    i    <    BYTE_MASK;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
60	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  end,  length);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  end,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  offset,  buffer,  end,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
61	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length,  length);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  end,  length,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  start,  buffer,  end,  length,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
62	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  start,  length);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  start,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  end,  buffer,  start,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  start  +  offset;  i  <  length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  offset;  i  <  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  offset;  i  <  length;  i++)  {	  for(int    i    =    start    +    offset;    i    <    offset;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  end  +  offset;  i  <  offset;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end  +  offset;  i  <  offset;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end  +  offset;  i  <  offset;  i++)  {	  for(int    i    =    start    +    offset;    i    <    offset;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  start  +  end;  i  <  offset;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  end;  i  <  offset;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  end;  i  <  offset;  i++)  {	  for(int    i    =    start    +    offset;    i    <    offset;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
66	[BUG]  [BUGGY]  for(int  i  =  start  +  offset;  i  >=  end;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  offset;  i  >=  end;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  offset;  i  >=  end;  i++)  {	  for(int    i    =    start    +    offset;    i    <    offset;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  start  +  3;  i  <  end;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  3;  i  <  end;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  3;  i  <  end;  i++)  {	  for(int    i    =    start    +    2;    i    <    end;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  start  +  2;  i  <  offset  +  end;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  2;  i  <  offset  +  end;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  2;  i  <  offset  +  end;  i++)  {	  for(int    i    =    start    +    2;    i    <    end;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
69	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end,  length);  [CE]  illegal  start  of  type  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
70	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  length);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  start,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  start,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
71	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  length);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  end,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  0,  buffer,  end,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
72	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  end);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
73	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  end,  buffer,  start,  length);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  end,  buffer,  start,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  0,  end,  buffer,  start,  length);	  System.arraycopy(buffer,    0,    buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
74	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  start,  end);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  0,  buffer,  start,  end);	  System.arraycopy(buffer,    0,    buffer,    start,    length);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  start  +  1;  i  <  =  length;  i++)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  1;  i  <  =  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  1;  i  <  =  length;  i++)  {	  for(int    i    =    start    +    1;    i    <    =    end;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  start  +  1;  i  <  =  offset;  i++)  {  [CE]  illegal  start  of  expression  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  1;  i  <  =  offset;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  1;  i  <  =  offset;  i++)  {	  for(int    i    =    start    +    1;    i    <    =    end;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
77	[BUG]  [BUGGY]  For(int  i  =  start;  i  <  end;  i++)  {  [CE]  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  For(int  i  =  start;  i  <  end;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	For(int  i  =  start;  i  <  end;  i++)  {	  for(int    i    =    end;    i    <    length;    i++)    {    	non-compiled	[CE]  	1	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]  ==  0)  {  return  0;  }  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]  ==  0)  {  return  0;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]  ==  0)  {  return  0;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]    ==    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  end;  i  <  length;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end;  i  <  length;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end;  i  <  length;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]    ==    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]  ==  0)  {  return  0;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]  ==  0)  {  return  0;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]  ==  0)  {  return  0;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]    ==    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  length;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  offset;  i  <  length;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset;  i  <  length;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]    ==    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]    ==    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  start  +  offset;  i  <  start;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  offset;  i  <  start;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  offset;  i  <  start;  i++)  {	  for(int    i    =    start    +    length;    i    <    start;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  end  +  length;  i  <  start;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end  +  length;  i  <  start;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end  +  length;  i  <  start;  i++)  {	  for(int    i    =    start    +    length;    i    <    start;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  offset  +  length;  i  <  start;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  offset  +  length;  i  <  start;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset  +  length;  i  <  start;  i++)  {	  for(int    i    =    start    +    length;    i    <    start;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  start  +  end;  i  <  start;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  end;  i  <  start;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  end;  i  <  start;  i++)  {	  for(int    i    =    start    +    length;    i    <    start;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
87	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])start.clone();  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  byte[]  buffer  =(byte[])start.clone();  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])start.clone();	  byte[]    buffer    =(byte[])end.clone();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
88	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])this.end.clone();  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  byte[]  buffer  =(byte[])this.end.clone();  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])this.end.clone();	  byte[]    buffer    =(byte[])end.clone();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
89	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])length.clone();  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  byte[]  buffer  =(byte[])length.clone();  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])length.clone();	  byte[]    buffer    =(byte[])end.clone();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
90	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])buffer.clone();  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  byte[]  buffer  =(byte[])buffer.clone();  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])buffer.clone();	  byte[]    buffer    =(byte[])end.clone();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
91	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])offset.clone();  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  byte[]  buffer  =(byte[])offset.clone();  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])offset.clone();	  byte[]    buffer    =(byte[])end.clone();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
92	[BUG]  [BUGGY]  final  byte[]  buffer  =(byte[])end.clone();  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  final  byte[]  buffer  =(byte[])end.clone();  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	final  byte[]  buffer  =(byte[])end.clone();	  byte[]    buffer    =(byte[])end.clone();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  end;  i  >=  BYTE_MASK;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end;  i  >=  BYTE_MASK;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end;  i  >=  BYTE_MASK;  i++)  {	  for(int    i    =    start;    i    >=    BYTE_MASK;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  start;  i!=  end;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i!=  end;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i!=  end;  i++)  {	  for(int    i    =    start;    i    >=    BYTE_MASK;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  end;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  1;  i  <  end;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  1;  i  <  end;  i++)  {	  for(int    i    =    end;    i    <    start;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  start;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  1;  i  <  start;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  1;  i  <  start;  i++)  {	  for(int    i    =    end;    i    <    start;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  break;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  break;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  break;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    break;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]  ==  0)  {  break;  }  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]  ==  0)  {  break;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]  ==  0)  {  break;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    break;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  end;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  break;  }  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  break;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  break;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    break;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]!=  0)  {  break;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]!=  0)  {  break;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]!=  0)  {  break;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    break;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  continue;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  continue;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]!=  0)  {  continue;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    break;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  break;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  offset;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  break;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  break;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    break;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]  >=  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]  >=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]  >=  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]    >=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
104	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]  >=  0)  {  return  0;  }  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]  >=  0)  {  return  0;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  end;  ++i)  {  if(buffer[i]  >=  0)  {  return  0;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]    >=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
105	[BUG]  [BUGGY]  for(int  i  =  end;  i  <  =  length;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end;  i  <  =  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end;  i  <  =  length;  i++)  {	  for(int    i    =    start;    i    <    =    length;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
106	[BUG]  [BUGGY]  if(length  <  BYTE_MASK)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  <identifier>  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(length  <  BYTE_MASK)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(length  <  BYTE_MASK)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(buffer[i]!=    0)    {    for(int    i    =    start;    i    <    end;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
107	[BUG]  [BUGGY]  if(length  <  2)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  <identifier>  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(length  <  2)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(length  <  2)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(buffer[i]!=    0)    {    for(int    i    =    start;    i    <    end;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
108	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  <identifier>  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(length  ==  BYTE_MASK)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(length  ==  BYTE_MASK)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(buffer[i]!=    0)    {    for(int    i    =    start;    i    <    end;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
109	[BUG]  [BUGGY]  if(length  >  0)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(length  >  0)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(length  >  0)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(buffer[i]!=    0)    {    for(int    i    =    start;    i    <    end;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(buffer[i]!=    0)    {    for(int    i    =    start;    i    <    end;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
111	[BUG]  [BUGGY]  if(length  <  BYTE_MASK)  {  if(buffer[i]  >=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  <identifier>  expected  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(length  <  BYTE_MASK)  {  if(buffer[i]  >=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(length  <  BYTE_MASK)  {  if(buffer[i]  >=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(buffer[i]!=    0)    {    for(int    i    =    start;    i    <    end;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
112	[BUG]  [BUGGY]  if(length  <  2)  {  if(buffer[i]  >=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  <identifier>  expected  [FE]                                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(length  <  2)  {  if(buffer[i]  >=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(length  <  2)  {  if(buffer[i]  >=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(buffer[i]!=    0)    {    for(int    i    =    start;    i    <    end;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
113	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  end);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  end);	  System.arraycopy(buffer,    0,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
114	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length  -  start);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length  -  start);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length  -  start);	  System.arraycopy(buffer,    0,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
115	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);	  System.arraycopy(buffer,    0,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
116	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length  -  1);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length  -  1);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length  -  1);	  System.arraycopy(buffer,    0,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
117	[BUG]  [BUGGY]  if(buffer[i]!=  end)  {  return  0L;  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(buffer[i]!=  end)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(buffer[i]!=  end)  {  return  0L;  }	  if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
118	[BUG]  [BUGGY]  if(end  ==  end)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(end  ==  end)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(end  ==  end)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
119	[BUG]  [BUGGY]  if(buffer[i]  ==  end)  {  return  0L;  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(buffer[i]  ==  end)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(buffer[i]  ==  end)  {  return  0L;  }	  if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
120	[BUG]  [BUGGY]  if(end!=  end)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(end!=  end)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(end!=  end)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
121	[BUG]  [BUGGY]  if(end  <  =  length)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(end  <  =  length)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(end  <  =  length)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
122	[BUG]  [BUGGY]  if(end  >=  end)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(end  >=  end)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(end  >=  end)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
123	[BUG]  [BUGGY]  if(buffer[i]!=  end)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(buffer[i]!=  end)  {  return  0;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(buffer[i]!=  end)  {  return  0;  }	  if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
124	[BUG]  [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  end,  buffer,  0,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  end,  buffer,  0,  length);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
125	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  end);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  end);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  off;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  off;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  off;  i++)  {	  for(int    i    =    start;    i    <    =    off;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end  +  length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  end  +  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  end  +  length;  i++)  {	  for(int    i    =    start;    i    <    offset    +    length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
128	[BUG]  [BUGGY]  for(int  i  =  end;  i  <  offset  +  length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end;  i  <  offset  +  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end;  i  <  offset  +  length;  i++)  {	  for(int    i    =    start;    i    <    offset    +    length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  end  +  offset;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  end  +  offset;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  end  +  offset;  i++)  {	  for(int    i    =    start;    i    <    offset    +    length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  start  +  length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  offset;  i  <  start  +  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset;  i  <  start  +  length;  i++)  {	  for(int    i    =    start;    i    <    offset    +    length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  length  +  offset;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  length  +  offset;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  length  +  offset;  i++)  {	  for(int    i    =    start;    i    <    offset    +    length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset  +  length  -  1;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  offset  +  length  -  1;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  offset  +  length  -  1;  i++)  {	  for(int    i    =    start;    i    <    offset    +    length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
133	[BUG]  [BUGGY]  ((  byte[])buffer).get();  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer).get();  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer).get();	  ((    byte[])buffer).reset();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
134	[BUG]  [BUGGY]  ((  byte[])buffer).resetAndReset();  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer).resetAndReset();  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer).resetAndReset();	  ((    byte[])buffer).reset();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
135	[BUG]  [BUGGY]  ((  byte[])buffer).parseOctal(buffer,  start,  length);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer).parseOctal(buffer,  start,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer).parseOctal(buffer,  start,  length);	  ((    byte[])buffer).reset();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
136	[BUG]  [BUGGY]  ((  byte[])buffer).clear();  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer).clear();  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer).clear();	  ((    byte[])buffer).reset();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
137	[BUG]  [BUGGY]  ((  byte[])buffer).set(end,  start);  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer).set(end,  start);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer).set(end,  start);	  ((    byte[])buffer).reset();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
138	[BUG]  [BUGGY]  ((  byte[])buffer).set(end,  length);  [CE]  illegal  start  of  type  [FE]                                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer).set(end,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer).set(end,  length);	  ((    byte[])buffer).reset();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  BYTE_SIZE;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  BYTE_SIZE;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  BYTE_SIZE;  i++)  {	  for(int    i    =    offset;    i    <    BYTE_MASK;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset  +  length;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  offset  +  length;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  offset  +  length;  ++i)  {  if(buffer[i]  ==  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]    ==    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
141	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.toArray(new  byte[length]);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  byte[]  buffer  =(byte[])end.toArray(new  byte[length]);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])end.toArray(new  byte[length]);	  byte[]    buffer    =(byte[])end.clone();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
142	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.getValue();  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  byte[]  buffer  =(byte[])end.getValue();  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])end.getValue();	  byte[]    buffer    =(byte[])end.clone();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
143	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length  -  start);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length  -  start);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length  -  start);	  System.arraycopy(buffer,    start,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
144	[BUG]  [BUGGY]  ((  byte[])buffer,  start,  length  -  1);  [CE]  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer,  start,  length  -  1);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer,  start,  length  -  1);	  ((    byte[])buffer,    start,    length);    	non-compiled	[CE]  	29	None	replace
145	[BUG]  [BUGGY]  ((  byte[])buffer,  start,  length  -  start);  [CE]  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer,  start,  length  -  start);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer,  start,  length  -  start);	  ((    byte[])buffer,    start,    length);    	non-compiled	[CE]  	29	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset  +  length;  ++i)  {  if(buffer[i]  >=  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  offset  +  length;  ++i)  {  if(buffer[i]  >=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  offset  +  length;  ++i)  {  if(buffer[i]  >=  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]    >=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
147	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]  >=  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]  >=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]  >=  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]    >=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset  +  buffer.length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  offset  +  buffer.length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  offset  +  buffer.length;  i++)  {	  for(int    i    =    start;    i    <    buffer.length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
149	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end,  length);  [CE]  illegal  start  of  type  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  end,  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  end,  length);	  System.arraycopy(buffer,    start,    buffer,    end,    length);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
150	[BUG]  [BUGGY]  ((  byte[])buffer).set(end);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer).set(end);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer).set(end);	  ((    byte[])buffer).reset();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
151	[BUG]  [BUGGY]  ((  byte[])buffer).initByte();  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer).initByte();  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer).initByte();	  ((    byte[])buffer).reset();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
152	[BUG]  [BUGGY]  ((  byte[])buffer).add(end);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer).add(end);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer).add(end);	  ((    byte[])buffer).reset();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
153	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end  +  start;  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  byte[]  buffer  =(byte[])end  +  start;  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])end  +  start;	  byte[]    buffer    =(byte[])end;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset  +  length;  ++i)  {  if(buffer[i]!=  0)  {  break;  }  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  offset  +  length;  ++i)  {  if(buffer[i]!=  0)  {  break;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  offset  +  length;  ++i)  {  if(buffer[i]!=  0)  {  break;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    break;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]  ==  0)  {  break;  }  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]  ==  0)  {  break;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]  ==  0)  {  break;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    break;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  buffer.length  +  length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  buffer.length  +  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  buffer.length  +  length;  i++)  {	  for(int    i    =    start;    i    <    offset    +    length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
157	[BUG]  [BUGGY]  for(int  i  =  start  +  offset;  i  <  end  +  length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  offset;  i  <  end  +  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  offset;  i  <  end  +  length;  i++)  {	  for(int    i    =    start;    i    <    offset    +    length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  start  +  2;  i  <  =  end;  i++)  {  [CE]  illegal  start  of  expression  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  2;  i  <  =  end;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  2;  i  <  =  end;  i++)  {	  for(int    i    =    start    +    2;    i    <    end;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
159	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  start,  buffer,  0,  length  -  start);	  System.arraycopy(buffer,    start,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  offset;  i  >=  BYTE_MASK;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  offset;  i  >=  BYTE_MASK;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset;  i  >=  BYTE_MASK;  i++)  {	  for(int    i    =    start;    i    >=    BYTE_MASK;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
161	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  off  +  length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  off  +  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  off  +  length;  i++)  {	  for(int    i    =    start;    i    <    =    off;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
162	[BUG]  [BUGGY]  for(int  i  =  offset  +  1;  i  <  =  end;  i++)  {  [CE]  illegal  start  of  expression  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  offset  +  1;  i  <  =  end;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset  +  1;  i  <  =  end;  i++)  {	  for(int    i    =    start    +    1;    i    <    =    end;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
163	[BUG]  [BUGGY]  for(int  i  =  start  +  1;  i!=  end;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  1;  i!=  end;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  1;  i!=  end;  i++)  {	  for(int    i    =    start    +    1;    i    <    =    end;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
164	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  start);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  start);	  System.arraycopy(buffer,    0,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
165	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  offset);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  offset);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  offset);	  System.arraycopy(buffer,    0,    buffer,    0,    length);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
166	[BUG]  [BUGGY]  for(int  i  =  end;  i  <  =  offset;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  end;  i  <  =  offset;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  end;  i  <  =  offset;  i++)  {	  for(int    i    =    start;    i    <    =    offset;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
167	[BUG]  [BUGGY]  if(length  >=  BYTE_MASK)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(length  >=  BYTE_MASK)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(length  >=  BYTE_MASK)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(buffer[i]!=    0)    {    for(int    i    =    start;    i    <    end;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
168	[BUG]  [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(length  >  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(length  >  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(buffer[i]!=    0)    {    for(int    i    =    start;    i    <    end;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
169	[BUG]  [BUGGY]  if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(length  <  =  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(buffer[i]!=    0)    {    for(int    i    =    start;    i    <    end;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
170	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  new  byte[length];  }  [CE]  <identifier>  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(length  ==  BYTE_MASK)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  new  byte[length];  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(length  ==  BYTE_MASK)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  new  byte[length];  }	  if(buffer[i]!=    0)    {    for(int    i    =    start;    i    <    end;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset  +  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  offset  +  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  offset  +  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
172	[BUG]  [BUGGY]  int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  >  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	int  i  =  start;  i  <  length;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  >  expected	32	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  offset;  i  <  =  length;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  offset;  i  <  =  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  offset;  i  <  =  length;  i++)  {	  for(int    i    =    start;    i    <    =    length;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
174	[BUG]  [BUGGY]  if(end  <  length)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(end  <  length)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(end  <  length)  {  if(buffer[i]!=  0)  {  return  0L;  }	  if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
175	[BUG]  [BUGGY]  if(buffer[start]!=  0)  {  return  0L;  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(buffer[start]!=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(buffer[start]!=  0)  {  return  0L;  }	  if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
176	[BUG]  [BUGGY]  if(buffer[i]  ==  start)  {  return  0L;  }  [CE]  illegal  start  of  type  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(buffer[i]  ==  start)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(buffer[i]  ==  start)  {  return  0L;  }	  if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
177	[BUG]  [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length  +  1);  [CE]  illegal  start  of  type  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  System.arraycopy(buffer,  start,  buffer,  offset,  length  +  1);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	System.arraycopy(buffer,  start,  buffer,  offset,  length  +  1);	  System.arraycopy(buffer,    start,    buffer,    offset,    length);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
178	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])result.clone();  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  byte[]  buffer  =(byte[])result.clone();  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])result.clone();	  byte[]    buffer    =(byte[])end.clone();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
179	[BUG]  [BUGGY]  For(int  i  =  start;  i  <  length;  i++)  {  [CE]  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  For(int  i  =  start;  i  <  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	For(int  i  =  start;  i  <  length;  i++)  {	  for(int    i    =    end;    i    <    length;    i++)    {    	non-compiled	[CE]  	1	None	replace
180	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]  ==  0)  {  return  0;  }  [CE]  class,  interface,  or  enum  expected  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]  ==  0)  {  return  0;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]  ==  0)  {  return  0;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]    ==    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  =  off  +  length;  i++)  {  [CE]  illegal  start  of  expression  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  =  off  +  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  =  off  +  length;  i++)  {	  for(int    i    =    start;    i    <    =    off;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  start  +  length;  i  <  2;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  length;  i  <  2;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  length;  i  <  2;  i++)  {	  for(int    i    =    start    +    length;    i    <    end;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  start  +  offset;  i  <  BYTE_MASK;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  offset;  i  <  BYTE_MASK;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  offset;  i  <  BYTE_MASK;  i++)  {	  for(int    i    =    start    +    offset;    i    <    offset;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
184	[BUG]  [BUGGY]  ((  byte[])buffer).set(end,  offset  +  length);  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  ((  byte[])buffer).set(end,  offset  +  length);  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	((  byte[])buffer).set(end,  offset  +  length);	  ((    byte[])buffer).reset();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
185	[BUG]  [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(length  <  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(buffer[i]!=    0)    {    for(int    i    =    start;    i    <    end;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
186	[BUG]  [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(length  <  BYTE_MASK  ||  length  >  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(buffer[i]!=    0)    {    for(int    i    =    start;    i    <    end;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
187	[BUG]  [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(length  ==  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(buffer[i]!=    0)    {    for(int    i    =    start;    i    <    end;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
188	[BUG]  [BUGGY]  if(length  <  =  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [CE]  illegal  start  of  expression  [FE]                              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(length  <  =  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(length  <  =  BYTE_MASK)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  buffer[i];  }	  if(buffer[i]!=    0)    {    for(int    i    =    start;    i    <    end;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
189	[BUG]  [BUGGY]  if(length  <  2)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  BYTE_MASK;  }  [CE]  <identifier>  expected  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(length  <  2)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  BYTE_MASK;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(length  <  2)  {  if(buffer[i]!=  0)  {  for(int  i  =  start;  i  <  end;  ++i)  {  buffer[i]  =  BYTE_MASK;  }	  if(buffer[i]!=    0)    {    for(int    i    =    start;    i    <    end;    ++i)    {    buffer[i]    =    buffer[i];    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
190	[BUG]  [BUGGY]  byte[]  buffer  =(byte[])end.toByteArray();  [CE]  illegal  start  of  type  [FE]                                IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  byte[]  buffer  =(byte[])end.toByteArray();  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	byte[]  buffer  =(byte[])end.toByteArray();	  byte[]    buffer    =(byte[])end;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
191	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset.length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  offset.length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  offset.length;  i++)  {	  for(int    i    =    start;    i    <    buffer.length;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
192	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  MILLIS;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  MILLIS;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  MILLIS;  i++)  {	  for(int    i    =    offset;    i    <    BYTE_MASK;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]!=  0)  {  return  0;  }  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]!=  0)  {  return  0;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]!=  0)  {  return  0;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
194	[BUG]  [BUGGY]  if(buffer[i]  ==  0)  {  return  0L;  }  [CE]  illegal  start  of  type  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(buffer[i]  ==  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(buffer[i]  ==  0)  {  return  0L;  }	  if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
195	[BUG]  [BUGGY]  if(buffer[i]  ==  0)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  if(buffer[i]  ==  0)  {  return  0;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	if(buffer[i]  ==  0)  {  return  0;  }	  if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  =  length;  ++i)  {  if(buffer[i]!=  0)  {  break;  }  [CE]  illegal  start  of  expression  [FE]                          IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  =  length;  ++i)  {  if(buffer[i]!=  0)  {  break;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  =  length;  ++i)  {  if(buffer[i]!=  0)  {  break;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]!=    0)    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  start  +  1,  end;  i  <  end;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]              IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  1,  end;  i  <  end;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  1,  end;  i  <  end;  i++)  {	  for(int    i    =    start    +    2;    i    <    end;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
198	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  BYTE_MASK;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [CE]  class,  interface,  or  enum  expected  [FE]                      IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  BYTE_MASK;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  BYTE_MASK;  ++i)  {  if(buffer[i]!=  0)  {  return  0L;  }	  for(int    i    =    start;    i    <    end;    ++i)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
199	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  BYTE_MASK;  ++i)  {  if(buffer[i]!=  0)  {  return  0;  }  [CE]  class,  interface,  or  enum  expected  [FE]                        IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  BYTE_MASK;  ++i)  {  if(buffer[i]!=  0)  {  return  0;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  BYTE_MASK;  ++i)  {  if(buffer[i]!=  0)  {  return  0;  }	  for(int    i    =    start;    i    <    end;    ++i)    {    if(buffer[i]!=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]  >=  0)  {  return  0;  }  [CE]  class,  interface,  or  enum  expected  [FE]                            IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]  >=  0)  {  return  0;  }  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  offset;  ++i)  {  if(buffer[i]  >=  0)  {  return  0;  }	  for(int    i    =    start;    i    <    length;    ++i)    {    if(buffer[i]    >=    0)    {    return    0L;    }    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
201	[BUG]  [BUGGY]  for(int  i  =  start  +  length;  i  <  buffer.length;  i++)  {  [CE]  class,  interface,  or  enum  expected  [FE]                    IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start  +  length;  i  <  buffer.length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start  +  length;  i  <  buffer.length;  i++)  {	  for(int    i    =    start    +    length;    i    <    start;    i++)    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
202	[BUG]  [BUGGY]  for(int  i  =  start;  i  <  =  offset  +  length;  i++)  {  [CE]  illegal  start  of  expression  [FE]                  IOException      [CONTEXT]      public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {  longresult  =  0;  int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(     "Length       "+length+     "  must  be  at  least  2     ");  }  boolean  allNUL  =  true;      [BUGGY]  for(int  i  =  start;  i  <  =  offset  +  length;  i++)  {  [BUGGY]      if  (buffer[i]  !=  0){  allNUL  =  false;  break;  }  }  if  (allNUL)  {  return  0L;  }    [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	66	66	1	replace	for(int  i  =  start;  i  <  =  offset  +  length;  i++)  {	  for(int    i    =    start;    i    <    =    offset;    i++)    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
