bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  BYTE_MASK  +  length;  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  BYTE_MASK  +  length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  BYTE_MASK  +  length;	  result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
2	[BUG]  [BUGGY]  result  =  buffer.length;  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  buffer.length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  buffer.length;	  result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
3	[BUG]  [BUGGY]  result  =  BYTE_MASK  +  1;  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  BYTE_MASK  +  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  BYTE_MASK  +  1;	  result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
4	[BUG]  [BUGGY]  result  =  BYTE_MASK  |  BYTE_SIZE;  [CE]  empty  character  literal  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  BYTE_MASK  |  BYTE_SIZE;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  BYTE_MASK  |  BYTE_SIZE;	  result    =    BYTE_MASK;    	non-compiled	[CE]  empty  character  literal	3	None	replace
5	[BUG]  [BUGGY]  result  =  BYTE_MASK  -  1;  [CE]  empty  character  literal  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  BYTE_MASK  -  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  BYTE_MASK  -  1;	  result    =    BYTE_MASK;    	non-compiled	[CE]  empty  character  literal	3	None	replace
6	[BUG]  [BUGGY]  result  =  BYTE_MASK  |  BYTE_BACKSLASH;  [CE]  empty  character  literal  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  BYTE_MASK  |  BYTE_BACKSLASH;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  BYTE_MASK  |  BYTE_BACKSLASH;	  result    =    BYTE_MASK;    	non-compiled	[CE]  empty  character  literal	3	None	replace
7	[BUG]  [BUGGY]  result  =  BYTE_MASK  |  BYTE_BYTE_MASK;  [CE]  empty  character  literal  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  BYTE_MASK  |  BYTE_BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  BYTE_MASK  |  BYTE_BYTE_MASK;	  result    =    BYTE_MASK;    	non-compiled	[CE]  empty  character  literal	3	None	replace
8	[BUG]  [BUGGY]  int  result  =(length  <  0)?  0L  :  BYTE_MASK;  [CE]  empty  character  literal  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  int  result  =(length  <  0)?  0L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	int  result  =(length  <  0)?  0L  :  BYTE_MASK;	  long    result    =(length    <    0)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  empty  character  literal	17	None	replace
9	[BUG]  [BUGGY]  long  result  =(length  <  0)?  0L  :  buffer.length;  [CE]  empty  character  literal  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  0)?  0L  :  buffer.length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  0)?  0L  :  buffer.length;	  long    result    =(length    <    0)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  empty  character  literal	17	None	replace
10	[BUG]  [BUGGY]  long  result  =(length  <  1)?  0L  :  buffer.length;  [CE]  empty  character  literal  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  1)?  0L  :  buffer.length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  1)?  0L  :  buffer.length;	  long    result    =(length    <    1)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  empty  character  literal	16	None	replace
11	[BUG]  [BUGGY]  long  result  =(length  <  1)?  1L  :  BYTE_MASK;  [CE]  empty  character  literal  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  1)?  1L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  1)?  1L  :  BYTE_MASK;	  long    result    =(length    <    1)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  empty  character  literal	16	None	replace
12	[BUG]  [BUGGY]  int  result  =(length  <  1)?  0L  :  BYTE_MASK;  [CE]  empty  character  literal  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  int  result  =(length  <  1)?  0L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	int  result  =(length  <  1)?  0L  :  BYTE_MASK;	  long    result    =(length    <    1)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  empty  character  literal	16	None	replace
13	[BUG]  [BUGGY]  long  result  =(length  <  1)?  0L  :  1;  [CE]  empty  character  literal  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  1)?  0L  :  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  1)?  0L  :  1;	  long    result    =(length    <    1)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  empty  character  literal	16	None	replace
14	[BUG]  [BUGGY]  long  result  =(length  <  1)?  0L  :  BYTE_MASK  +  1;  [CE]  empty  character  literal  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  1)?  0L  :  BYTE_MASK  +  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  1)?  0L  :  BYTE_MASK  +  1;	  long    result    =(length    <    1)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  empty  character  literal	16	None	replace
15	[BUG]  [BUGGY]  long  result  =(length  <  <  1)?  0L  :  buffer[offset  +  1];  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  1)?  0L  :  buffer[offset  +  1];  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  1)?  0L  :  buffer[offset  +  1];	  long    result    =(length    <    <    1)?    0L    :    buffer[offset];    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
16	[BUG]  [BUGGY]  int  result  =(length  <  <  1)?  0L  :  buffer[offset];  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  int  result  =(length  <  <  1)?  0L  :  buffer[offset];  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	int  result  =(length  <  <  1)?  0L  :  buffer[offset];	  long    result    =(length    <    <    1)?    0L    :    buffer[offset];    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
17	[BUG]  [BUGGY]  long  result  =(offset  <  <  1)?  0L  :  buffer[offset];  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(offset  <  <  1)?  0L  :  buffer[offset];  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(offset  <  <  1)?  0L  :  buffer[offset];	  long    result    =(length    <    <    1)?    0L    :    buffer[offset];    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
18	[BUG]  [BUGGY]  long  result  =(length  <  <  1)?  0L  :  buffer[offset  +  length];  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  1)?  0L  :  buffer[offset  +  length];  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  1)?  0L  :  buffer[offset  +  length];	  long    result    =(length    <    <    1)?    0L    :    buffer[offset];    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
19	[BUG]  [BUGGY]  long  result  =(length  -  1)?  0L  :  buffer[offset];  [CE]  empty  character  literal  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  -  1)?  0L  :  buffer[offset];  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  -  1)?  0L  :  buffer[offset];	  long    result    =(length    <    <    1)?    0L    :    buffer[offset];    	non-compiled	[CE]  empty  character  literal	11	None	replace
20	[BUG]  [BUGGY]  long  result  =(length  <  <  1)?  0L  :  buffer[offset++];  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  1)?  0L  :  buffer[offset++];  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  1)?  0L  :  buffer[offset++];	  long    result    =(length    <    <    1)?    0L    :    buffer[offset];    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
21	[BUG]  [BUGGY]  long  result  =  0L;  long  result  =  0L;  [CE]  empty  character  literal  [FE]    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L;  long  result  =  0L;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long    result    =    0L;    long  result  =  0L;	  	non-compiled	[CE]  empty  character  literal	1	None	add
22	[BUG]  [BUGGY]  long  result  =  0L;  result  =  0L;  [CE]  empty  character  literal  [FE]      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L;  result  =  0L;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long    result    =    0L;    result  =  0L;	  	non-compiled	[CE]  empty  character  literal	1	None	add
23	[BUG]  [BUGGY]  long  result  =  0L;  int  result  =  0L;  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L;  int  result  =  0L;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long    result    =    0L;    int  result  =  0L;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
24	[BUG]  [BUGGY]  long  result  =  0L;  final  IOException  result  =  0L;  [CE]  illegal  start  of  expression  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L;  final  IOException  result  =  0L;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long    result    =    0L;    final  IOException  result  =  0L;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
25	[BUG]  [BUGGY]  long  result  =  0L;  byte  result  =  0L;  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L;  byte  result  =  0L;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long    result    =    0L;    byte  result  =  0L;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
26	[BUG]  [BUGGY]  long  result  =  0L;  Long  result  =  0L;  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L;  Long  result  =  0L;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long    result    =    0L;    Long  result  =  0L;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
27	[BUG]  [BUGGY]  long  result  =  0L;  final  IOException  ex  =  null;  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L;  final  IOException  ex  =  null;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long    result    =    0L;    final  IOException  ex  =  null;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
28	[BUG]  [BUGGY]  long  result  =  0L;  Result  result  =  0L;  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L;  Result  result  =  0L;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long    result    =    0L;    Result  result  =  0L;	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
29	[BUG]  [BUGGY]  long  result  =(length  <  2)?  0  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  2)?  0  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  2)?  0  :  BYTE_MASK;	  long    result    =(length    <    0)?    0    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
30	[BUG]  [BUGGY]  long  result  =(length  <  1)?  0  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  1)?  0  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  1)?  0  :  BYTE_MASK;	  long    result    =(length    <    0)?    0    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
31	[BUG]  [BUGGY]  int  result  =(length  <  0)?  0  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  int  result  =(length  <  0)?  0  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	int  result  =(length  <  0)?  0  :  BYTE_MASK;	  long    result    =(length    <    0)?    0    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
32	[BUG]  [BUGGY]  long  result  =(length  >  0)?  0  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  >  0)?  0  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  >  0)?  0  :  BYTE_MASK;	  long    result    =(length    <    0)?    0    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
33	[BUG]  [BUGGY]  long  result  =(length  <  3)?  0  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  3)?  0  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  3)?  0  :  BYTE_MASK;	  long    result    =(length    <    0)?    0    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
34	[BUG]  [BUGGY]  final  int  length  =  buffer.length();  [CE]  illegal  start  of  expression  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  int  length  =  buffer.length();  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	final  int  length  =  buffer.length();	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
35	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  offset,  length);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	System.arraycopy(buffer,  0,  buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
36	[BUG]  [BUGGY]  final  byte[]  buffer  =(byte[])this.currentByte.clone();  [CE]  illegal  start  of  expression  [FE]                          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  byte[]  buffer  =(byte[])this.currentByte.clone();  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	final  byte[]  buffer  =(byte[])this.currentByte.clone();	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
37	[BUG]  [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [CE]  illegal  start  of  expression  [FE]                            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  System.arraycopy(buffer,  offset,  buffer,  0,  length);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	System.arraycopy(buffer,  offset,  buffer,  0,  length);	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
38	[BUG]  [BUGGY]  final  byte[]  buffer  =(byte[])length.clone();  [CE]  illegal  start  of  expression  [FE]                              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  byte[]  buffer  =(byte[])length.clone();  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	final  byte[]  buffer  =(byte[])length.clone();	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
39	[BUG]  [BUGGY]  final  byte[]  buffer  =  getBuffer();  [CE]  illegal  start  of  expression  [FE]                                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  byte[]  buffer  =  getBuffer();  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	final  byte[]  buffer  =  getBuffer();	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  final  byte[]  buffer  =  getByte(buffer,  offset,  length);  [CE]  illegal  start  of  expression  [FE]                                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  byte[]  buffer  =  getByte(buffer,  offset,  length);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	final  byte[]  buffer  =  getByte(buffer,  offset,  length);	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
41	[BUG]  [BUGGY]  int  result  =  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  int  result  =  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	int  result  =  BYTE_MASK;	  long    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
42	[BUG]  [BUGGY]  long  result  =  offset;  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  offset;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  offset;	  long    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
43	[BUG]  [BUGGY]  long  result  =  BYTE_MASK  +  length;  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  BYTE_MASK  +  length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  BYTE_MASK  +  length;	  long    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
44	[BUG]  [BUGGY]  long  result  =  BYTE_MASK  -  1;  [CE]  illegal  start  of  expression  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  BYTE_MASK  -  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  BYTE_MASK  -  1;	  long    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
45	[BUG]  [BUGGY]  long  result  =  buffer.length;  [CE]  illegal  start  of  expression  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  buffer.length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  buffer.length;	  long    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
46	[BUG]  [BUGGY]  long  result  =  length;  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  length;	  long    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
47	[BUG]  [BUGGY]  result  =(length  <  1  ||  buffer.length  >  length)?  1  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =(length  <  1  ||  buffer.length  >  length)?  1  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =(length  <  1  ||  buffer.length  >  length)?  1  :  BYTE_MASK;	  result    =    1;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
48	[BUG]  [BUGGY]  result  =(length  <  1  ||  buffer.length  >  length)?  1L  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =(length  <  1  ||  buffer.length  >  length)?  1L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =(length  <  1  ||  buffer.length  >  length)?  1L  :  BYTE_MASK;	  result    =    1;    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
49	[BUG]  [BUGGY]  result  =(length  <  1  ||  buffer.length  >  0)?  1L  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =(length  <  1  ||  buffer.length  >  0)?  1L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =(length  <  1  ||  buffer.length  >  0)?  1L  :  BYTE_MASK;	  result    =    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  result  =(length  <  2)?  1  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =(length  <  2)?  1  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =(length  <  2)?  1  :  BYTE_MASK;	  result    =    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
51	[BUG]  [BUGGY]  result  =  1L;  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  1L;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  1L;	  result    =    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
52	[BUG]  [BUGGY]  int  result  =(length  <  <  2)?  0L  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  int  result  =(length  <  <  2)?  0L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	int  result  =(length  <  <  2)?  0L  :  BYTE_MASK;	  long    result    =(length    <    <    2)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
53	[BUG]  [BUGGY]  long  result  =(length  <  <  3)?  0L  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  3)?  0L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  3)?  0L  :  BYTE_MASK;	  long    result    =(length    <    <    2)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
54	[BUG]  [BUGGY]  long  result  =(length  <  <  2)?  1L  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  2)?  1L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  2)?  1L  :  BYTE_MASK;	  long    result    =(length    <    <    2)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  long  result  =(length  <  <  2)?  0L  :  BYTE_MASK  +  1;  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  2)?  0L  :  BYTE_MASK  +  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  2)?  0L  :  BYTE_MASK  +  1;	  long    result    =(length    <    <    2)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  long  result  =(offset  <  <  2)?  0L  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(offset  <  <  2)?  0L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(offset  <  <  2)?  0L  :  BYTE_MASK;	  long    result    =(length    <    <    2)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  long  result  =  System.currentTimeMillis()  /  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  System.currentTimeMillis()  /  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  System.currentTimeMillis()  /  BYTE_MASK;	  long    result    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
58	[BUG]  [BUGGY]  int  result  =  System.currentTimeMillis();  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  int  result  =  System.currentTimeMillis();  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	int  result  =  System.currentTimeMillis();	  long    result    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
59	[BUG]  [BUGGY]  long  result  =  System.currentTimeMillis()  +  1;  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  System.currentTimeMillis()  +  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  System.currentTimeMillis()  +  1;	  long    result    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
60	[BUG]  [BUGGY]  long  result  =  System.currentTimeMillis()  -  offset;  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  System.currentTimeMillis()  -  offset;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  System.currentTimeMillis()  -  offset;	  long    result    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
61	[BUG]  [BUGGY]  long  result  =  System.currentTimeMillis()  +  length;  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  System.currentTimeMillis()  +  length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  System.currentTimeMillis()  +  length;	  long    result    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
62	[BUG]  [BUGGY]  long  result  =  System.currentTimeMillis()  +  offset;  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  System.currentTimeMillis()  +  offset;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  System.currentTimeMillis()  +  offset;	  long    result    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
63	[BUG]  [BUGGY]  int  result  =  0L;  [CE]  illegal  start  of  type  [FE]    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  int  result  =  0L;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	int  result  =  0L;	  long    result    =    0L;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
64	[BUG]  [BUGGY]  long  result  =  0L  +  length;  [CE]  illegal  start  of  type  [FE]      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L  +  length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  0L  +  length;	  long    result    =    0L;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
65	[BUG]  [BUGGY]  long  result  =  0L  |  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L  |  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  0L  |  BYTE_MASK;	  long    result    =    0L;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
66	[BUG]  [BUGGY]  long  result  =  0L  *  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L  *  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  0L  *  BYTE_MASK;	  long    result    =    0L;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
67	[BUG]  [BUGGY]  long  result  =  0L  ||  length  >  buffer.length;  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L  ||  length  >  buffer.length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  0L  ||  length  >  buffer.length;	  long    result    =    0L;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
68	[BUG]  [BUGGY]  result  =  0L  +  length;  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  0L  +  length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  0L  +  length;	  result    =    0L;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
69	[BUG]  [BUGGY]  Result  result  =  0L;  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  Result  result  =  0L;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	Result  result  =  0L;	  result    =    0L;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
70	[BUG]  [BUGGY]  offset  =  0L;  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  offset  =  0L;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	offset  =  0L;	  result    =    0L;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
71	[BUG]  [BUGGY]  long  result  =(length  <  2)?  1L  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  2)?  1L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  2)?  1L  :  BYTE_MASK;	  long    result    =(length    <    2)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
72	[BUG]  [BUGGY]  int  result  =(length  <  2)?  0L  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  int  result  =(length  <  2)?  0L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	int  result  =(length  <  2)?  0L  :  BYTE_MASK;	  long    result    =(length    <    2)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
73	[BUG]  [BUGGY]  long  result  =(length  <  2)?  0L  :  buffer.length;  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  2)?  0L  :  buffer.length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  2)?  0L  :  buffer.length;	  long    result    =(length    <    2)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
74	[BUG]  [BUGGY]  long  result  =(length  <  2)?  0L  :  1;  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  2)?  0L  :  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  2)?  0L  :  1;	  long    result    =(length    <    2)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
75	[BUG]  [BUGGY]  long  result  =(length  <  2)?  0L  :  BYTE_MASK  +  1;  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  2)?  0L  :  BYTE_MASK  +  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  2)?  0L  :  BYTE_MASK  +  1;	  long    result    =(length    <    2)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
76	[BUG]  [BUGGY]  int  result  =(length  <  <  1)?  0L  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  int  result  =(length  <  <  1)?  0L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	int  result  =(length  <  <  1)?  0L  :  BYTE_MASK;	  long    result    =(length    <    <    1)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
77	[BUG]  [BUGGY]  long  result  =(length  <  <  1)?  1L  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  1)?  1L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  1)?  1L  :  BYTE_MASK;	  long    result    =(length    <    <    1)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  long  result  =(length  -  1)?  0L  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  -  1)?  0L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  -  1)?  0L  :  BYTE_MASK;	  long    result    =(length    <    <    1)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
79	[BUG]  [BUGGY]  long  result  =(offset  <  <  1)?  0L  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(offset  <  <  1)?  0L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(offset  <  <  1)?  0L  :  BYTE_MASK;	  long    result    =(length    <    <    1)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
80	[BUG]  [BUGGY]  long  result  =(length  <  <  1)?  BYTE_MASK  :  0L;  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  1)?  BYTE_MASK  :  0L;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  1)?  BYTE_MASK  :  0L;	  long    result    =(length    <    <    1)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
81	[BUG]  [BUGGY]  result  =(length  >  0)?  0  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =(length  >  0)?  0  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =(length  >  0)?  0  :  BYTE_MASK;	  result    =    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
82	[BUG]  [BUGGY]  result  =(length  <  0)?  0  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =(length  <  0)?  0  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =(length  <  0)?  0  :  BYTE_MASK;	  result    =    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
83	[BUG]  [BUGGY]  result  =(length  >  0)?  0  :  buffer[offset  +  length];  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =(length  >  0)?  0  :  buffer[offset  +  length];  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =(length  >  0)?  0  :  buffer[offset  +  length];	  result    =    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
84	[BUG]  [BUGGY]  result  =(length  <  0)?  0  :  buffer[offset  +  length];  [CE]  illegal  start  of  expression  [FE]                          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =(length  <  0)?  0  :  buffer[offset  +  length];  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =(length  <  0)?  0  :  buffer[offset  +  length];	  result    =    0;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
85	[BUG]  [BUGGY]  int  result  =(length  <  <  1)?  0L  :  buffer.length;  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  int  result  =(length  <  <  1)?  0L  :  buffer.length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	int  result  =(length  <  <  1)?  0L  :  buffer.length;	  long    result    =(length    <    <    1)?    0L    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
86	[BUG]  [BUGGY]  long  result  =(length  <  <  1)?  0L  :  buffer.length  +  1;  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  1)?  0L  :  buffer.length  +  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  1)?  0L  :  buffer.length  +  1;	  long    result    =(length    <    <    1)?    0L    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
87	[BUG]  [BUGGY]  long  result  =(length  <  <  1)?  0L  :  buffer.length  +  length;  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  1)?  0L  :  buffer.length  +  length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  1)?  0L  :  buffer.length  +  length;	  long    result    =(length    <    <    1)?    0L    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
88	[BUG]  [BUGGY]  long  result  =(length  <  <  1)?  1L  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  1)?  1L  :  buffer.length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  1)?  1L  :  buffer.length;	  long    result    =(length    <    <    1)?    0L    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
89	[BUG]  [BUGGY]  long  result  =(length  -  1)?  0L  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  -  1)?  0L  :  buffer.length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  -  1)?  0L  :  buffer.length;	  long    result    =(length    <    <    1)?    0L    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
90	[BUG]  [BUGGY]  long  result  =  BYTE_MASK  +  1;  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  BYTE_MASK  +  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  BYTE_MASK  +  1;	  long    result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
91	[BUG]  [BUGGY]  long  result  =(length  <  <  1)?  0L  :  BYTE_MASK  +  1;  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  1)?  0L  :  BYTE_MASK  +  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  1)?  0L  :  BYTE_MASK  +  1;	  long    result    =(length    <    <    1)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
92	[BUG]  [BUGGY]  long  result  =(length  <  <  2)?  0L  :  buffer.length;  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  2)?  0L  :  buffer.length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  2)?  0L  :  buffer.length;	  long    result    =(length    <    <    2)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
93	[BUG]  [BUGGY]  long  result  =(length  <  <  1)?  0L  :  buffer.length  +  offset;  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  1)?  0L  :  buffer.length  +  offset;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  1)?  0L  :  buffer.length  +  offset;	  long    result    =(length    <    <    1)?    0L    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
94	[BUG]  [BUGGY]  long  result  =(length  <  <  1)?  0L  :  buffer[offset  +  length);  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  1)?  0L  :  buffer[offset  +  length);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  1)?  0L  :  buffer[offset  +  length);	  long    result    =(length    <    <    1)?    0L    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
95	[BUG]  [BUGGY]  result  =  BYTE_MASK  |  BYTE_LBRACKET;  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  BYTE_MASK  |  BYTE_LBRACKET;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  BYTE_MASK  |  BYTE_LBRACKET;	  result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
96	[BUG]  [BUGGY]  result  =  offset;  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  offset;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  offset;	  result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
97	[BUG]  [BUGGY]  result  =  0L  +  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  0L  +  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  0L  +  BYTE_MASK;	  result    =    0L;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
98	[BUG]  [BUGGY]  byte  result  =  0L;  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  byte  result  =  0L;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	byte  result  =  0L;	  result    =    0L;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
99	[BUG]  [BUGGY]  long  result  =(length  <  <  1)?  1L  :  buffer[offset];  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  1)?  1L  :  buffer[offset];  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  1)?  1L  :  buffer[offset];	  long    result    =(length    <    <    1)?    0L    :    buffer[offset];    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
100	[BUG]  [BUGGY]  result  =  System.currentTimeMillis();  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  System.currentTimeMillis();  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  System.currentTimeMillis();	  result    =    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
101	[BUG]  [BUGGY]  result  =  0,  length  =  buffer.length;  [CE]  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  0,  length  =  buffer.length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  0,  length  =  buffer.length;	  result    =    1;    	non-compiled	[CE]  	7	None	replace
102	[BUG]  [BUGGY]  result  =  0,  length  =  buffer.length  -  offset;  [CE]  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  0,  length  =  buffer.length  -  offset;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  0,  length  =  buffer.length  -  offset;	  result    =    1;    	non-compiled	[CE]  	7	None	replace
103	[BUG]  [BUGGY]  result  =(length  <  1)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =(length  <  1)?  0  :  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =(length  <  1)?  0  :  1;	  result    =    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
104	[BUG]  [BUGGY]  final  int  length  =  buffer.length;  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  int  length  =  buffer.length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	final  int  length  =  buffer.length;	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
105	[BUG]  [BUGGY]  final  int  start  =  offset  +  length;  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  int  start  =  offset  +  length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	final  int  start  =  offset  +  length;	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
106	[BUG]  [BUGGY]  final  int  length  =  buffer.length  -  offset;  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  int  length  =  buffer.length  -  offset;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	final  int  length  =  buffer.length  -  offset;	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
107	[BUG]  [BUGGY]  final  int  start  =  buffer.length();  [CE]  illegal  start  of  type  [FE]                            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  final  int  start  =  buffer.length();  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	final  int  start  =  buffer.length();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
108	[BUG]  [BUGGY]  long  result  =  0L  +  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L  +  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  0L  +  BYTE_MASK;	  long    result    =    0L;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
109	[BUG]  [BUGGY]  long  result  =  0L  +  1;  [CE]  illegal  start  of  type  [FE]      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L  +  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  0L  +  1;	  long    result    =    0L;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
110	[BUG]  [BUGGY]  long  result  =(length  <  =  0)?  0  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  =  0)?  0  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  =  0)?  0  :  BYTE_MASK;	  long    result    =(length    <    0)?    0    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
111	[BUG]  [BUGGY]  long  result  =(length  <  0)?  0  :  buffer.length;  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  0)?  0  :  buffer.length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  0)?  0  :  buffer.length;	  long    result    =(length    <    0)?    0    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
112	[BUG]  [BUGGY]  long  result  =(length  <  0)?  0  :  BYTE_MASK  +  1;  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  0)?  0  :  BYTE_MASK  +  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  0)?  0  :  BYTE_MASK  +  1;	  long    result    =(length    <    0)?    0    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
113	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsOctal(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsOctal(buffer,  offset,  length);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  JsonStringEncoder.getInstance().encodeAsOctal(buffer,  offset,  length);	  result    =    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
114	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsIOctal(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsIOctal(buffer,  offset,  length);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  JsonStringEncoder.getInstance().encodeAsIOctal(buffer,  offset,  length);	  result    =    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
115	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsIOCtal(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsIOCtal(buffer,  offset,  length);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  JsonStringEncoder.getInstance().encodeAsIOCtal(buffer,  offset,  length);	  result    =    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
116	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().quoteAsLong(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  JsonStringEncoder.getInstance().quoteAsLong(buffer,  offset,  length);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  JsonStringEncoder.getInstance().quoteAsLong(buffer,  offset,  length);	  result    =    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
117	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().quoteAsLong(buffer);  [CE]  illegal  start  of  type  [FE]                            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  JsonStringEncoder.getInstance().quoteAsLong(buffer);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  JsonStringEncoder.getInstance().quoteAsLong(buffer);	  result    =    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
118	[BUG]  [BUGGY]  long  result  =(length  <  0)?  0L  :  BYTE_MASK  +  1;  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  0)?  0L  :  BYTE_MASK  +  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  0)?  0L  :  BYTE_MASK  +  1;	  long    result    =(length    <    0)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
119	[BUG]  [BUGGY]  long  result  =(length  <  =  0)?  0L  :  BYTE_MASK;  [CE]  illegal  start  of  expression  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  =  0)?  0L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  =  0)?  0L  :  BYTE_MASK;	  long    result    =(length    <    0)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
120	[BUG]  [BUGGY]  long  result  =  0L;  final  IOException  exception  =  new  IOException(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L;  final  IOException  exception  =  new  IOException(buffer,  offset,  length);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long    result    =    0L;    final  IOException  exception  =  new  IOException(buffer,  offset,  length);	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
121	[BUG]  [BUGGY]  long  result  =  0L;  final  IOException  exception  =  new  IOException( " ");  [CE]  illegal  start  of  type  [FE]      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L;  final  IOException  exception  =  new  IOException( " ");  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long    result    =    0L;    final  IOException  exception  =  new  IOException( " ");	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
122	[BUG]  [BUGGY]  long  result  =  0L;  final  IOException  exception  =  new  IOException(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L;  final  IOException  exception  =  new  IOException(buffer,  offset  +  length);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long    result    =    0L;    final  IOException  exception  =  new  IOException(buffer,  offset  +  length);	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
123	[BUG]  [BUGGY]  long  result  =  System.currentTimeMillis()  -  start;  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  System.currentTimeMillis()  -  start;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  System.currentTimeMillis()  -  start;	  long    result    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
124	[BUG]  [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  System.arraycopy(buffer,  0,  buffer,  0,  length);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	System.arraycopy(buffer,  0,  buffer,  0,  length);	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
125	[BUG]  [BUGGY]  if(length  <  2)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  2)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	if(length  <  2)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2 ");  }	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
126	[BUG]  [BUGGY]  if(length  <  2)  {  throw  new  IllegalArgumentException( "Byte  length  must  be  >  2 ");  }  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  2)  {  throw  new  IllegalArgumentException( "Byte  length  must  be  >  2 ");  }  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	if(length  <  2)  {  throw  new  IllegalArgumentException( "Byte  length  must  be  >  2 ");  }	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
127	[BUG]  [BUGGY]  if(length  <  2)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2. ");  }  [CE]  illegal  start  of  type  [FE]                            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  if(length  <  2)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2. ");  }  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	if(length  <  2)  {  throw  new  IllegalArgumentException( "Length   "+length+ "  must  be  at  least  2. ");  }	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
128	[BUG]  [BUGGY]  long  result  =(length  >  1)?  0L  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  >  1)?  0L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  >  1)?  0L  :  BYTE_MASK;	  long    result    =(length    <    1)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
129	[BUG]  [BUGGY]  long  result  =  System.currentTimeMillis()  -  buffer.length;  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  System.currentTimeMillis()  -  buffer.length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =  System.currentTimeMillis()  -  buffer.length;	  long    result    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
130	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsByte(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsByte(buffer,  offset,  length);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  JsonStringEncoder.getInstance().encodeAsByte(buffer,  offset,  length);	  result    =    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
131	[BUG]  [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsNumber(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  JsonStringEncoder.getInstance().encodeAsNumber(buffer,  offset,  length);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  JsonStringEncoder.getInstance().encodeAsNumber(buffer,  offset,  length);	  result    =    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
132	[BUG]  [BUGGY]  long  result  =(length  <  <  1)?  0L  :  buffer.length  -  1;  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  1)?  0L  :  buffer.length  -  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  1)?  0L  :  buffer.length  -  1;	  long    result    =(length    <    <    1)?    0L    :    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
133	[BUG]  [BUGGY]  long  result  =(length  <  2  ||  length  >  BYTE_MASK)?  0L  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  2  ||  length  >  BYTE_MASK)?  0L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  2  ||  length  >  BYTE_MASK)?  0L  :  BYTE_MASK;	  long    result    =(length    <    2)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
134	[BUG]  [BUGGY]  long  result  =(length  <  2?  0L  :  BYTE_MASK);  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  2?  0L  :  BYTE_MASK);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  2?  0L  :  BYTE_MASK);	  long    result    =(length    <    2)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
135	[BUG]  [BUGGY]  result  =  length;  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  length;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  length;	  result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
136	[BUG]  [BUGGY]  result  =  BYTE_MASK  |  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]            IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =  BYTE_MASK  |  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =  BYTE_MASK  |  BYTE_MASK;	  result    =    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
137	[BUG]  [BUGGY]  long  result  =  0L;  final  byte[]  buffer  =(byte[])Byte.parse(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L;  final  byte[]  buffer  =(byte[])Byte.parse(buffer,  offset,  length);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long    result    =    0L;    final  byte[]  buffer  =(byte[])Byte.parse(buffer,  offset,  length);	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
138	[BUG]  [BUGGY]  long  result  =  0L;  final  byte[]  buffer  =  parseByte(buffer,  offset,  length);  [CE]  illegal  start  of  type  [FE]      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L;  final  byte[]  buffer  =  parseByte(buffer,  offset,  length);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long    result    =    0L;    final  byte[]  buffer  =  parseByte(buffer,  offset,  length);	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
139	[BUG]  [BUGGY]  long  result  =  0L;  final  byte[]  buffer  =  parseByte(buffer,  offset,  length);  result  =  0L;  [CE]  illegal  start  of  type  [FE]        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L;  final  byte[]  buffer  =  parseByte(buffer,  offset,  length);  result  =  0L;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long    result    =    0L;    final  byte[]  buffer  =  parseByte(buffer,  offset,  length);  result  =  0L;	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
140	[BUG]  [BUGGY]  long  result  =  0L;  final  byte[]  buffer  =(byte[])Byte.parse(buffer,  offset  +  length);  [CE]  illegal  start  of  type  [FE]          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =  0L;  final  byte[]  buffer  =(byte[])Byte.parse(buffer,  offset  +  length);  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long    result    =    0L;    final  byte[]  buffer  =(byte[])Byte.parse(buffer,  offset  +  length);	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
141	[BUG]  [BUGGY]  long  result  =(length  <  3)?  0L  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]                IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  3)?  0L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  3)?  0L  :  BYTE_MASK;	  long    result    =(length    <    0)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
142	[BUG]  [BUGGY]  long  result  =(length  <  <  1)?  0L  :  1;  [CE]  illegal  start  of  type  [FE]              IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  <  1)?  0L  :  1;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  <  1)?  0L  :  1;	  long    result    =(length    <    <    1)?    0L    :    BYTE_MASK;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
143	[BUG]  [BUGGY]  long  result  =(length  <  0)?  0L  :  0L;  [CE]  illegal  start  of  type  [FE]    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  long  result  =(length  <  0)?  0L  :  0L;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	long  result  =(length  <  0)?  0L  :  0L;	  long    result    =    0L;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
144	[BUG]  [BUGGY]  result  =(length  >  0)?  1  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]                  IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =(length  >  0)?  1  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =(length  >  0)?  1  :  BYTE_MASK;	  result    =    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
145	[BUG]  [BUGGY]  result  =(length  >  0)?  1L  :  BYTE_MASK;  [CE]  illegal  start  of  type  [FE]                    IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =(length  >  0)?  1L  :  BYTE_MASK;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =(length  >  0)?  1L  :  BYTE_MASK;	  result    =    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
146	[BUG]  [BUGGY]  result  =(length  <  2)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                      IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =(length  <  2)?  1  :  0;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =(length  <  2)?  1  :  0;	  result    =    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
147	[BUG]  [BUGGY]  result  =(length  <  1)?  1  :  0;  [CE]  illegal  start  of  type  [FE]                        IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =(length  <  1)?  1  :  0;  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =(length  <  1)?  1  :  0;	  result    =    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
148	[BUG]  [BUGGY]  result  =(length  >  0)?  1  :  buffer[offset  +  length];  [CE]  illegal  start  of  type  [FE]                          IOException    [CONTEXT]    public  static  long  parseOctal(final  byte[]  buffer,  final  int  offset,  final  int  length)  {    [BUGGY]  result  =(length  >  0)?  1  :  buffer[offset  +  length];  [BUGGY]    int  end  =  offset  +  length;  int  start  =  offset;  if  (length  <  2){  throw  new  IllegalArgumentException(   "Length     "+length+   "  must  be  at  least  2   ");  }  boolean  allNUL  =  true;  for  (int  i  =  start;  i  <  end;  i++){  if  (buffer[i]  !=  0){  [CLASS]  TarUtils  [METHOD]  parseOctal  [RETURN_TYPE]  long  final  byte[]  buffer  final  int  offset  final  int  length  [VARIABLES]  byte[]  buffer  boolean  allNUL  int  BYTE_MASK  end  i  length  offset  start  long  result  byte  currentByte  trailer  	projects/Compress14/src/main/java/org/apache/commons/compress/archivers/tar/TarUtils.java	1.0	57	57	1	replace	result  =(length  >  0)?  1  :  buffer[offset  +  length];	  result    =    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
