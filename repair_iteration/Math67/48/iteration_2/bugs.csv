bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2),  Math.max(bound2,  max);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2),  Math.max(bound2,  max);  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2),  Math.max(bound2,  max);	  optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
2	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
3	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound1));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound1));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound1));	  optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
4	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2,  Math.min(bound2),  max);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2,  Math.min(bound2),  max);  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2,  Math.min(bound2),  max);	  optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
5	[BUG]  [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2),  goalType.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2),  goalType.max(bound1,  bound2));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2),  goalType.max(bound1,  bound2));	      optimisera[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
6	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  bound1));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  bound1));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2  -  bound1));	      optimisera[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
7	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2),  goalType.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2),  goalType.max(bound1,  bound2));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2),  goalType.max(bound1,  bound2));	      optimisera[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
8	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max);  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max);	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound3));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
9	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max));	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound3));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
10	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2,  max),  Math.max(bound1));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2,  max),  Math.max(bound1));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2,  max),  Math.max(bound1));	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound3));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
11	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  goalType));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  goalType));	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
12	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(max));	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
13	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  0));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  0));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  0));	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    0));    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
14	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound2,  0));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound2,  0));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound2,  0));	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    0));    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
15	[BUG]  [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimiser.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	      optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
16	[BUG]  [BUGGY]  optimiser.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimiser.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimiser.setOptimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	      optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
17	[BUG]  [BUGGY]  optimiser.setOptimize(f,  bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimiser.setOptimize(f,  bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimiser.setOptimize(f,  bound1,  bound2),  Math.max(bound2,  max));	      optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
18	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max));	      optimisationa[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
19	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max);  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max);	      optimisationa[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
20	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	      optimisationa[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
21	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2,  max),  Math.max(bound1));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2,  max),  Math.max(bound1));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2,  max),  Math.max(bound1));	      optimisationa[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
22	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimizedValue(f);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimizedValue(f);  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimizedValue(f);	  optimaValues[i]    =    optimizer.getOptimizedValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
23	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimizedValue();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.getOptimizedValue();  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.getOptimizedValue();	  optimaValues[i]    =    optimizer.getOptimizedValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
24	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimizedValue(f,  goalType);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimizedValue(f,  goalType);  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimizedValue(f,  goalType);	  optimaValues[i]    =    optimizer.getOptimizedValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
25	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max));	  optimaValues[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
26	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max);  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max);	  optimaValues[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
27	[BUG]  [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max));	      optimisera[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
28	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max),  optima);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max),  optima);  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max),  optima);	      optimisera[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
29	[BUG]  [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(max));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(max));	      optimisera[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
30	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2),  Math.max(bound2,  max));	  optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
31	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  bound1,  bound2),  Math.max(bound2,  max);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  bound1,  bound2),  Math.max(bound2,  max);  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.getOptimize(f,  bound1,  bound2),  Math.max(bound2,  max);	  optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
32	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optimaValues[i]    =    optimizer.getOptimization(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
33	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optimaValues[i]    =    optimizer.getOptimization(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
34	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimization(f,  bound1,  bound2),  Math.max(bound2,  max));	  optimaValues[i]    =    optimizer.getOptimization(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
35	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  bound1,  bound2),  Math.max(bound2,  max);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  bound1,  bound2),  Math.max(bound2,  max);  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimization(f,  bound1,  bound2),  Math.max(bound2,  max);	  optimaValues[i]    =    optimizer.getOptimization(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
36	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimizer(f);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimizer(f);  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimizer(f);	  optimaValues[i]    =    optimizer.getOptimizer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
37	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimizer();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.getOptimizer();  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.getOptimizer();	  optimaValues[i]    =    optimizer.getOptimizer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
38	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimizer(f,  goalType);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimizer(f,  goalType);  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimizer(f,  goalType);	  optimaValues[i]    =    optimizer.getOptimizer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
39	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2),  Math.max(bound1,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2),  Math.max(bound1,  max));	      optimisationa[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
40	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2,  max),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2,  max),  Math.max(bound1,  bound2));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2,  max),  Math.max(bound1,  bound2));	      optimisationa[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
41	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2),  Math.max(bound1,  max));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2),  Math.max(bound1,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2),  Math.max(bound1,  max));	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
42	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2,  max),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2,  max),  Math.max(bound1,  bound2));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound2,  max),  Math.max(bound1,  bound2));	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
43	[BUG]  [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  bound1));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  bound1));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  bound1));	  optimaValues[i]    =    optimizer.getOptimize();    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
44	[BUG]  [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max);  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2),  Math.max(bound2,  max);	      optimisera[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
45	[BUG]  [BUGGY]  optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisation.setOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	      optimiser.setOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
46	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  0));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  0));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  0));	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    0));    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
47	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
48	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
49	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  i));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  i));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  i));	  optimaValues[i]    =    optimizer.getOptimization(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
50	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  0));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  0));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  0));	  optimaValues[i]    =    optimizer.getOptimization(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
51	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound3));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
52	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound2,  max));	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound3));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
53	[BUG]  [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	      optimisera[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
54	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound1,  bound2));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound1,  bound2));	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
55	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(max,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(max,  bound2));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(max,  bound2));	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
56	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	      optimisationa[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
57	[BUG]  [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound2,  max));	      optimisera[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
58	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound2,  max));	      optimisera[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
59	[BUG]  [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound2,  goalType));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound2,  goalType));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound2,  goalType));	      optimisera[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
60	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound1,  bound2));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound1,  bound2));	      optimisationa[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
61	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optimaValues[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
62	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	  optimaValues[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
63	[BUG]  [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound1,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound1,  bound2));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(max,  bound2),  Math.max(bound1,  bound2));	      optimisera[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
64	[BUG]  [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(max,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(max,  bound2));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(max,  bound2));	      optimisera[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
65	[BUG]  [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisera[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2));	      optimisera[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
66	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisationa[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(bound2));	      optimisera[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
67	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  bound3));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  bound3));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  bound3));	  optimaValues[i]    =    optimizer.getOptimize();    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
68	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2,  Math.min(bound1,  max),  Math.max(bound2));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2,  Math.min(bound1,  max),  Math.max(bound2));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  bound1,  bound2,  Math.min(bound1,  max),  Math.max(bound2));	  optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
69	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.max(bound1,  bound2),  Math.min(max  -  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.max(bound1,  bound2),  Math.min(max  -  bound2));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.max(bound1,  bound2),  Math.min(max  -  bound2));	  optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
70	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2),  optima);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2),  optima);  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2),  optima);	  optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
71	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max);  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max);	      optimisationa[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
72	[BUG]  [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.max(bound1,  bound2),  Math.min(max,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.max(bound1,  bound2),  Math.min(max,  bound2));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimisationa[i]  =  optimizer.optimize(f,  goalType,  Math.max(bound1,  bound2),  Math.min(max,  bound2));	      optimisationa[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
73	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.max(bound1,  bound2),  Math.min(max,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.max(bound1,  bound2),  Math.min(max,  bound2));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimize(f,  goalType,  Math.max(bound1,  bound2),  Math.min(max,  bound2));	  optimaValues[i]    =    optimizer.getOptimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
74	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max);  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound2,  max);	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
75	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  bound1,  bound2,  Math.min(bound1,  bound2),  Math.max(max,  optima[i]));	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound1,    bound2));    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
76	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.max(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.max(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.max(bound1,  bound2),  Math.max(bound2,  max));	  optimaValues[i]    =    optimizer.getOptimization(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
77	[BUG]  [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.max(bound1,  bound2),  Math.min(max,  bound2));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.max(bound1,  bound2),  Math.min(max,  bound2));  [BUGGY]    }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optimaValues[i]  =  optimizer.getOptimization(f,  goalType,  Math.max(bound1,  bound2),  Math.min(max,  bound2));	  optimaValues[i]    =    optimizer.getOptimization(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    bound1));    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
78	[BUG]  [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    for  (int  i  =  0;  i  <  starts;  ++i)  {  try  {  optimizer.setMaximalIterationCount(maxIterations  -  totalIterations);  optimizer.setMaxEvaluations(maxEvaluations  -  totalEvaluations);  final  double  bound1  =  (i  ==  0)  ?  min  :  min  +  generator.nextDouble()  *  (max  -  min);  final  double  bound2  =  (i  ==  0)  ?  max  :  min  +  generator.nextDouble()  *  (max  -  min);  optima[i]  =  optimizer.optimize(f,  goalType,  Math.min(bound1,  bound2),  Math.max(bound1,  bound2));    [BUGGY]  optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  max));  [BUGGY]    optimaValues[i]  =  optimizer.getFunctionValue();  }  catch  (FunctionEvaluationException  fee)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  catch  (ConvergenceException  ce)  {  optima[i]  =  Double.NaN;  optimaValues[i]  =  Double.NaN;  }  totalIterations+=  optimizer.getIterationCount();  totalEvaluations  +=  optimizer.getEvaluations();  [CLASS]  MultiStartUnivariateRealOptimizer  [METHOD]  optimize  [RETURN_TYPE]  double  UnivariateRealFunction  f  GoalType  goalType  final  double  min  final  double  max  [VARIABLES]  boolean  double[]  optima  optimaValues  double  bound1  bound2  currX  currY  mIX  mIY  max  min  prevY  ConvergenceException  ce  UnivariateRealFunction  f  GoalType  goalType  UnivariateRealOptimizer  optimizer  FunctionEvaluationException  fee  long  serialVersionUID  int  count  i  j  lastNaN  maxEvaluations  maxIterations  starts  totalEvaluations  totalIterations  RandomGenerator  generator  	projects/Math67/src/main/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizer.java	0.7071067811865475	247	247	1	replace	optima[i]  =  optimizer.optimize(f,  max,  Math.min(bound1,  bound2),  Math.max(bound2,  max));	      optima[i]    =    optimizer.optimize(f,    goalType,    Math.min(bound1,    bound2),    Math.max(bound2,    max));    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
